"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[2707],{8453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>l});var t=o(6540);const i={},r=t.createContext(i);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(r.Provider,{value:n},e.children)}},9779:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"Portfolio/PreviewMd/toolbar","title":"Toolbar Component","description":"The Toolbar component provides the main user controls for the Markdown editor. It includes functionality for file operations, editor settings, and application information.","source":"@site/docs/Portfolio/PreviewMd/toolbar.md","sourceDirName":"Portfolio/PreviewMd","slug":"/Portfolio/PreviewMd/toolbar","permalink":"/dev/fr/docs/Portfolio/PreviewMd/toolbar","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Project Documentation Summary","permalink":"/dev/fr/docs/Portfolio/PreviewMd/summary"},"next":{"title":"TimeLock Documentation","permalink":"/dev/fr/docs/Portfolio/Timelock/"}}');var i=o(4848),r=o(8453);const s={},l="Toolbar Component",d={},a=[{value:"Props",id:"props",level:2},{value:"Features",id:"features",level:2},{value:"File Operations",id:"file-operations",level:3},{value:"Editor Settings",id:"editor-settings",level:3},{value:"Application Information",id:"application-information",level:3},{value:"Code Breakdown",id:"code-breakdown",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"toolbar-component",children:"Toolbar Component"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Toolbar"})," component provides the main user controls for the Markdown editor. It includes functionality for file operations, editor settings, and application information."]}),"\n",(0,i.jsx)(n.h2,{id:"props",children:"Props"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"minimapEnabled: boolean"}),": The current state of the minimap."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"setMinimapEnabled: (enabled: boolean) => void"}),": Callback to toggle the minimap."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"wordWrapEnabled: boolean"}),": The current state of word wrap."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"setWordWrapEnabled: (enabled: boolean) => void"}),": Callback to toggle word wrap."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"markdown: string"}),": The current Markdown content."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"setMarkdown: (value: string) => void"}),": Callback to update the Markdown content."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,i.jsx)(n.h3,{id:"file-operations",children:"File Operations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"New Document"}),": Clears the current editor content after a confirmation prompt."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Load Document"}),": Opens a file dialog to load a ",(0,i.jsx)(n.code,{children:".md"}),", ",(0,i.jsx)(n.code,{children:".markdown"}),", or ",(0,i.jsx)(n.code,{children:".txt"})," file into the editor."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Save Document"}),": Downloads the current editor content as a ",(0,i.jsx)(n.code,{children:"document.md"})," file."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Copy Markdown"}),": Copies the current Markdown content to the clipboard."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"editor-settings",children:"Editor Settings"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Toggle Minimap"}),": A toggle button to show or hide the editor's minimap."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Toggle Word Wrap"}),": A toggle button to enable or disable word wrapping in the editor."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Theme Toggle"}),": A button to switch between light and dark themes."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"application-information",children:"Application Information"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"About Sheet"}),": A button that opens a side sheet with information about the application and its features."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"code-breakdown",children:"Code Breakdown"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'// ... imports\n\nconst Toolbar: React.FC<ToolbarProps> = ({ ...props }) => {\n  const [copied, setCopied] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const handleSave = () => { /* ... */ };\n  const handleLoadFile = () => { /* ... */ };\n  const handleFileChange = (event) => { /* ... */ };\n  const handleCopyMarkdown = () => { /* ... */ };\n  const handleNewDocument = () => { /* ... */ };\n\n  return (\n    <div className="flex items-center justify-between ...">\n      {/* File Operations */}\n      <div className="flex items-center space-x-2">\n        {/* New, Load, Save, Copy Buttons */}\n      </div>\n\n      {/* Editor Settings */}\n      <div className="flex items-center space-x-2">\n        {/* Minimap and Word Wrap Toggles */}\n        <ThemeToggle />\n        {/* About Sheet Trigger */}\n      </div>\n    </div>\n  );\n};\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"fileInputRef"})}),": A ",(0,i.jsx)(n.code,{children:"useRef"})," hook to access the hidden file input element for loading files."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"handleSave"})}),": Creates a ",(0,i.jsx)(n.code,{children:"Blob"})," from the Markdown content and generates a downloadable link."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"handleLoadFile"})}),": Programmatically clicks the hidden file input to open the file dialog."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"handleFileChange"})}),": Reads the selected file using ",(0,i.jsx)(n.code,{children:"FileReader"})," and updates the editor content."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"handleCopyMarkdown"})}),": Uses the ",(0,i.jsx)(n.code,{children:"navigator.clipboard"})," API to copy the Markdown to the clipboard."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"handleNewDocument"})}),": Reloads the page to start with a fresh document, after a confirmation."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"UI Components"}),": The toolbar is built using components from ",(0,i.jsx)(n.code,{children:"lucide-react"})," for icons and custom UI components like ",(0,i.jsx)(n.code,{children:"Button"}),", ",(0,i.jsx)(n.code,{children:"Toggle"}),", and ",(0,i.jsx)(n.code,{children:"Sheet"})," for its structure and functionality."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);