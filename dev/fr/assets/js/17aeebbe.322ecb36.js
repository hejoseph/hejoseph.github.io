"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[3263],{908:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"java/Core/OOP/immutability","title":"Immutabilit\xe9 - `final` et copies d\xe9fensives","description":"L\'immutabilit\xe9 est un concept fondamental en programmation orient\xe9e objet, particuli\xe8rement important en Java, qui d\xe9signe l\'\xe9tat d\'un objet restant inchang\xe9 apr\xe8s sa cr\xe9ation. Un objet immuable est un objet dont l\'\xe9tat interne ne peut pas \xeatre modifi\xe9 une fois qu\'il a \xe9t\xe9 enti\xe8rement construit.","source":"@site/i18n/fr/docusaurus-plugin-content-docs/current/java/1-Core/1-OOP/6-immutability.md","sourceDirName":"java/1-Core/1-OOP","slug":"/java/Core/OOP/immutability","permalink":"/dev/fr/docs/java/Core/OOP/immutability","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"java","permalink":"/dev/fr/docs/tags/java"},{"inline":true,"label":"immutabilit\xe9","permalink":"/dev/fr/docs/tags/immutabilite"},{"inline":true,"label":"final","permalink":"/dev/fr/docs/tags/final"},{"inline":true,"label":"copies d\xe9fensives","permalink":"/dev/fr/docs/tags/copies-defensives"},{"inline":true,"label":"s\xe9curit\xe9 des threads","permalink":"/dev/fr/docs/tags/securite-des-threads"},{"inline":true,"label":"programmation d\xe9fensive","permalink":"/dev/fr/docs/tags/programmation-defensive"}],"version":"current","sidebarPosition":6,"frontMatter":{"title":"Immutabilit\xe9 - `final` et copies d\xe9fensives","sidebar_position":6,"tags":["java","immutabilit\xe9","final","copies d\xe9fensives","s\xe9curit\xe9 des threads","programmation d\xe9fensive"]},"sidebar":"tutorialSidebar","previous":{"title":"\xc9galit\xe9 des Objets - equals() et hashCode()","permalink":"/dev/fr/docs/java/Core/OOP/object-equality"},"next":{"title":"Modificateurs d\'acc\xe8s et visibilit\xe9","permalink":"/dev/fr/docs/java/Core/OOP/access-modifiers-visibility"}}');var r=n(4848),i=n(8453);const a={title:"Immutabilit\xe9 - `final` et copies d\xe9fensives",sidebar_position:6,tags:["java","immutabilit\xe9","final","copies d\xe9fensives","s\xe9curit\xe9 des threads","programmation d\xe9fensive"]},o=void 0,l={},d=[{value:"Qu&#39;est-ce qu&#39;un objet immuable ?",id:"quest-ce-quun-objet-immuable-",level:3},{value:"Pourquoi l&#39;immutabilit\xe9 ? (Avantages)",id:"pourquoi-limmutabilit\xe9--avantages",level:3},{value:"Comment atteindre l&#39;immutabilit\xe9",id:"comment-atteindre-limmutabilit\xe9",level:3},{value:"Les copies d\xe9fensives expliqu\xe9es",id:"les-copies-d\xe9fensives-expliqu\xe9es",level:3},{value:"Consid\xe9rations et compromis",id:"consid\xe9rations-et-compromis",level:3}];function c(e){const t={code:"code",em:"em",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"L'immutabilit\xe9 est un concept fondamental en programmation orient\xe9e objet, particuli\xe8rement important en Java, qui d\xe9signe l'\xe9tat d'un objet restant inchang\xe9 apr\xe8s sa cr\xe9ation. Un objet immuable est un objet dont l'\xe9tat interne ne peut pas \xeatre modifi\xe9 une fois qu'il a \xe9t\xe9 enti\xe8rement construit."}),"\n",(0,r.jsx)(t.h3,{id:"quest-ce-quun-objet-immuable-",children:"Qu'est-ce qu'un objet immuable ?"}),"\n",(0,r.jsxs)(t.p,{children:["Un objet est consid\xe9r\xe9 comme immuable si son \xe9tat ne peut pas \xeatre modifi\xe9 apr\xe8s sa cr\xe9ation. Une fois construit, les valeurs de ses champs restent constantes pendant toute sa dur\xe9e de vie. Parmi les exemples de classes immuables dans la biblioth\xe8que standard de Java, on trouve ",(0,r.jsx)(t.code,{children:"String"}),", ",(0,r.jsx)(t.code,{children:"Integer"}),", ",(0,r.jsx)(t.code,{children:"Long"}),", ",(0,r.jsx)(t.code,{children:"Float"}),", ",(0,r.jsx)(t.code,{children:"Double"})," et ",(0,r.jsx)(t.code,{children:"BigDecimal"}),"."]}),"\n",(0,r.jsx)(t.h3,{id:"pourquoi-limmutabilit\xe9--avantages",children:"Pourquoi l'immutabilit\xe9 ? (Avantages)"}),"\n",(0,r.jsx)(t.p,{children:"L'immutabilit\xe9 offre des avantages significatifs dans le d\xe9veloppement logiciel :"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"S\xe9curit\xe9 des threads :"})," Les objets immuables sont intrins\xe8quement thread-safe (s\xfbrs pour les threads). \xc9tant donn\xe9 que leur \xe9tat ne peut pas changer, plusieurs threads peuvent y acc\xe9der simultan\xe9ment sans avoir besoin de m\xe9canismes de synchronisation (comme des verrous), ce qui \xe9limine les probl\xe8mes tels que les conditions de concurrence ou les interblocages. Cela simplifie consid\xe9rablement la programmation concurrente."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Simplicit\xe9 et pr\xe9visibilit\xe9 :"})," L'\xe9tat d'un objet immuable est fixe. Cela rend le code plus facile \xe0 raisonner, \xe0 comprendre et \xe0 d\xe9boguer, car vous n'avez pas \xe0 vous soucier des changements inattendus provenant d'autres parties du programme."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Partage plus s\xfbr :"})," Les objets immuables peuvent \xeatre librement partag\xe9s entre diff\xe9rentes parties d'une application sans craindre qu'une partie ne corrompe l'\xe9tat de l'objet pour une autre. Ceci est particuli\xe8rement utile dans les environnements multithreads."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Mise en cache et hachage :"})," Les objets immuables sont d'excellents candidats pour les cl\xe9s dans une ",(0,r.jsx)(t.code,{children:"HashMap"})," ou les \xe9l\xe9ments dans un ",(0,r.jsx)(t.code,{children:"HashSet"})," car leur code de hachage (s'il est calcul\xe9 correctement) reste constant. Ils peuvent \xe9galement \xeatre facilement mis en cache."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Effets secondaires r\xe9duits :"})," Les fonctions ou m\xe9thodes qui op\xe8rent sur des objets immuables ne peuvent pas produire d'effets secondaires sur ces objets. Cela conduit \xe0 un code plus pr\xe9visible et plus facile \xe0 tester."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"S\xe9curit\xe9 :"})," Les objets immuables peuvent \xeatre plus s\xfbrs en termes de s\xe9curit\xe9, car leur \xe9tat ne peut pas \xeatre alt\xe9r\xe9 apr\xe8s leur cr\xe9ation."]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"comment-atteindre-limmutabilit\xe9",children:"Comment atteindre l'immutabilit\xe9"}),"\n",(0,r.jsx)(t.p,{children:"Pour cr\xe9er une classe immuable en Java, vous devez suivre un ensemble de r\xe8gles strictes :"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsxs)(t.strong,{children:["D\xe9clarez la classe comme ",(0,r.jsx)(t.code,{children:"final"})," :"]})," Cela emp\xeache d'autres classes de l'\xe9tendre et potentiellement de surcharger des m\xe9thodes ou de modifier son \xe9tat de mani\xe8re mutable.","\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.em,{children:"Alternative :"})," Si vous souhaitez autoriser la sous-classing, vous pouvez rendre le constructeur ",(0,r.jsx)(t.code,{children:"private"})," et fournir des m\xe9thodes de fabrique statiques, ou simplement vous assurer que toutes les m\xe9thodes qui pourraient exposer un \xe9tat mutable sont g\xe9r\xe9es correctement (moins courant pour une v\xe9ritable immutabilit\xe9)."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsxs)(t.strong,{children:["D\xe9clarez tous les champs comme ",(0,r.jsx)(t.code,{children:"private"})," et ",(0,r.jsx)(t.code,{children:"final"})," :"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"private"})," : Garantit que les champs ne peuvent pas \xeatre directement acc\xe9d\xe9s ou modifi\xe9s depuis l'ext\xe9rieur de la classe."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"final"})," : Garantit que la valeur du champ (ou l'objet auquel il fait r\xe9f\xe9rence) n'est attribu\xe9e qu'une seule fois lors de la construction de l'objet et ne peut pas \xeatre r\xe9affect\xe9e ult\xe9rieurement."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsxs)(t.strong,{children:["Ne fournissez aucune m\xe9thode ",(0,r.jsx)(t.code,{children:"setter"})," (mutateur) :"]})," Il ne doit y avoir aucune m\xe9thode permettant la modification de l'\xe9tat de l'objet apr\xe8s sa construction."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Initialisez tous les champs via le constructeur :"})," Le constructeur doit enti\xe8rement initialiser tous les champs ",(0,r.jsx)(t.code,{children:"final"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"G\xe9rez attentivement les r\xe9f\xe9rences d'objets mutables (Copies d\xe9fensives) :"})," C'est la r\xe8gle la plus cruciale et souvent n\xe9glig\xe9e. Si votre classe immuable contient des champs qui sont des r\xe9f\xe9rences \xe0 des objets mutables (par exemple, ",(0,r.jsx)(t.code,{children:"Date"}),", ",(0,r.jsx)(t.code,{children:"ArrayList"}),", des objets mutables personnalis\xe9s), vous devez effectuer des ",(0,r.jsx)(t.strong,{children:"copies d\xe9fensives"}),".","\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Pour les arguments entrants dans le constructeur :"})," Cr\xe9ez une nouvelle copie de tout objet mutable pass\xe9 au constructeur. Ne stockez pas la r\xe9f\xe9rence directe \xe0 l'objet mutable externe. Cela emp\xeache le code externe de modifier l'\xe9tat de votre objet immuable apr\xe8s sa construction."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsxs)(t.strong,{children:["Pour les r\xe9f\xe9rences sortantes dans les m\xe9thodes ",(0,r.jsx)(t.code,{children:"getter"})," (accesseurs) :"]})," Retournez une nouvelle copie de tout objet mutable qui fait partie de l'\xe9tat de votre objet immuable. Ne retournez pas la r\xe9f\xe9rence directe \xe0 l'objet mutable interne. Cela emp\xeache le code externe d'obtenir une r\xe9f\xe9rence \xe0 votre \xe9tat interne et de le modifier."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"les-copies-d\xe9fensives-expliqu\xe9es",children:"Les copies d\xe9fensives expliqu\xe9es"}),"\n",(0,r.jsx)(t.p,{children:"Les copies d\xe9fensives sont essentielles pour pr\xe9venir les probl\xe8mes d'\"aliasing\" (d'alias) o\xf9 une r\xe9f\xe9rence \xe0 un objet mutable est partag\xe9e, permettant au code externe de modifier l'\xe9tat interne de votre objet pr\xe9tendument immuable."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Exemple (Violation vs. Respect des r\xe8gles) :"})}),"\n",(0,r.jsxs)(t.p,{children:["Supposons que nous voulions cr\xe9er une classe ",(0,r.jsx)(t.code,{children:"Period"})," immuable avec une ",(0,r.jsx)(t.code,{children:"startDate"})," et une ",(0,r.jsx)(t.code,{children:"endDate"}),"."]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Violation (Sans copies d\xe9fensives) :"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"import java.util.Date; // Date est une classe mutable\r\n\r\npublic final class MutablePeriod {\r\n    private final Date startDate;\r\n    private final Date endDate;\r\n\r\n    public MutablePeriod(Date startDate, Date endDate) {\r\n        this.startDate = startDate; // Stocke la r\xe9f\xe9rence directe\r\n        this.endDate = endDate;     // Stocke la r\xe9f\xe9rence directe\r\n    }\r\n\r\n    public Date getStartDate() {\r\n        return startDate; // Retourne la r\xe9f\xe9rence directe\r\n    }\r\n\r\n    public Date getEndDate() {\r\n        return endDate; // Retourne la r\xe9f\xe9rence directe\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return startDate + \" - \" + endDate;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Date start = new Date();\r\n        Date end = new Date();\r\n        MutablePeriod period = new MutablePeriod(start, end);\r\n\r\n        System.out.println(\"P\xe9riode originale : \" + period); // Affiche les dates\r\n\r\n        // Modification externe des objets Date originaux :\r\n        start.setYear(1900); // Modifie l'objet 'start'\r\n        end.setYear(2500);   // Modifie l'objet 'end'\r\n\r\n        System.out.println(\"P\xe9riode modifi\xe9e : \" + period); // L'\xe9tat interne de l'objet Period a chang\xe9 !\r\n                                                       // M\xeame s'il est 'final' et n'a pas de mutateurs.\r\n    }\r\n}\n"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Respect des r\xe8gles (Avec copies d\xe9fensives) :"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'import java.util.Date; // Date est une classe mutable\r\n\r\npublic final class ImmutablePeriod { // La classe est finale\r\n    private final Date startDate; // Les champs sont priv\xe9s et finaux\r\n    private final Date endDate;\r\n\r\n    public ImmutablePeriod(Date startDate, Date endDate) {\r\n        // Copie d\xe9fensive pour les arguments mutables entrants :\r\n        // Cr\xe9e de nouveaux objets Date pour stocker l\'\xe9tat interne,\r\n        // afin que les objets Date externes ne puissent pas modifier l\'\xe9tat de cet objet.\r\n        this.startDate = new Date(startDate.getTime());\r\n        this.endDate = new Date(endDate.getTime());\r\n\r\n        // Validation de base (optionnel mais bonne pratique pour un constructeur)\r\n        if (this.startDate.compareTo(this.endDate) > 0) {\r\n            throw new IllegalArgumentException(startDate + " apr\xe8s " + endDate);\r\n        }\r\n    }\r\n\r\n    public Date getStartDate() {\r\n        // Copie d\xe9fensive pour les r\xe9f\xe9rences mutables sortantes :\r\n        // Retourne un nouvel objet Date, pas celui interne,\r\n        // afin que le code externe ne puisse pas modifier l\'\xe9tat de cet objet.\r\n        return new Date(startDate.getTime());\r\n    }\r\n\r\n    public Date getEndDate() {\r\n        // Copie d\xe9fensive pour les r\xe9f\xe9rences mutables sortantes :\r\n        return new Date(endDate.getTime());\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return startDate + " - " + endDate;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Date start = new Date();\r\n        Date end = new Date();\r\n        ImmutablePeriod period = new ImmutablePeriod(start, end);\r\n\r\n        System.out.println("P\xe9riode originale : " + period);\r\n\r\n        // Tentative de modification externe des objets Date originaux :\r\n        start.setYear(1900);\r\n        end.setYear(2500);\r\n\r\n        System.out.println("Tentative de modification : " + period); // L\'objet Period reste inchang\xe9 !\r\n\r\n        // Tentative de modification externe via un accesseur :\r\n        period.getStartDate().setYear(1950);\r\n        period.getEndDate().setYear(2050);\r\n\r\n        System.out.println("Tentative de modification via un accesseur : " + period); // L\'objet Period reste inchang\xe9 !\r\n    }\r\n}\n'})}),"\n",(0,r.jsx)(t.h3,{id:"consid\xe9rations-et-compromis",children:"Consid\xe9rations et compromis"}),"\n",(0,r.jsx)(t.p,{children:"Bien que l'immutabilit\xe9 offre de nombreux avantages, ce n'est pas toujours le meilleur choix :"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Surcharge de performance :"})," Cr\xe9er un nouvel objet pour chaque modification (par exemple, dans une boucle o\xf9 une ",(0,r.jsx)(t.code,{children:"String"})," est concat\xe9n\xe9e \xe0 plusieurs reprises) peut entra\xeener une activit\xe9 accrue de la collecte des d\xe9chets et une surcharge de performance par rapport \xe0 la modification d'un objet mutable sur place. Pour de tels sc\xe9narios, des alternatives mutables (comme ",(0,r.jsx)(t.code,{children:"StringBuilder"}),") sont souvent pr\xe9f\xe9r\xe9es."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Augmentation de la cr\xe9ation d'objets :"})," Dans les sc\xe9narios avec des changements d'\xe9tat fr\xe9quents, l'immutabilit\xe9 peut entra\xeener une prolif\xe9ration d'objets, augmentant potentiellement la consommation de m\xe9moire et la pression sur le ramasse-miettes."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Verbosit\xe9 :"})," Parfois, l'impl\xe9mentation stricte de l'immutabilit\xe9 peut impliquer plus de code passe-partout (boilerplate), surtout avec des objets complexes contenant de nombreux champs mutables imbriqu\xe9s."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Malgr\xe9 ces compromis, les avantages de l'immutabilit\xe9, en particulier dans les syst\xe8mes concurrents et complexes, l'emportent souvent sur les co\xfbts. C'est un principe puissant pour construire des logiciels robustes et fiables."})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var s=n(6540);const r={},i=s.createContext(r);function a(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);