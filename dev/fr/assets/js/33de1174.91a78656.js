"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[5295],{7863:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"Python/Chatbot/chat-with-different-ai-api","title":"Structure de Chat IA Extensible","description":"Pour une application de chat extensible o\xf9 les utilisateurs peuvent choisir diff\xe9rents mod\xe8les d\'IA (par exemple, Gemini, OpenAI et d\'autres \xe0 l\'avenir), une approche structur\xe9e utilisant les Classes de Base Abstraites (CBA) et le Patron de Fabrique est tr\xe8s efficace. Cela permet de d\xe9finir une interface commune pour tous les fournisseurs d\'IA et d\'en int\xe9grer facilement de nouveaux sans modifier la logique principale existante.","source":"@site/i18n/fr/docusaurus-plugin-content-docs/current/Python/Chatbot/chat-with-different-ai-api.md","sourceDirName":"Python/Chatbot","slug":"/Python/Chatbot/chat-with-different-ai-api","permalink":"/dev/fr/docs/Python/Chatbot/chat-with-different-ai-api","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"python","permalink":"/dev/fr/docs/tags/python"},{"inline":true,"label":"ai","permalink":"/dev/fr/docs/tags/ai"},{"inline":true,"label":"api-integration","permalink":"/dev/fr/docs/tags/api-integration"},{"inline":true,"label":"design-patterns","permalink":"/dev/fr/docs/tags/design-patterns"},{"inline":true,"label":"extensibility","permalink":"/dev/fr/docs/tags/extensibility"}],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Structure de Chat IA Extensible","sidebar_position":1,"tags":["python","ai","api-integration","design-patterns","extensibility"]},"sidebar":"tutorialSidebar","previous":{"title":"Conventions de nommage","permalink":"/dev/fr/docs/Python/python-naming-convention"},"next":{"title":"Sessions de discussion IA","permalink":"/dev/fr/docs/Python/Gemini/Api/chat-api"}}');var s=n(4848),t=n(8453);const o={title:"Structure de Chat IA Extensible",sidebar_position:1,tags:["python","ai","api-integration","design-patterns","extensibility"]},a=void 0,l={},d=[{value:"Concepts Cl\xe9s",id:"concepts-cl\xe9s",level:3},{value:"Structure du Code",id:"structure-du-code",level:3},{value:"<code>config.py</code>",id:"configpy",level:3},{value:"<code>ai_providers/abstract_ai_provider.py</code>",id:"ai_providersabstract_ai_providerpy",level:3},{value:"<code>ai_providers/openai_provider.py</code>",id:"ai_providersopenai_providerpy",level:3},{value:"<code>ai_providers/gemini_provider.py</code>",id:"ai_providersgemini_providerpy",level:3},{value:"<code>ai_factory.py</code>",id:"ai_factorypy",level:3},{value:"<code>main.py</code>",id:"mainpy",level:3},{value:"Comment Ajouter une Nouvelle API d&#39;IA (par exemple, <code>ExampleAIProvider</code>)",id:"comment-ajouter-une-nouvelle-api-dia-par-exemple-exampleaiprovider",level:3}];function p(e){const r={code:"code",em:"em",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.p,{children:["Pour une application de chat extensible o\xf9 les utilisateurs peuvent choisir diff\xe9rents mod\xe8les d'IA (par exemple, Gemini, OpenAI et d'autres \xe0 l'avenir), une approche structur\xe9e utilisant les ",(0,s.jsx)(r.strong,{children:"Classes de Base Abstraites (CBA)"})," et le ",(0,s.jsx)(r.strong,{children:"Patron de Fabrique"})," est tr\xe8s efficace. Cela permet de d\xe9finir une interface commune pour tous les fournisseurs d'IA et d'en int\xe9grer facilement de nouveaux sans modifier la logique principale existante."]}),"\n",(0,s.jsx)(r.h3,{id:"concepts-cl\xe9s",children:"Concepts Cl\xe9s"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Classe de Base Abstraite (CBA)"})," : D\xe9finit les m\xe9thodes communes que tous les fournisseurs d'IA doivent impl\xe9menter. Cela assure une interface coh\xe9rente."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Impl\xe9mentations Concr\xe8tes"})," : Classes pour chaque fournisseur d'IA sp\xe9cifique (par exemple, ",(0,s.jsx)(r.code,{children:"GeminiAIProvider"}),", ",(0,s.jsx)(r.code,{children:"OpenAIAIProvider"}),") qui h\xe9ritent de la CBA et impl\xe9mentent ses m\xe9thodes."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Patron de Fabrique"}),' : Un m\xe9canisme pour cr\xe9er des instances des fournisseurs d\'IA bas\xe9es sur un type donn\xe9 (par exemple, "gemini", "openai") sans exposer la logique de cr\xe9ation au client. Cela d\xe9couple le client des classes de fournisseurs concr\xe8tes.']}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Gestion de la Configuration"})," : Gestion centralis\xe9e des cl\xe9s API et des noms de mod\xe8les par d\xe9faut, id\xe9alement charg\xe9s \xe0 partir de variables d'environnement pour la s\xe9curit\xe9."]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"structure-du-code",children:"Structure du Code"}),"\n",(0,s.jsx)(r.p,{children:"Voici la structure de fichiers et le contenu recommand\xe9s :"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"project_root/\r\n\u251c\u2500\u2500 config.py\r\n\u251c\u2500\u2500 ai_providers/\r\n\u2502   \u251c\u2500\u2500 __init__.py\r\n\u2502   \u251c\u2500\u2500 abstract_ai_provider.py\r\n\u2502   \u251c\u2500\u2500 gemini_provider.py\r\n\u2502   \u2514\u2500\u2500 openai_provider.py\r\n\u251c\u2500\u2500 ai_factory.py\r\n\u2514\u2500\u2500 main.py\n"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"configpy",children:(0,s.jsx)(r.code,{children:"config.py"})}),"\n",(0,s.jsx)(r.p,{children:"Ce fichier g\xe8re le chargement de la configuration, en particulier des cl\xe9s API sensibles, de pr\xe9f\xe9rence \xe0 partir des variables d'environnement."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:'import os\r\n\r\nclass Config:\r\n    """G\xe8re la configuration de l\'application, y compris les cl\xe9s API et les valeurs par d\xe9faut des mod\xe8les."""\r\n\r\n    # Configuration OpenAI\r\n    OPENAI_API_KEY: str = os.getenv("OPENAI_API_KEY", "your_openai_api_key_here")\r\n    OPENAI_DEFAULT_MODEL: str = "gpt-3.5-turbo" # Ou "gpt-4"\r\n\r\n    # Configuration Gemini\r\n    GEMINI_API_KEY: str = os.getenv("GEMINI_API_KEY", "your_gemini_api_key_here")\r\n    GEMINI_DEFAULT_MODEL: str = "gemini-pro"\r\n\r\n    # Ajoutez ici la configuration pour d\'autres fournisseurs d\'IA\r\n    # EXAMPLE_API_KEY: str = os.getenv("EXAMPLE_API_KEY", "your_example_api_key_here")\r\n    # EXAMPLE_DEFAULT_MODEL: str = "example-model"\r\n\r\n# Exemple de configuration des variables d\'environnement (par exemple, dans votre shell ou un fichier .env)\r\n# export OPENAI_API_KEY="sk-..."\r\n# export GEMINI_API_KEY="AIza..."\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"ai_providersabstract_ai_providerpy",children:(0,s.jsx)(r.code,{children:"ai_providers/abstract_ai_provider.py"})}),"\n",(0,s.jsx)(r.p,{children:"D\xe9finit l'interface commune pour tous les fournisseurs d'IA."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:'from abc import ABC, abstractmethod\r\nfrom typing import List, Dict\r\n\r\nclass AbstractAIProvider(ABC):\r\n    """Classe de Base Abstraite pour tous les fournisseurs de chat IA."""\r\n\r\n    def __init__(self, api_key: str, model_name: str):\r\n        self._api_key = api_key\r\n        self._model_name = model_name\r\n\r\n    @abstractmethod\r\n    def generate_response(self, messages: List[Dict]) -> str:\r\n        """\r\n        G\xe9n\xe8re une r\xe9ponse du mod\xe8le d\'IA bas\xe9e sur les messages fournis.\r\n\r\n        Arguments :\r\n            messages: Une liste de dictionnaires de messages, typiquement au format\r\n                      `[{"role": "user", "content": "Hello!"}, {"role": "assistant", "content": "Hi!"}]`.\r\n                      Le format exact peut varier l\xe9g\xe8rement selon le fournisseur, donc les impl\xe9mentations concr\xe8tes\r\n                      doivent g\xe9rer la conversion si n\xe9cessaire.\r\n\r\n        Retourne :\r\n            La r\xe9ponse de l\'IA sous forme de cha\xeene de caract\xe8res.\r\n        """\r\n        pass\r\n\r\n    @abstractmethod\r\n    def get_model_name(self) -> str:\r\n        """Retourne le nom du mod\xe8le d\'IA utilis\xe9."""\r\n        pass\r\n\r\n    # Ajoutez d\'autres m\xe9thodes communes si n\xe9cessaire, par exemple, get_token_count, get_available_models\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"ai_providersopenai_providerpy",children:(0,s.jsx)(r.code,{children:"ai_providers/openai_provider.py"})}),"\n",(0,s.jsxs)(r.p,{children:["Impl\xe9mente ",(0,s.jsx)(r.code,{children:"AbstractAIProvider"})," pour l'API d'OpenAI.\r\n",(0,s.jsxs)(r.em,{children:["(Installez ",(0,s.jsx)(r.code,{children:"openai"})," avec ",(0,s.jsx)(r.code,{children:"pip install openai"}),")"]})]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:'from openai import OpenAI\r\nfrom typing import List, Dict\r\nfrom .abstract_ai_provider import AbstractAIProvider\r\n\r\nclass OpenAIAIProvider(AbstractAIProvider):\r\n    """Impl\xe9mentation concr\xe8te pour les mod\xe8les de chat OpenAI."""\r\n\r\n    def __init__(self, api_key: str, model_name: str):\r\n        super().__init__(api_key, model_name)\r\n        self._client = OpenAI(api_key=self._api_key)\r\n\r\n    def generate_response(self, messages: List[Dict]) -> str:\r\n        """\r\n        G\xe9n\xe8re une r\xe9ponse en utilisant l\'API de compl\xe9tion de chat d\'OpenAI.\r\n        Le format des \'messages\' est directement compatible avec l\'API d\'OpenAI.\r\n        """\r\n        try:\r\n            chat_completion = self._client.chat.completions.create(\r\n                model=self._model_name,\r\n                messages=messages,\r\n                temperature=0.7, # Param\xe8tre d\'exemple\r\n            )\r\n            return chat_completion.choices[0].message.content\r\n        except Exception as e:\r\n            print(f"Erreur lors de l\'appel \xe0 l\'API OpenAI : {e}")\r\n            return "D\xe9sol\xe9, je n\'ai pas pu obtenir de r\xe9ponse d\'OpenAI."\r\n\r\n    def get_model_name(self) -> str:\r\n        return self._model_name\r\n\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"ai_providersgemini_providerpy",children:(0,s.jsx)(r.code,{children:"ai_providers/gemini_provider.py"})}),"\n",(0,s.jsxs)(r.p,{children:["Impl\xe9mente ",(0,s.jsx)(r.code,{children:"AbstractAIProvider"})," pour l'API de Google Gemini.\r\n",(0,s.jsxs)(r.em,{children:["(Installez ",(0,s.jsx)(r.code,{children:"google-generativeai"})," avec ",(0,s.jsx)(r.code,{children:"pip install google-generativeai"}),")"]})]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:'import google.generativeai as genai\r\nfrom typing import List, Dict\r\nfrom .abstract_ai_provider import AbstractAIProvider\r\n\r\nclass GeminiAIProvider(AbstractAIProvider):\r\n    """Impl\xe9mentation concr\xe8te pour les mod\xe8les de chat Google Gemini."""\r\n\r\n    def __init__(self, api_key: str, model_name: str):\r\n        super().__init__(api_key, model_name)\r\n        genai.configure(api_key=self._api_key)\r\n        self._model = genai.GenerativeModel(self._model_name)\r\n\r\n    def generate_response(self, messages: List[Dict]) -> str:\r\n        """\r\n        G\xe9n\xe8re une r\xe9ponse en utilisant l\'API de chat de Google Gemini.\r\n        Note : La m\xe9thode `start_chat` de Gemini attend des messages dans un format l\xe9g\xe8rement diff\xe9rent\r\n        (par exemple, pas de \'r\xf4le\' pour l\'utilisateur/mod\xe8le dans l\'historique apr\xe8s le prompt initial).\r\n        Cet exemple simplifie pour plus de clart\xe9, en supposant un nouveau chat par appel ou\r\n        une fonction de conversion. Pour un chat continu appropri\xe9, vous g\xe9reriez une `chat_session`.\r\n        """\r\n        try:\r\n            # Par souci de simplicit\xe9, conversion des messages de type OpenAI au format de Gemini\r\n            # pour un seul tour. Pour les conversations \xe0 plusieurs tours, vous g\xe9reriez une session de chat.\r\n            gemini_messages = []\r\n            for msg in messages:\r\n                role_map = {"user": "user", "assistant": "model"}\r\n                gemini_messages.append({"role": role_map.get(msg["role"], "user"), "parts": [msg["content"]]})\r\n\r\n            # Pour une seule requ\xeate, le dernier message est le prompt.\r\n            # Pour un chat continu, utilisez `start_chat` et `send_message`.\r\n            response = self._model.generate_content(gemini_messages[-1]["parts"][0]) # Prend le dernier message de l\'utilisateur\r\n            return response.text\r\n        except Exception as e:\r\n            print(f"Erreur lors de l\'appel \xe0 l\'API Gemini : {e}")\r\n            return "D\xe9sol\xe9, je n\'ai pas pu obtenir de r\xe9ponse de Gemini."\r\n\r\n    def get_model_name(self) -> str:\r\n        return self._model_name\r\n\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"ai_factorypy",children:(0,s.jsx)(r.code,{children:"ai_factory.py"})}),"\n",(0,s.jsx)(r.p,{children:"La fabrique qui fournit des instances de fournisseurs d'IA bas\xe9es sur un identifiant de cha\xeene de caract\xe8res."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:'from typing import Type\r\nfrom ai_providers.abstract_ai_provider import AbstractAIProvider\r\nfrom ai_providers.openai_provider import OpenAIAIProvider\r\nfrom ai_providers.gemini_provider import GeminiAIProvider\r\nfrom config import Config\r\n\r\nclass AIProviderFactory:\r\n    """Fabrique pour la cr\xe9ation d\'instances de fournisseurs d\'IA."""\r\n\r\n    _providers: dict[str, Type[AbstractAIProvider]] = {\r\n        "openai": OpenAIAIProvider,\r\n        "gemini": GeminiAIProvider,\r\n        # Ajoutez de nouveaux fournisseurs d\'IA ici\r\n        # "example_ai": ExampleAIProvider,\r\n    }\r\n\r\n    @staticmethod\r\n    def get_provider(provider_name: str) -> AbstractAIProvider:\r\n        """\r\n        Retourne une instance du fournisseur d\'IA sp\xe9cifi\xe9.\r\n\r\n        Arguments :\r\n            provider_name: Le nom du fournisseur d\'IA (par exemple, "openai", "gemini").\r\n\r\n        Retourne :\r\n            Une instance d\'AbstractAIProvider.\r\n\r\n        L\xe8ve :\r\n            ValueError: Si le nom du fournisseur n\'est pas reconnu.\r\n        """\r\n        provider_class = AIProviderFactory._providers.get(provider_name.lower())\r\n\r\n        if not provider_class:\r\n            raise ValueError(f"Fournisseur d\'IA inconnu : {provider_name}. Fournisseurs disponibles : {list(AIProviderFactory._providers.keys())}")\r\n\r\n        # R\xe9cup\xe8re la cl\xe9 API et le nom du mod\xe8le de la configuration en fonction de `provider_name`\r\n        api_key = getattr(Config, f"{provider_name.upper()}_API_KEY")\r\n        model_name = getattr(Config, f"{provider_name.upper()}_DEFAULT_MODEL")\r\n\r\n        return provider_class(api_key=api_key, model_name=model_name)\r\n\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"mainpy",children:(0,s.jsx)(r.code,{children:"main.py"})}),"\n",(0,s.jsx)(r.p,{children:"La logique principale de l'application, d\xe9montrant comment utiliser la fabrique pour interagir avec diff\xe9rents mod\xe8les d'IA."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:'from ai_factory import AIProviderFactory\r\nfrom typing import List, Dict\r\n\r\ndef chat_interface():\r\n    """Interface de chat en ligne de commande simple."""\r\n    print("Bienvenue dans le Chatbot Multi-IA !")\r\n    print("Choisissez votre fournisseur d\'IA (par exemple, openai, gemini) :")\r\n\r\n    provider_choice = input("> ").strip().lower()\r\n\r\n    try:\r\n        ai_provider = AIProviderFactory.get_provider(provider_choice)\r\n        print(f"Utilisation de {ai_provider.get_model_name()} via le fournisseur {provider_choice}.")\r\n    except ValueError as e:\r\n        print(e)\r\n        return\r\n\r\n    messages: List[Dict] = []\r\n\r\n    print("\\nCommencez \xe0 chatter ! Tapez \'quit\' ou \'exit\' pour terminer.")\r\n    while True:\r\n        user_input = input("Vous : ").strip()\r\n\r\n        if user_input.lower() in ["quit", "exit"]:\r\n            print("Au revoir !")\r\n            break\r\n\r\n        messages.append({"role": "user", "content": user_input})\r\n\r\n        print(f"IA ({ai_provider.get_model_name()}) : R\xe9flexion en cours...", end="\\r")\r\n        ai_response = ai_provider.generate_response(messages)\r\n        print(f"IA ({ai_provider.get_model_name()}) : {ai_response}")\r\n\r\n        messages.append({"role": "assistant", "content": ai_response})\r\n\r\n        # Gardez la liste des messages courte \xe0 des fins de d\xe9monstration, ou impl\xe9mentez une gestion de l\'historique\r\n        if len(messages) > 10:\r\n            messages = messages[-8:] # Garde les 4 derni\xe8res tours (utilisateur + assistant)\r\n\r\nif __name__ == "__main__":\r\n    # D\xe9finissez les variables d\'environnement pour les cl\xe9s API avant l\'ex\xe9cution, par exemple :\r\n    # export OPENAI_API_KEY="sk-..."\r\n    # export GEMINI_API_KEY="AIza..."\r\n    #\r\n    # Ou modifiez config.py directement pour les tests (non recommand\xe9 pour la production)\r\n\r\n    chat_interface()\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsxs)(r.h3,{id:"comment-ajouter-une-nouvelle-api-dia-par-exemple-exampleaiprovider",children:["Comment Ajouter une Nouvelle API d'IA (par exemple, ",(0,s.jsx)(r.code,{children:"ExampleAIProvider"}),")"]}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Installer le SDK"})," : Installez le SDK Python pour votre nouvelle IA (par exemple, ",(0,s.jsx)(r.code,{children:"pip install example_sdk"}),")."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsxs)(r.strong,{children:["Mettre \xe0 jour ",(0,s.jsx)(r.code,{children:"config.py"})]})," : Ajoutez les configurations de la cl\xe9 API et du nom du mod\xe8le."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:'# config.py\r\nclass Config:\r\n    # ... configuration existante\r\n    EXAMPLE_API_KEY: str = os.getenv("EXAMPLE_API_KEY", "your_example_api_key_here")\r\n    EXAMPLE_DEFAULT_MODEL: str = "example-model-v1"\n'})}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsxs)(r.strong,{children:["Cr\xe9er ",(0,s.jsx)(r.code,{children:"ai_providers/example_ai_provider.py"})]})," :"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["Cr\xe9ez un nouveau fichier ",(0,s.jsx)(r.code,{children:"example_ai_provider.py"})," dans le r\xe9pertoire ",(0,s.jsx)(r.code,{children:"ai_providers"}),"."]}),"\n",(0,s.jsxs)(r.li,{children:["Importez ",(0,s.jsx)(r.code,{children:"AbstractAIProvider"}),"."]}),"\n",(0,s.jsxs)(r.li,{children:["Cr\xe9ez une classe ",(0,s.jsx)(r.code,{children:"ExampleAIProvider"})," qui h\xe9rite de ",(0,s.jsx)(r.code,{children:"AbstractAIProvider"}),"."]}),"\n",(0,s.jsxs)(r.li,{children:["Impl\xe9mentez les m\xe9thodes ",(0,s.jsx)(r.code,{children:"__init__"})," et ",(0,s.jsx)(r.code,{children:"generate_response"})," conform\xe9ment au SDK de la nouvelle API. N'oubliez pas de convertir les messages au format attendu par l'API si n\xe9cessaire."]}),"\n",(0,s.jsxs)(r.li,{children:["Impl\xe9mentez ",(0,s.jsx)(r.code,{children:"get_model_name"}),"."]}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:'# ai_providers/example_ai_provider.py\r\n# from example_sdk import ExampleClient # Import SDK hypoth\xe9tique\r\nfrom typing import List, Dict\r\nfrom .abstract_ai_provider import AbstractAIProvider\r\n\r\nclass ExampleAIProvider(AbstractAIProvider):\r\n    def __init__(self, api_key: str, model_name: str):\r\n        super().__init__(api_key, model_name)\r\n        # self._client = ExampleClient(api_key=self._api_key) # Initialise le client SDK\r\n\r\n    def generate_response(self, messages: List[Dict]) -> str:\r\n        # Convertit les messages au format attendu par le SDK d\'ExampleAIProvider\r\n        # Par souci de simplicit\xe9, supposons qu\'il prenne le dernier message utilisateur sous forme de cha\xeene de caract\xe8res\r\n        last_user_message = next((m["content"] for m in reversed(messages) if m["role"] == "user"), "")\r\n        if not last_user_message:\r\n            return "Aucun message utilisateur fourni."\r\n\r\n        try:\r\n            # response = self._client.generate(model=self._model_name, prompt=last_user_message)\r\n            # return response.text # Ou ce que le SDK renvoie\r\n            return f"R\xe9ponse d\'ExampleAI utilisant le mod\xe8le \'{self._model_name}\' : {last_user_message.upper()} (simul\xe9)"\r\n        except Exception as e:\r\n            print(f"Erreur lors de l\'appel \xe0 l\'API ExampleAI : {e}")\r\n            return "D\xe9sol\xe9, je n\'ai pas pu obtenir de r\xe9ponse d\'ExampleAI."\r\n\r\n    def get_model_name(self) -> str:\r\n        return self._model_name\n'})}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsxs)(r.strong,{children:["Mettre \xe0 jour ",(0,s.jsx)(r.code,{children:"ai_factory.py"})]})," :"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Importez votre nouvelle classe de fournisseur."}),"\n",(0,s.jsxs)(r.li,{children:["Ajoutez-la au dictionnaire ",(0,s.jsx)(r.code,{children:"_providers"}),"."]}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:'# ai_factory.py\r\n# ... importations existantes\r\nfrom ai_providers.example_ai_provider import ExampleAIProvider # Nouvelle importation\r\n\r\nclass AIProviderFactory:\r\n    _providers: dict[str, Type[AbstractAIProvider]] = {\r\n        "openai": OpenAIAIProvider,\r\n        "gemini": GeminiAIProvider,\r\n        "example_ai": ExampleAIProvider, # Ajouter le nouveau fournisseur ici\r\n    }\r\n    # ... reste de la classe\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:["Maintenant, lorsque vous ex\xe9cutez ",(0,s.jsx)(r.code,{children:"main.py"}),", vous pouvez taper ",(0,s.jsx)(r.code,{children:"example_ai"})," comme choix, et le syst\xe8me instanciera et utilisera votre nouveau fournisseur d'IA sans aucune modification de ",(0,s.jsx)(r.code,{children:"main.py"})," lui-m\xeame."]})]})}function c(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>a});var i=n(6540);const s={},t=i.createContext(s);function o(e){const r=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(t.Provider,{value:r},e.children)}}}]);