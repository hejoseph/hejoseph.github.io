"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[6778],{7875:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var s=r(8734),i=r(4848),t=r(8453);const a={slug:"c-gestion-memoire-risques-dangers-caches",title:"Les dangers cach\xe9s du C - D\xe9cortiquer les risques li\xe9s \xe0 la gestion de la m\xe9moire",authors:["joseph"],tags:["C","memory-management","security","programming","buffer-overflow","use-after-free","software-engineering","cybersecurity"]},o=void 0,l={authorsImageUrls:[void 0]},u=[{value:"Les p\xe9rils du C : Risques courants li\xe9s \xe0 la gestion de la m\xe9moire",id:"les-p\xe9rils-du-c--risques-courants-li\xe9s-\xe0-la-gestion-de-la-m\xe9moire",level:3},{value:"Conclusion : La nature impr\xe9visible du comportement ind\xe9fini",id:"conclusion--la-nature-impr\xe9visible-du-comportement-ind\xe9fini",level:3}];function d(e){const n={code:"code",em:"em",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Le langage de programmation C. Il est souvent salu\xe9 comme la \xab m\xe8re de presque tous les langages modernes \xbb, formant la pierre angulaire de tout, des syst\xe8mes d'exploitation et compilateurs aux moteurs de jeu et outils de chiffrement. Sa puissance et son contr\xf4le de bas niveau sont in\xe9gal\xe9s, le rendant indispensable pour les infrastructures critiques. Pourtant, cette m\xeame puissance s'accompagne d'une responsabilit\xe9 exigeante : la gestion manuelle de la m\xe9moire."}),"\n",(0,i.jsxs)(n.p,{children:["\xc0 la diff\xe9rence des langages dot\xe9s d'un ramasse-miettes automatique, le C oblige les d\xe9veloppeurs \xe0 \xab grandir et \xe0 g\xe9rer la m\xe9moire par eux-m\xeames \xbb. Cela signifie allouer de la m\xe9moire avec ",(0,i.jsx)(n.code,{children:"malloc"})," et la lib\xe9rer scrupuleusement avec ",(0,i.jsx)(n.code,{children:"free"})," une fois qu'elle n'est plus n\xe9cessaire. Ce contrat apparemment simple entre ",(0,i.jsx)(n.code,{children:"malloc"})," et ",(0,i.jsx)(n.code,{children:"free"})," cache un champ de mines de pi\xe8ges potentiels. Une mauvaise gestion de cette responsabilit\xe9 peut entra\xeener des vuln\xe9rabilit\xe9s de s\xe9curit\xe9 catastrophiques et une instabilit\xe9 du syst\xe8me, se manifestant souvent par un \xab comportement ind\xe9fini \xbb \u2013 un cauchemar pour les programmeurs, o\xf9 tout peut arriver, d'un dysfonctionnement mineur \xe0 une compromission compl\xe8te du syst\xe8me."]}),"\n",(0,i.jsx)(n.p,{children:"Examinons quelques-unes des erreurs de gestion de la m\xe9moire les plus courantes et les plus dangereuses en C, illustr\xe9es par des incidents historiques tristement c\xe9l\xe8bres."}),"\n",(0,i.jsx)(n.h3,{id:"les-p\xe9rils-du-c--risques-courants-li\xe9s-\xe0-la-gestion-de-la-m\xe9moire",children:"Les p\xe9rils du C : Risques courants li\xe9s \xe0 la gestion de la m\xe9moire"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"1. Les d\xe9bordements de tampon (Buffer Overflows) : Quand les donn\xe9es d\xe9bordent"})}),"\n",(0,i.jsx)(n.p,{children:"Un d\xe9bordement de tampon se produit lorsqu'un programme tente d'\xe9crire plus de donn\xe9es dans un tampon de taille fixe qu'il n'a \xe9t\xe9 allou\xe9 pour en contenir. Le C, de par sa conception, n'effectue pas de v\xe9rification automatique des limites. Cette absence de filet de s\xe9curit\xe9 signifie que si vous \xe9crivez au-del\xe0 de la fin d'un tableau ou d'un tampon, vous pouvez \xe9craser des donn\xe9es adjacentes en m\xe9moire, y compris des instructions de programme critiques ou des adresses de retour sur la pile."}),"\n",(0,i.jsxs)(n.p,{children:["Les cons\xe9quences sont graves : comportement ind\xe9fini, plantages du programme ou, le plus dangereusement, ex\xe9cution de code arbitraire. Un exemple classique est le ",(0,i.jsx)(n.strong,{children:"ver Morris de 1988"}),". Ce fl\xe9au des d\xe9buts d'Internet exploita des d\xe9bordements de tampon dans des utilitaires UNIX courants comme ",(0,i.jsx)(n.code,{children:"Fingered"})," et ",(0,i.jsx)(n.code,{children:"Sendmail"})," pour injecter du code malveillant, infectant environ 10 % d'Internet \xe0 l'\xe9poque. Une simple v\xe9rification conditionnelle de la taille de l'entr\xe9e aurait pu \xe9viter ce chaos g\xe9n\xe9ralis\xe9."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"2. Heartbleed : Une le\xe7on sur les v\xe9rifications de longueur manquantes"})}),"\n",(0,i.jsxs)(n.p,{children:["Bien qu'il s'agisse d'un type sp\xe9cifique de d\xe9bordement de tampon, la ",(0,i.jsx)(n.strong,{children:"vuln\xe9rabilit\xe9 Heartbleed (2014)"})," dans l'extension ",(0,i.jsx)(n.code,{children:"heartbeat"})," d'OpenSSL illustre parfaitement le danger des validations de longueur manquantes. Le serveur \xe9tait con\xe7u pour renvoyer un message de \xab battement de c\u0153ur \xbb d'un client. Le client d\xe9clarait une certaine longueur de message, puis envoyait les donn\xe9es. La faille ? Le code du serveur ne v\xe9rifiait pas si la longueur ",(0,i.jsx)(n.em,{children:"r\xe9elle"})," du message re\xe7u correspondait \xe0 la longueur ",(0,i.jsx)(n.em,{children:"d\xe9clar\xe9e"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Les attaquants pouvaient envoyer un message minuscule (par exemple, \xab hello \xbb) mais le d\xe9clarer d'une longueur de 64 000 octets. Le serveur, faisant confiance \xe0 la longueur d\xe9clar\xe9e, lisait et renvoyait alors 64 000 octets de sa propre m\xe9moire, y compris le message \xab hello \xbb ",(0,i.jsx)(n.em,{children:"plus"})," 63 995 octets suppl\xe9mentaires de tout ce qui se trouvait imm\xe9diatement apr\xe8s le message en m\xe9moire. Cela a permis aux attaquants de divulguer passivement des donn\xe9es sensibles comme des cl\xe9s de chiffrement priv\xe9es, des noms d'utilisateur et des mots de passe, affectant de vastes pans d'Internet."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:'3. Le "Use-After-Free" : Acc\xe9der \xe0 une m\xe9moire fant\xf4me'})}),"\n",(0,i.jsxs)(n.p,{children:["Cette vuln\xe9rabilit\xe9 appara\xeet lorsqu'un programme tente d'acc\xe9der \xe0 un bloc de m\xe9moire ",(0,i.jsx)(n.em,{children:"apr\xe8s"})," qu'il a \xe9t\xe9 lib\xe9r\xe9 \xe0 l'aide de ",(0,i.jsx)(n.code,{children:"free()"}),". Une fois la m\xe9moire lib\xe9r\xe9e, le syst\xe8me d'exploitation peut la r\xe9allouer \xe0 d'autres fins. Si un pointeur pointe toujours vers cette m\xe9moire maintenant lib\xe9r\xe9e (et potentiellement r\xe9allou\xe9e), y acc\xe9der peut entra\xeener :"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Plantages :"})," Si la m\xe9moire a \xe9t\xe9 r\xe9allou\xe9e et son contenu modifi\xe9, y acc\xe9der peut faire planter le programme."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Corruption des donn\xe9es :"})," \xc9crire dans une m\xe9moire r\xe9allou\xe9e peut corrompre d'autres parties du programme, voire d'autres programmes."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ex\xe9cution de code arbitraire :"}),' Un attaquant peut intentionnellement d\xe9clencher un "use-after-free", faire en sorte que la m\xe9moire soit r\xe9allou\xe9e avec des donn\xe9es malveillantes, puis exploiter l\'ancien pointeur pour ex\xe9cuter son propre code.']}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["La ",(0,i.jsx)(n.strong,{children:"vuln\xe9rabilit\xe9 d'Internet Explorer 8 (2013)"}),' en a fait la d\xe9monstration. Elle impliquait que JavaScript supprimait des \xe9l\xe9ments HTML, mais un pointeur vers l\'objet lib\xe9r\xe9 persistait. Un attaquant pouvait alors cr\xe9er une page web malveillante qui d\xe9clencherait le "use-after-free", menant \xe0 la compromission du syst\xe8me par la simple visite du site.']}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"4. Les erreurs de d\xe9calage (Off-By-One Errors) : La petite erreur de calcul \xe0 fort impact"})}),"\n",(0,i.jsxs)(n.p,{children:["Les erreurs de d\xe9calage sont des erreurs subtiles de calcul, impliquant souvent les limites de boucle ou l'indexation de tableau. En C, une manifestation courante est d'oublier de tenir compte du caract\xe8re de fin de cha\xeene (",(0,i.jsx)(n.code,{children:"\\0"}),") lors de l'allocation d'espace pour les cha\xeenes. Par exemple, si vous devez stocker une cha\xeene de 10 caract\xe8res, vous avez en fait besoin de 11 octets (10 pour les caract\xe8res + 1 pour ",(0,i.jsx)(n.code,{children:"\\0"}),")."]}),"\n",(0,i.jsx)(n.p,{children:"Ces erreurs apparemment mineures peuvent entra\xeener des d\xe9bordements de tampon (\xe9criture d'un octet au-del\xe0 de la fin allou\xe9e) ou d'autres acc\xe8s hors limites, provoquant un comportement impr\xe9visible ou ouvrant des portes \xe0 l'exploitation."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"5. La double lib\xe9ration (Double Free) : Lib\xe9rer ce qui a d\xe9j\xe0 \xe9t\xe9 lib\xe9r\xe9"})}),"\n",(0,i.jsxs)(n.p,{children:["Appeler ",(0,i.jsx)(n.code,{children:"free()"})," deux fois sur le m\xeame bloc de m\xe9moire est une \xab double lib\xe9ration \xbb. Cela entra\xeene un comportement ind\xe9fini imm\xe9diat et peut gravement corrompre les structures de donn\xe9es internes utilis\xe9es par l'allocateur de m\xe9moire (comme ",(0,i.jsx)(n.code,{children:"malloc"})," et ",(0,i.jsx)(n.code,{children:"free"}),")."]}),"\n",(0,i.jsx)(n.p,{children:"Les implications sont graves :"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Plantage du programme :"})," Le programme peut planter imm\xe9diatement en raison d'une corruption de la m\xe9moire."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Corruption du tas (Heap Corruption) :"})," L'\xe9tat interne du gestionnaire de m\xe9moire peut devenir incoh\xe9rent, entra\xeenant un comportement impr\xe9visible par la suite."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ex\xe9cution de code arbitraire :"})," Un attaquant sophistiqu\xe9 peut souvent manipuler les structures du tas via une double lib\xe9ration pour obtenir des primitives de lecture/\xe9criture arbitraires, conduisant finalement \xe0 l'ex\xe9cution de code \xe0 distance. Lorsque votre code entre dans le territoire du comportement ind\xe9fini, \xab tous les paris sont ouverts \xbb."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"conclusion--la-nature-impr\xe9visible-du-comportement-ind\xe9fini",children:"Conclusion : La nature impr\xe9visible du comportement ind\xe9fini"}),"\n",(0,i.jsxs)(n.p,{children:["Le fil conducteur de ces erreurs de gestion de la m\xe9moire est le \xab comportement ind\xe9fini \xbb. Lorsque votre code C pr\xe9sente un comportement ind\xe9fini, le compilateur et l'environnement d'ex\xe9cution sont libres de faire ",(0,i.jsx)(n.em,{children:"n'importe quoi"}),". Votre programme peut sembler fonctionner, il peut planter, ou, le plus terrifiant, il pourrait cr\xe9er une vuln\xe9rabilit\xe9 subtile qu'un attaquant peut exploiter m\xe9ticuleusement pour prendre le contr\xf4le de votre syst\xe8me."]}),"\n",(0,i.jsxs)(n.p,{children:["La puissance du C est ind\xe9niable, mais elle s'accompagne d'une exigence non n\xe9gociable de minutie dans la gestion de la m\xe9moire. Les incidents historiques soulign\xe9s ici servent de rappels frappants qu'un seul oubli dans la manipulation de ",(0,i.jsx)(n.code,{children:"malloc"})," et ",(0,i.jsx)(n.code,{children:"free"})," peut avoir des cons\xe9quences d\xe9vastatrices et concr\xe8tes. La programmation C s\xe9curis\xe9e ne consiste pas seulement \xe0 \xe9crire du code correct ; il s'agit d'anticiper et de pr\xe9venir toutes les mani\xe8res possibles de mal g\xe9rer la m\xe9moire."]})]})}function c(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var s=r(6540);const i={},t=s.createContext(i);function a(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(t.Provider,{value:n},e.children)}},8734:e=>{e.exports=JSON.parse('{"permalink":"/dev/fr/blog/c-gestion-memoire-risques-dangers-caches","source":"@site/i18n/fr/docusaurus-plugin-content-blog/2025-05-24-danger-of-c.md","title":"Les dangers cach\xe9s du C - D\xe9cortiquer les risques li\xe9s \xe0 la gestion de la m\xe9moire","description":"Le langage de programmation C. Il est souvent salu\xe9 comme la \xab m\xe8re de presque tous les langages modernes \xbb, formant la pierre angulaire de tout, des syst\xe8mes d\'exploitation et compilateurs aux moteurs de jeu et outils de chiffrement. Sa puissance et son contr\xf4le de bas niveau sont in\xe9gal\xe9s, le rendant indispensable pour les infrastructures critiques. Pourtant, cette m\xeame puissance s\'accompagne d\'une responsabilit\xe9 exigeante : la gestion manuelle de la m\xe9moire.","date":"2025-05-24T00:00:00.000Z","tags":[{"inline":true,"label":"C","permalink":"/dev/fr/blog/tags/c"},{"inline":true,"label":"memory-management","permalink":"/dev/fr/blog/tags/memory-management"},{"inline":true,"label":"security","permalink":"/dev/fr/blog/tags/security"},{"inline":true,"label":"programming","permalink":"/dev/fr/blog/tags/programming"},{"inline":true,"label":"buffer-overflow","permalink":"/dev/fr/blog/tags/buffer-overflow"},{"inline":true,"label":"use-after-free","permalink":"/dev/fr/blog/tags/use-after-free"},{"inline":true,"label":"software-engineering","permalink":"/dev/fr/blog/tags/software-engineering"},{"inline":true,"label":"cybersecurity","permalink":"/dev/fr/blog/tags/cybersecurity"}],"readingTime":5.875,"hasTruncateMarker":false,"authors":[{"name":"Joseph HE","title":"Ing\xe9nieur Logiciel","url":"https://hejoseph.com","page":{"permalink":"/dev/fr/blog/authors/joseph"},"socials":{"github":"https://github.com/hejoseph"},"imageURL":"https://github.com/hejoseph.png","key":"joseph"}],"frontMatter":{"slug":"c-gestion-memoire-risques-dangers-caches","title":"Les dangers cach\xe9s du C - D\xe9cortiquer les risques li\xe9s \xe0 la gestion de la m\xe9moire","authors":["joseph"],"tags":["C","memory-management","security","programming","buffer-overflow","use-after-free","software-engineering","cybersecurity"]},"unlisted":false,"prevItem":{"title":"Builder AI - La \\"plus grande escroquerie de l\'IA\\" ? Derri\xe8re l\'algorithme, 700 ing\xe9nieurs humains","permalink":"/dev/fr/blog/builder-ai-arnaque-ia-humains"},"nextItem":{"title":"Pourquoi Facebook (Meta) a-t-il dit \\"non\\" \xe0 Git ? Une histoire de scaling, de communaut\xe9 et de monorepos g\xe9ants","permalink":"/dev/fr/blog/pourquoi-facebook-meta-n-utilise-pas-git"}}')}}]);