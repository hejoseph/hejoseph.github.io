"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[2723],{91:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"java/java-oop-principles","title":"Principes de la Programmation Orient\xe9 Objet en Java","description":"La Programmation Orient\xe9e Objet (POO) est un paradigme de programmation qui organise la conception de logiciels autour de donn\xe9es, ou objets, plut\xf4t que de fonctions et de logique. Java est un langage purement orient\xe9 objet, ce qui signifie que presque tout en Java tourne autour des classes et des objets.","source":"@site/i18n/fr/docusaurus-plugin-content-docs/current/java/java-oop-principles.md","sourceDirName":"java","slug":"/java/java-oop-principles","permalink":"/dev/fr/docs/java/java-oop-principles","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"java","permalink":"/dev/fr/docs/tags/java"},{"inline":true,"label":"oop","permalink":"/dev/fr/docs/tags/oop"},{"inline":true,"label":"object-oriented","permalink":"/dev/fr/docs/tags/object-oriented"},{"inline":true,"label":"programming","permalink":"/dev/fr/docs/tags/programming"}],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Principes de la Programmation Orient\xe9 Objet en Java","sidebar_position":1,"tags":["java","oop","object-oriented","programming"]},"sidebar":"tutorialSidebar","previous":{"title":"Garbage Collection","permalink":"/dev/fr/docs/java/garbage-collector"},"next":{"title":"Javascript","permalink":"/dev/fr/docs/category/javascript"}}');var t=r(4848),i=r(8453);const a={title:"Principes de la Programmation Orient\xe9 Objet en Java",sidebar_position:1,tags:["java","oop","object-oriented","programming"]},l=void 0,o={},c=[{value:"Principes fondamentaux de la POO en Java",id:"principes-fondamentaux-de-la-poo-en-java",level:3},{value:"1. Encapsulation",id:"1-encapsulation",level:4},{value:"2. Abstraction",id:"2-abstraction",level:4},{value:"3. H\xe9ritage",id:"3-h\xe9ritage",level:4},{value:"4. Polymorphisme",id:"4-polymorphisme",level:4},{value:"Autres concepts cl\xe9s de la POO en Java",id:"autres-concepts-cl\xe9s-de-la-poo-en-java",level:3},{value:"Avantages de la POO",id:"avantages-de-la-poo",level:3}];function d(e){const n={code:"code",em:"em",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"La Programmation Orient\xe9e Objet (POO) est un paradigme de programmation qui organise la conception de logiciels autour de donn\xe9es, ou objets, plut\xf4t que de fonctions et de logique. Java est un langage purement orient\xe9 objet, ce qui signifie que presque tout en Java tourne autour des classes et des objets."}),"\n",(0,t.jsxs)(n.p,{children:["L'id\xe9e fondamentale derri\xe8re la POO est de mod\xe9liser des entit\xe9s du monde r\xe9el sous forme d'objets, qui poss\xe8dent \xe0 la fois un ",(0,t.jsx)(n.strong,{children:"\xe9tat"})," (donn\xe9es/attributs) et un ",(0,t.jsx)(n.strong,{children:"comportement"})," (m\xe9thodes/fonctions). Cette approche vise \xe0 rendre les logiciels plus modulaires, r\xe9utilisables, compr\xe9hensibles et maintenables."]}),"\n",(0,t.jsx)(n.h3,{id:"principes-fondamentaux-de-la-poo-en-java",children:"Principes fondamentaux de la POO en Java"}),"\n",(0,t.jsx)(n.p,{children:"La POO en Java est construite sur quatre piliers fondamentaux :"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Encapsulation"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Abstraction"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"H\xe9ritage"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Polymorphisme"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Explorons chacun d'eux :"}),"\n",(0,t.jsx)(n.h4,{id:"1-encapsulation",children:"1. Encapsulation"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"D\xe9finition :"})," L'encapsulation est le regroupement des donn\xe9es (attributs) et des m\xe9thodes qui op\xe8rent sur ces donn\xe9es en une seule unit\xe9 (une classe). Elle implique \xe9galement la restriction de l'acc\xe8s direct \xe0 certains composants d'un objet, ce qui signifie que la repr\xe9sentation interne d'un objet est cach\xe9e de l'ext\xe9rieur."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Comment Java l'atteint :"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["En d\xe9clarant les variables d'instance (donn\xe9es) comme ",(0,t.jsx)(n.code,{children:"private"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["En fournissant des m\xe9thodes ",(0,t.jsx)(n.code,{children:"getter"})," et ",(0,t.jsx)(n.code,{children:"setter"})," publiques pour acc\xe9der et modifier ces variables priv\xe9es."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Exemple :"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class BankAccount {\r\n    private String accountNumber; // Donn\xe9es encapsul\xe9es\r\n    private double balance;       // Donn\xe9es encapsul\xe9es\r\n\r\n    public BankAccount(String accountNumber, double initialBalance) {\r\n        this.accountNumber = accountNumber;\r\n        this.balance = initialBalance;\r\n    }\r\n\r\n    // M\xe9thodes getter publiques\r\n    public String getAccountNumber() {\r\n        return accountNumber;\r\n    }\r\n\r\n    public double getBalance() {\r\n        return balance;\r\n    }\r\n\r\n    // M\xe9thodes setter/comportement publiques\r\n    public void deposit(double amount) {\r\n        if (amount > 0) {\r\n            this.balance += amount;\r\n            System.out.println("D\xe9pos\xe9 : " + amount);\r\n        }\r\n    }\r\n\r\n    public void withdraw(double amount) {\r\n        if (amount > 0 && this.balance >= amount) {\r\n            this.balance -= amount;\r\n            System.out.println("Retir\xe9 : " + amount);\r\n        } else {\r\n            System.out.println("Solde insuffisant ou montant invalide.");\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Dans cet exemple, ",(0,t.jsx)(n.code,{children:"accountNumber"})," et ",(0,t.jsx)(n.code,{children:"balance"})," sont priv\xe9s, ils ne peuvent donc \xeatre acc\xe9d\xe9s ou modifi\xe9s que via les m\xe9thodes ",(0,t.jsx)(n.code,{children:"deposit"}),", ",(0,t.jsx)(n.code,{children:"withdraw"}),", ",(0,t.jsx)(n.code,{children:"getAccountNumber"})," et ",(0,t.jsx)(n.code,{children:"getBalance"}),", offrant un acc\xe8s contr\xf4l\xe9."]}),"\n",(0,t.jsx)(n.h4,{id:"2-abstraction",children:"2. Abstraction"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"D\xe9finition :"})," L'abstraction est le processus de masquage des d\xe9tails d'impl\xe9mentation complexes et de pr\xe9sentation uniquement des fonctionnalit\xe9s essentielles d'un objet. Elle se concentre sur ",(0,t.jsx)(n.em,{children:"ce que"})," fait un objet plut\xf4t que sur ",(0,t.jsx)(n.em,{children:"comment"})," il le fait."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Comment Java l'atteint :"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Classes Abstraites :"})," Classes d\xe9clar\xe9es avec le mot-cl\xe9 ",(0,t.jsx)(n.code,{children:"abstract"}),". Elles ne peuvent pas \xeatre instanci\xe9es directement et peuvent avoir des m\xe9thodes \xe0 la fois abstraites (sans impl\xe9mentation) et concr\xe8tes (avec impl\xe9mentation)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Interfaces :"})," Des plans d'une classe. Elles ne contiennent que des m\xe9thodes abstraites (avant Java 8) et des constantes. \xc0 partir de Java 8, elles peuvent avoir des m\xe9thodes par d\xe9faut et statiques. Une classe impl\xe9mente une interface, promettant de fournir des impl\xe9mentations concr\xe8tes pour ses m\xe9thodes abstraites."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Exemple (utilisant une Classe Abstraite) :"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Classe Abstraite\r\nabstract class Shape {\r\n    abstract double getArea(); // M\xe9thode abstraite (pas d\'impl\xe9mentation)\r\n\r\n    public void display() { // M\xe9thode concr\xe8te\r\n        System.out.println("Ceci est une forme.");\r\n    }\r\n}\r\n\r\n// Classe concr\xe8te impl\xe9mentant Shape\r\nclass Circle extends Shape {\r\n    private double radius;\r\n\r\n    public Circle(double radius) {\r\n        this.radius = radius;\r\n    }\r\n\r\n    @Override\r\n    double getArea() { // Impl\xe9mentation de la m\xe9thode abstraite\r\n        return Math.PI * radius * radius;\r\n    }\r\n}\r\n\r\n// Exemple (utilisant une Interface) :\r\ninterface Drivable {\r\n    void start(); // M\xe9thode abstraite\r\n    void stop();  // M\xe9thode abstraite\r\n}\r\n\r\nclass Car implements Drivable {\r\n    @Override\r\n    public void start() {\r\n        System.out.println("Voiture d\xe9marr\xe9e.");\r\n    }\r\n\r\n    @Override\r\n    public void stop() {\r\n        System.out.println("Voiture arr\xeat\xe9e.");\r\n    }\r\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Ici, ",(0,t.jsx)(n.code,{children:"Shape"})," et ",(0,t.jsx)(n.code,{children:"Drivable"})," abstraient le comportement commun ",(0,t.jsx)(n.code,{children:"getArea()"}),", ",(0,t.jsx)(n.code,{children:"start()"}),", ",(0,t.jsx)(n.code,{children:"stop()"})," sans r\xe9v\xe9ler les calculs ou m\xe9canismes internes."]}),"\n",(0,t.jsx)(n.h4,{id:"3-h\xe9ritage",children:"3. H\xe9ritage"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"D\xe9finition :"})," L'h\xe9ritage est un m\xe9canisme par lequel une classe (sous-classe/classe enfant) acquiert les propri\xe9t\xe9s et les comportements (champs et m\xe9thodes) d'une autre classe (super-classe/classe parent). Il favorise la r\xe9utilisabilit\xe9 du code et \xe9tablit une relation \"est-un\"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Comment Java l'atteint :"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["En utilisant le mot-cl\xe9 ",(0,t.jsx)(n.code,{children:"extends"}),". Une classe ne peut \xe9tendre qu'une seule autre classe (h\xe9ritage simple)."]}),"\n",(0,t.jsx)(n.li,{children:"Les interfaces peuvent \xe9galement \xeatre \xe9tendues par d'autres interfaces."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Exemple :"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Classe Parent (Super-classe)\r\nclass Animal {\r\n    String name;\r\n\r\n    public Animal(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public void eat() {\r\n        System.out.println(name + " est en train de manger.");\r\n    }\r\n}\r\n\r\n// Classe Enfant (Sous-classe) h\xe9ritant de Animal\r\nclass Dog extends Animal {\r\n    public Dog(String name) {\r\n        super(name); // Appelle le constructeur de la classe parent\r\n    }\r\n\r\n    public void bark() {\r\n        System.out.println(name + " aboie.");\r\n    }\r\n}\r\n\r\n// Une autre Classe Enfant\r\nclass Cat extends Animal {\r\n    public Cat(String name) {\r\n        super(name);\r\n    }\r\n\r\n    public void meow() {\r\n        System.out.println(name + " miaule.");\r\n    }\r\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Ici, ",(0,t.jsx)(n.code,{children:"Dog"})," et ",(0,t.jsx)(n.code,{children:"Cat"})," h\xe9ritent du champ ",(0,t.jsx)(n.code,{children:"name"})," et de la m\xe9thode ",(0,t.jsx)(n.code,{children:"eat()"})," de ",(0,t.jsx)(n.code,{children:"Animal"}),", r\xe9utilisant les fonctionnalit\xe9s communes."]}),"\n",(0,t.jsx)(n.h4,{id:"4-polymorphisme",children:"4. Polymorphisme"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"D\xe9finition :"}),' Le polymorphisme signifie "plusieurs formes". Il permet de traiter des objets de diff\xe9rentes classes comme des objets d\'un type commun. Il permet \xe0 une interface unique de repr\xe9senter diff\xe9rentes formes sous-jacentes (types de donn\xe9es ou classes).']}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Comment Java l'atteint :"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Surcharge de m\xe9thode (Polymorphisme \xe0 la compilation) :"})," D\xe9finition de plusieurs m\xe9thodes dans la m\xeame classe avec le m\xeame nom mais des param\xe8tres diff\xe9rents (nombre, type ou ordre des arguments)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Red\xe9finition de m\xe9thode (Polymorphisme \xe0 l'ex\xe9cution) :"})," D\xe9finition d'une m\xe9thode dans une sous-classe qui a la m\xeame signature (nom, type de retour et param\xe8tres) qu'une m\xe9thode de sa super-classe. Cela permet \xe0 une sous-classe de fournir une impl\xe9mentation sp\xe9cifique d'une m\xe9thode d\xe9j\xe0 d\xe9finie dans sa super-classe."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Exemple (Surcharge de M\xe9thode) :"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"class Calculator {\r\n    public int add(int a, int b) {\r\n        return a + b;\r\n    }\r\n\r\n    public double add(double a, double b) { // M\xe9thode surcharg\xe9e\r\n        return a + b;\r\n    }\r\n\r\n    public int add(int a, int b, int c) { // M\xe9thode surcharg\xe9e\r\n        return a + b + c;\r\n    }\r\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["La m\xe9thode ",(0,t.jsx)(n.code,{children:"add"})," prend diff\xe9rentes formes selon les arguments."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Exemple (Red\xe9finition de M\xe9thode & Polymorphisme \xe0 l'ex\xe9cution) :"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'class Vehicle {\r\n    public void speedUp() {\r\n        System.out.println("Le v\xe9hicule acc\xe9l\xe8re.");\r\n    }\r\n}\r\n\r\nclass Car extends Vehicle {\r\n    @Override\r\n    public void speedUp() { // M\xe9thode red\xe9finie\r\n        System.out.println("La voiture acc\xe9l\xe8re.");\r\n    }\r\n}\r\n\r\nclass Bicycle extends Vehicle {\r\n    @Override\r\n    public void speedUp() { // M\xe9thode red\xe9finie\r\n        System.out.println("Le v\xe9lo p\xe9dale plus vite.");\r\n    }\r\n}\r\n\r\npublic class PolyDemo {\r\n    public static void main(String[] args) {\r\n        Vehicle myCar = new Car();      // R\xe9f\xe9rence polymorphique\r\n        Vehicle myBicycle = new Bicycle(); // R\xe9f\xe9rence polymorphique\r\n\r\n        myCar.speedUp();       // Appelle la m\xe9thode speedUp() de Car\r\n        myBicycle.speedUp();   // Appelle la m\xe9thode speedUp() de Bicycle\r\n\r\n        Vehicle genericVehicle = new Vehicle();\r\n        genericVehicle.speedUp(); // Appelle la m\xe9thode speedUp() de Vehicle\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Sortie :"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"La voiture acc\xe9l\xe8re.\r\nLe v\xe9lo p\xe9dale plus vite.\r\nLe v\xe9hicule acc\xe9l\xe8re.\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Ici, ",(0,t.jsx)(n.code,{children:"myCar"})," et ",(0,t.jsx)(n.code,{children:"myBicycle"})," sont d\xe9clar\xe9s de type ",(0,t.jsx)(n.code,{children:"Vehicle"})," mais se comportent diff\xe9remment en fonction de leur type d'objet r\xe9el \xe0 l'ex\xe9cution."]}),"\n",(0,t.jsx)(n.h3,{id:"autres-concepts-cl\xe9s-de-la-poo-en-java",children:"Autres concepts cl\xe9s de la POO en Java"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Classe :"})," Un plan ou un mod\xe8le pour cr\xe9er des objets. Elle d\xe9finit les attributs et comportements communs que tous les objets de cette classe auront."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Objet :"})," Une instance d'une classe. C'est une entit\xe9 concr\xe8te cr\xe9\xe9e \xe0 partir d'une classe, repr\xe9sentant un \xe9l\xe9ment du monde r\xe9el."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Constructeur :"})," Une m\xe9thode sp\xe9ciale dans une classe qui est automatiquement appel\xe9e lorsqu'un objet de cette classe est cr\xe9\xe9 (instanci\xe9). Son but principal est d'initialiser l'\xe9tat de l'objet."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"avantages-de-la-poo",children:"Avantages de la POO"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Modularit\xe9 :"})," D\xe9coupage de syst\xe8mes complexes en objets plus petits, g\xe9rables et ind\xe9pendants."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"R\xe9utilisabilit\xe9 :"})," L'h\xe9ritage permet la r\xe9utilisation du code, r\xe9duisant le temps et l'effort de d\xe9veloppement."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Maintenabilit\xe9 :"})," Plus facile de localiser, corriger et mettre \xe0 jour les probl\xe8mes gr\xe2ce \xe0 la structure modulaire."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\xc9volutivit\xe9 :"})," Plus facile d'ajouter de nouvelles fonctionnalit\xe9s ou d'\xe9tendre des fonctionnalit\xe9s sans affecter le code existant."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Flexibilit\xe9 :"})," Le polymorphisme permet un code plus flexible et adaptable."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"S\xe9curit\xe9 des donn\xe9es :"})," L'encapsulation prot\xe8ge les donn\xe9es contre la corruption accidentelle."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"En r\xe9sum\xe9, la POO en Java offre un moyen structur\xe9 et puissant de concevoir et de d\xe9velopper des logiciels, les rendant plus robustes, maintenables et \xe9volutifs en organisant le code autour d'objets du monde r\xe9el et de leurs interactions."})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>l});var s=r(6540);const t={},i=s.createContext(t);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);