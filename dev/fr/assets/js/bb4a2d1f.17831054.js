"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[4005],{2987:e=>{e.exports=JSON.parse('{"tag":{"label":"python","permalink":"/dev/fr/docs/tags/python","allTagsPath":"/dev/fr/docs/tags","count":3,"items":[{"id":"Python/Openai/Api/open-api-code-examples","title":"Compl\xe9tion de chat OpenAI","description":"Le cas d\'utilisation le plus courant de l\'API OpenAI en Python est la g\xe9n\xe9ration de compl\xe9tions de chat. Cela implique d\'envoyer une liste de messages \xe0 un mod\xe8le sp\xe9cifi\xe9 et de recevoir une r\xe9ponse g\xe9n\xe9r\xe9e. L\'API prend en charge les appels synchrones (bloquants) et asynchrones (non bloquants), et les r\xe9ponses peuvent \xeatre re\xe7ues sous forme d\'objet unique ou \xeatre diffus\xe9es par fragments.","permalink":"/dev/fr/docs/Python/Openai/Api/open-api-code-examples"},{"id":"Python/python-naming-convention","title":"Conventions de nommage","description":"Python suit le guide de style PEP 8 pour les conventions de nommage. Ce guide aide \xe0 am\xe9liorer la lisibilit\xe9 et la maintenabilit\xe9 du code \xe0 travers les fichiers, classes, m\xe9thodes et variables. Voici les meilleures pratiques de nommage en Python :","permalink":"/dev/fr/docs/Python/python-naming-convention"},{"id":"Python/Chatbot/chat-with-different-ai-api","title":"Structure de Chat IA Extensible","description":"Pour une application de chat extensible o\xf9 les utilisateurs peuvent choisir diff\xe9rents mod\xe8les d\'IA (par exemple, Gemini, OpenAI et d\'autres \xe0 l\'avenir), une approche structur\xe9e utilisant les Classes de Base Abstraites (CBA) et le Patron de Fabrique est tr\xe8s efficace. Cela permet de d\xe9finir une interface commune pour tous les fournisseurs d\'IA et d\'en int\xe9grer facilement de nouveaux sans modifier la logique principale existante.","permalink":"/dev/fr/docs/Python/Chatbot/chat-with-different-ai-api"}],"unlisted":false}}')}}]);