"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[9290],{787:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"Angular/class-vs-interface","title":"Interface vs Class in Angular: When and Why","description":"The choice between interfaces and classes depends on what you need to accomplish. Let me break this down:","source":"@site/docs/Angular/class-vs-interface.md","sourceDirName":"Angular","slug":"/Angular/class-vs-interface","permalink":"/dev/fr/docs/Angular/class-vs-interface","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"When to Use Async in Angular","permalink":"/dev/fr/docs/Angular/async"},"next":{"title":"Git Professionnel","permalink":"/dev/fr/docs/Git/master-git"}}');var s=r(4848),i=r(8453);const a={},o="Interface vs Class in Angular: When and Why",c={},l=[{value:"Key Differences",id:"key-differences",level:2},{value:"When to Use Interfaces",id:"when-to-use-interfaces",level:2},{value:"\u2705 <strong>Use Interfaces For:</strong>",id:"-use-interfaces-for",level:3},{value:"1. <strong>Data Models/DTOs (Most Common)</strong>",id:"1-data-modelsdtos-most-common",level:4},{value:"2. <strong>Component Input/Output Contracts</strong>",id:"2-component-inputoutput-contracts",level:4},{value:"3. <strong>Service Contracts (Dependency Injection)</strong>",id:"3-service-contracts-dependency-injection",level:4},{value:"4. <strong>Configuration Objects</strong>",id:"4-configuration-objects",level:4},{value:"When to Use Classes",id:"when-to-use-classes",level:2},{value:"\u2705 <strong>Use Classes For:</strong>",id:"-use-classes-for",level:3},{value:"1. <strong>Business Logic Models</strong>",id:"1-business-logic-models",level:4},{value:"2. <strong>Data Transformation/Validation</strong>",id:"2-data-transformationvalidation",level:4},{value:"3. <strong>Complex State Management</strong>",id:"3-complex-state-management",level:4},{value:"4. <strong>Services with State</strong>",id:"4-services-with-state",level:4},{value:"Hybrid Approach (Common Pattern)",id:"hybrid-approach-common-pattern",level:2},{value:"Decision Guidelines",id:"decision-guidelines",level:2},{value:"Use <strong>Interface</strong> when you need:",id:"use-interface-when-you-need",level:3},{value:"Use <strong>Class</strong> when you need:",id:"use-class-when-you-need",level:3},{value:"Use <strong>Both</strong> when you need:",id:"use-both-when-you-need",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"interface-vs-class-in-angular-when-and-why",children:"Interface vs Class in Angular: When and Why"})}),"\n",(0,s.jsx)(n.p,{children:"The choice between interfaces and classes depends on what you need to accomplish. Let me break this down:"}),"\n",(0,s.jsx)(n.h2,{id:"key-differences",children:"Key Differences"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Interface"}),(0,s.jsx)(n.th,{children:"Class"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Compile-time only"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Runtime available"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Type checking & contracts"}),(0,s.jsx)(n.td,{children:"Can be instantiated"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"No implementation"}),(0,s.jsx)(n.td,{children:"Can have implementation"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Multiple inheritance"}),(0,s.jsx)(n.td,{children:"Single inheritance"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Zero JavaScript output"}),(0,s.jsx)(n.td,{children:"Generates JavaScript"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"when-to-use-interfaces",children:"When to Use Interfaces"}),"\n",(0,s.jsxs)(n.h3,{id:"-use-interfaces-for",children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Use Interfaces For:"})]}),"\n",(0,s.jsxs)(n.h4,{id:"1-data-modelsdtos-most-common",children:["1. ",(0,s.jsx)(n.strong,{children:"Data Models/DTOs (Most Common)"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// API response structure\r\ninterface User {\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n  createdAt: Date;\r\n}\r\n\r\ninterface ApiResponse<T> {\r\n  data: T;\r\n  message: string;\r\n  success: boolean;\r\n}\r\n\r\n@Injectable()\r\nexport class UserService {\r\n  getUser(id: number): Observable<ApiResponse<User>> {\r\n    return this.http.get<ApiResponse<User>>(`/api/users/${id}`);\r\n  }\r\n}\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"2-component-inputoutput-contracts",children:["2. ",(0,s.jsx)(n.strong,{children:"Component Input/Output Contracts"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"interface UserCardConfig {\r\n  showAvatar: boolean;\r\n  showEmail: boolean;\r\n  clickable: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-user-card',\r\n  template: `...`\r\n})\r\nexport class UserCardComponent {\r\n  @Input() user: User;\r\n  @Input() config: UserCardConfig;\r\n  @Output() userClick = new EventEmitter<User>();\r\n}\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"3-service-contracts-dependency-injection",children:["3. ",(0,s.jsx)(n.strong,{children:"Service Contracts (Dependency Injection)"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"interface IUserService {\r\n  getUser(id: number): Observable<User>;\r\n  updateUser(user: User): Observable<User>;\r\n  deleteUser(id: number): Observable<void>;\r\n}\r\n\r\n@Injectable()\r\nexport class UserService implements IUserService {\r\n  getUser(id: number): Observable<User> {\r\n    return this.http.get<User>(`/api/users/${id}`);\r\n  }\r\n  \r\n  updateUser(user: User): Observable<User> {\r\n    return this.http.put<User>(`/api/users/${user.id}`, user);\r\n  }\r\n  \r\n  deleteUser(id: number): Observable<void> {\r\n    return this.http.delete<void>(`/api/users/${id}`);\r\n  }\r\n}\r\n\r\n// Easy to mock for testing\r\nexport class MockUserService implements IUserService {\r\n  getUser(id: number): Observable<User> {\r\n    return of({ id, name: 'Test User', email: 'test@test.com' });\r\n  }\r\n  // ... other methods\r\n}\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"4-configuration-objects",children:["4. ",(0,s.jsx)(n.strong,{children:"Configuration Objects"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"interface AppConfig {\r\n  apiUrl: string;\r\n  timeout: number;\r\n  retryAttempts: number;\r\n  features: {\r\n    enableLogging: boolean;\r\n    enableAnalytics: boolean;\r\n  };\r\n}\r\n\r\nconst config: AppConfig = {\r\n  apiUrl: 'https://api.example.com',\r\n  timeout: 5000,\r\n  retryAttempts: 3,\r\n  features: {\r\n    enableLogging: true,\r\n    enableAnalytics: false\r\n  }\r\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"when-to-use-classes",children:"When to Use Classes"}),"\n",(0,s.jsxs)(n.h3,{id:"-use-classes-for",children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Use Classes For:"})]}),"\n",(0,s.jsxs)(n.h4,{id:"1-business-logic-models",children:["1. ",(0,s.jsx)(n.strong,{children:"Business Logic Models"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"export class ShoppingCart {\r\n  private items: CartItem[] = [];\r\n  \r\n  constructor(private userId: string) {}\r\n  \r\n  addItem(product: Product, quantity: number): void {\r\n    const existingItem = this.items.find(item => item.productId === product.id);\r\n    \r\n    if (existingItem) {\r\n      existingItem.quantity += quantity;\r\n    } else {\r\n      this.items.push(new CartItem(product, quantity));\r\n    }\r\n  }\r\n  \r\n  removeItem(productId: string): void {\r\n    this.items = this.items.filter(item => item.productId !== productId);\r\n  }\r\n  \r\n  get totalPrice(): number {\r\n    return this.items.reduce((total, item) => total + item.totalPrice, 0);\r\n  }\r\n  \r\n  get itemCount(): number {\r\n    return this.items.reduce((count, item) => count + item.quantity, 0);\r\n  }\r\n}\r\n\r\nexport class CartItem {\r\n  constructor(\r\n    public product: Product,\r\n    public quantity: number\r\n  ) {}\r\n  \r\n  get totalPrice(): number {\r\n    return this.product.price * this.quantity;\r\n  }\r\n}\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"2-data-transformationvalidation",children:["2. ",(0,s.jsx)(n.strong,{children:"Data Transformation/Validation"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"export class User {\r\n  constructor(\r\n    public id: number,\r\n    public firstName: string,\r\n    public lastName: string,\r\n    public email: string,\r\n    public birthDate: Date\r\n  ) {}\r\n  \r\n  get fullName(): string {\r\n    return `${this.firstName} ${this.lastName}`;\r\n  }\r\n  \r\n  get age(): number {\r\n    const today = new Date();\r\n    const birth = new Date(this.birthDate);\r\n    let age = today.getFullYear() - birth.getFullYear();\r\n    const monthDiff = today.getMonth() - birth.getMonth();\r\n    \r\n    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {\r\n      age--;\r\n    }\r\n    \r\n    return age;\r\n  }\r\n  \r\n  isAdult(): boolean {\r\n    return this.age >= 18;\r\n  }\r\n  \r\n  static fromApiResponse(data: any): User {\r\n    return new User(\r\n      data.id,\r\n      data.first_name,\r\n      data.last_name,\r\n      data.email,\r\n      new Date(data.birth_date)\r\n    );\r\n  }\r\n}\r\n\r\n// Usage in service\r\n@Injectable()\r\nexport class UserService {\r\n  getUser(id: number): Observable<User> {\r\n    return this.http.get(`/api/users/${id}`).pipe(\r\n      map(data => User.fromApiResponse(data))\r\n    );\r\n  }\r\n}\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"3-complex-state-management",children:["3. ",(0,s.jsx)(n.strong,{children:"Complex State Management"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"export class FormState {\r\n  private _errors: { [key: string]: string[] } = {};\r\n  private _touched: { [key: string]: boolean } = {};\r\n  \r\n  constructor(private _values: { [key: string]: any } = {}) {}\r\n  \r\n  setValue(field: string, value: any): void {\r\n    this._values[field] = value;\r\n    this.validateField(field);\r\n  }\r\n  \r\n  getValue(field: string): any {\r\n    return this._values[field];\r\n  }\r\n  \r\n  setTouched(field: string): void {\r\n    this._touched[field] = true;\r\n  }\r\n  \r\n  getErrors(field: string): string[] {\r\n    return this._errors[field] || [];\r\n  }\r\n  \r\n  isValid(): boolean {\r\n    return Object.keys(this._errors).length === 0;\r\n  }\r\n  \r\n  private validateField(field: string): void {\r\n    // Validation logic\r\n    const value = this._values[field];\r\n    const errors: string[] = [];\r\n    \r\n    if (!value) {\r\n      errors.push(`${field} is required`);\r\n    }\r\n    \r\n    this._errors[field] = errors;\r\n    if (errors.length === 0) {\r\n      delete this._errors[field];\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"4-services-with-state",children:["4. ",(0,s.jsx)(n.strong,{children:"Services with State"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NotificationService {\r\n  private notifications: Notification[] = [];\r\n  private notificationSubject = new BehaviorSubject<Notification[]>([]);\r\n  \r\n  notifications$ = this.notificationSubject.asObservable();\r\n  \r\n  addNotification(message: string, type: 'success' | 'error' | 'info' = 'info'): void {\r\n    const notification = new Notification(message, type);\r\n    this.notifications.push(notification);\r\n    this.notificationSubject.next([...this.notifications]);\r\n    \r\n    // Auto remove after 5 seconds\r\n    setTimeout(() => this.removeNotification(notification.id), 5000);\r\n  }\r\n  \r\n  removeNotification(id: string): void {\r\n    this.notifications = this.notifications.filter(n => n.id !== id);\r\n    this.notificationSubject.next([...this.notifications]);\r\n  }\r\n}\r\n\r\nexport class Notification {\r\n  id: string;\r\n  timestamp: Date;\r\n  \r\n  constructor(\r\n    public message: string,\r\n    public type: 'success' | 'error' | 'info'\r\n  ) {\r\n    this.id = Math.random().toString(36).substr(2, 9);\r\n    this.timestamp = new Date();\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"hybrid-approach-common-pattern",children:"Hybrid Approach (Common Pattern)"}),"\n",(0,s.jsx)(n.p,{children:"Often you'll use both together:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Interface for type safety\r\ninterface IProduct {\r\n  id: string;\r\n  name: string;\r\n  price: number;\r\n  category: string;\r\n}\r\n\r\n// Class for business logic\r\nexport class Product implements IProduct {\r\n  constructor(\r\n    public id: string,\r\n    public name: string,\r\n    public price: number,\r\n    public category: string\r\n  ) {}\r\n  \r\n  get formattedPrice(): string {\r\n    return `$${this.price.toFixed(2)}`;\r\n  }\r\n  \r\n  isInCategory(category: string): boolean {\r\n    return this.category.toLowerCase() === category.toLowerCase();\r\n  }\r\n  \r\n  applyDiscount(percentage: number): number {\r\n    return this.price * (1 - percentage / 100);\r\n  }\r\n}\r\n\r\n// Service using both\r\n@Injectable()\r\nexport class ProductService {\r\n  // Returns interface type for API data\r\n  getProductData(id: string): Observable<IProduct> {\r\n    return this.http.get<IProduct>(`/api/products/${id}`);\r\n  }\r\n  \r\n  // Returns class instance with methods\r\n  getProduct(id: string): Observable<Product> {\r\n    return this.getProductData(id).pipe(\r\n      map(data => new Product(data.id, data.name, data.price, data.category))\r\n    );\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"decision-guidelines",children:"Decision Guidelines"}),"\n",(0,s.jsxs)(n.h3,{id:"use-interface-when-you-need",children:["Use ",(0,s.jsx)(n.strong,{children:"Interface"})," when you need:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u2705 Type checking only"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Data contracts/shapes"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 API response types"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Component input/output types"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Configuration objects"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Multiple inheritance"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"use-class-when-you-need",children:["Use ",(0,s.jsx)(n.strong,{children:"Class"})," when you need:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u2705 Methods and behavior"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Computed properties"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Data transformation"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Business logic"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 State management"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Runtime type checking"}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 Instantiation with ",(0,s.jsx)(n.code,{children:"new"})]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"use-both-when-you-need",children:["Use ",(0,s.jsx)(n.strong,{children:"Both"})," when you need:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u2705 Type safety + behavior"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 API contracts + business logic"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Flexible implementation options"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The key is: ",(0,s.jsx)(n.strong,{children:"Interfaces define shape, Classes define behavior!"})]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var t=r(6540);const s={},i=t.createContext(s);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);