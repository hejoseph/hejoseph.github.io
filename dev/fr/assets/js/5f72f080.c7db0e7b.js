"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[8363],{8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>a});var r=s(6540);const i={},o=r.createContext(i);function t(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(o.Provider,{value:n},e.children)}},8751:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>t,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Portfolio/CodeTyper/Feature/SCORE_LOGGING_IMPLEMENTATION","title":"Score Logging Implementation Guide","description":"Overview","source":"@site/docs/Portfolio/CodeTyper/Feature/SCORE_LOGGING_IMPLEMENTATION.md","sourceDirName":"Portfolio/CodeTyper/Feature","slug":"/Portfolio/CodeTyper/Feature/SCORE_LOGGING_IMPLEMENTATION","permalink":"/dev/fr/docs/Portfolio/CodeTyper/Feature/SCORE_LOGGING_IMPLEMENTATION","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"CodeTyper Use Case: Code Breakdown - sampleCodes.ts","permalink":"/dev/fr/docs/Portfolio/CodeTyper/Code-Breakdown/sampleCodes"},"next":{"title":"Dynamic JSON Visualizer","permalink":"/dev/fr/docs/Portfolio/Jsonamic/introduction"}}');var i=s(4848),o=s(8453);const t={},a="Score Logging Implementation Guide",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Architecture Overview",id:"architecture-overview",level:2},{value:"High-Level Architecture",id:"high-level-architecture",level:3},{value:"Data Flow",id:"data-flow",level:3},{value:"Implementation Details",id:"implementation-details",level:2},{value:"1. Database Layer (<code>src/utils/scoreDatabase.ts</code>)",id:"1-database-layer-srcutilsscoredatabasets",level:3},{value:"Why IndexedDB?",id:"why-indexeddb",level:4},{value:"Database Schema",id:"database-schema",level:4},{value:"Key Database Operations",id:"key-database-operations",level:4},{value:"2. Session Completion Modal (<code>src/components/SessionCompletionModal.tsx</code>)",id:"2-session-completion-modal-srccomponentssessioncompletionmodaltsx",level:3},{value:"Purpose",id:"purpose",level:4},{value:"Key Features",id:"key-features",level:4},{value:"Session Data Preparation",id:"session-data-preparation",level:4},{value:"3. Score Display Component (<code>src/components/ScoreDisplay.tsx</code>)",id:"3-score-display-component-srccomponentsscoredisplaytsx",level:3},{value:"View Modes",id:"view-modes",level:4},{value:"Pagination Implementation",id:"pagination-implementation",level:4},{value:"Personal Bests Dashboard",id:"personal-bests-dashboard",level:4},{value:"4. Integration with CodeTyper (<code>src/components/CodeTyper.tsx</code>)",id:"4-integration-with-codetyper-srccomponentscodetypertsx",level:3},{value:"Session Completion Detection",id:"session-completion-detection",level:4},{value:"Smart Source Detection",id:"smart-source-detection",level:4},{value:"5. App Integration (<code>src/App.tsx</code>)",id:"5-app-integration-srcapptsx",level:3},{value:"Scores Button Addition",id:"scores-button-addition",level:4},{value:"Problems Encountered &amp; Solutions",id:"problems-encountered--solutions",level:2},{value:"1. <strong>Storage Conflicts on Shared Domain</strong>",id:"1-storage-conflicts-on-shared-domain",level:3},{value:"2. <strong>Session Completion Detection</strong>",id:"2-session-completion-detection",level:3},{value:"3. <strong>Source Type Detection</strong>",id:"3-source-type-detection",level:3},{value:"4. <strong>Pagination Performance</strong>",id:"4-pagination-performance",level:3},{value:"5. <strong>Daily Top Scores Calculation</strong>",id:"5-daily-top-scores-calculation",level:3},{value:"6. <strong>Personal Best Tracking</strong>",id:"6-personal-best-tracking",level:3},{value:"7. <strong>TypeScript Integration</strong>",id:"7-typescript-integration",level:3},{value:"8. <strong>Dark Mode Compatibility</strong>",id:"8-dark-mode-compatibility",level:3},{value:"Technical Decisions",id:"technical-decisions",level:2},{value:"1. <strong>IndexedDB over localStorage</strong>",id:"1-indexeddb-over-localstorage",level:3},{value:"2. <strong>Modal-based Score Display</strong>",id:"2-modal-based-score-display",level:3},{value:"3. <strong>Immediate Session Saving</strong>",id:"3-immediate-session-saving",level:3},{value:"4. <strong>Client-side Only Storage</strong>",id:"4-client-side-only-storage",level:3},{value:"5. <strong>Comprehensive Session Metadata</strong>",id:"5-comprehensive-session-metadata",level:3},{value:"File Structure",id:"file-structure",level:2},{value:"API Reference",id:"api-reference",level:2},{value:"ScoreDatabase Methods",id:"scoredatabase-methods",level:3},{value:"Component Props",id:"component-props",level:3},{value:"Future Improvements",id:"future-improvements",level:2},{value:"1. <strong>Data Export/Import</strong>",id:"1-data-exportimport",level:3},{value:"2. <strong>Advanced Analytics</strong>",id:"2-advanced-analytics",level:3},{value:"3. <strong>Achievement System</strong>",id:"3-achievement-system",level:3},{value:"4. <strong>Cloud Sync (Optional)</strong>",id:"4-cloud-sync-optional",level:3},{value:"5. <strong>Performance Optimizations</strong>",id:"5-performance-optimizations",level:3},{value:"6. <strong>Enhanced Filtering</strong>",id:"6-enhanced-filtering",level:3},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"score-logging-implementation-guide",children:"Score Logging Implementation Guide"})}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"This document details the implementation of a comprehensive score logging system for the Code Typer application. The system tracks user typing performance, stores data locally using IndexedDB, and provides rich analytics with pagination and filtering capabilities."}),"\n",(0,i.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#architecture-overview",children:"Architecture Overview"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#implementation-details",children:"Implementation Details"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#problems-encountered--solutions",children:"Problems Encountered & Solutions"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#technical-decisions",children:"Technical Decisions"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#file-structure",children:"File Structure"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#api-reference",children:"API Reference"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#future-improvements",children:"Future Improvements"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"architecture-overview",children:"Architecture Overview"}),"\n",(0,i.jsx)(n.h3,{id:"high-level-architecture",children:"High-Level Architecture"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502   CodeTyper     \u2502\u2500\u2500\u2500\u25b6\u2502 SessionCompletion\u2502\u2500\u2500\u2500\u25b6\u2502   ScoreDatabase \u2502\r\n\u2502   Component     \u2502    \u2502     Modal        \u2502    \u2502   (IndexedDB)   \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n         \u2502                        \u2502                       \u2502\r\n         \u2502                        \u25bc                       \u2502\r\n         \u2502              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510              \u2502\r\n         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502  ScoreDisplay    \u2502\u25c0\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n                        \u2502   Component      \u2502\r\n                        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h3,{id:"data-flow",children:"Data Flow"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Session Tracking"}),": CodeTyper monitors typing progress and calculates metrics"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Session Completion"}),": When typing finishes, session data is prepared"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Modal Display"}),": SessionCompletionModal shows results and saves to database"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Data Storage"}),": ScoreDatabase handles IndexedDB operations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Data Retrieval"}),": ScoreDisplay fetches and presents historical data"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,i.jsxs)(n.h3,{id:"1-database-layer-srcutilsscoredatabasets",children:["1. Database Layer (",(0,i.jsx)(n.code,{children:"src/utils/scoreDatabase.ts"}),")"]}),"\n",(0,i.jsx)(n.h4,{id:"why-indexeddb",children:"Why IndexedDB?"}),"\n",(0,i.jsx)(n.p,{children:"The application is hosted on a domain with multiple apps, making IndexedDB the optimal choice:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Isolation"}),": Each app gets its own database namespace"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Storage Capacity"}),": 50MB+ vs localStorage's 5-10MB limit"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance"}),": Asynchronous operations don't block UI"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Structured Data"}),": Better suited for complex queries and indexing"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"database-schema",children:"Database Schema"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface TypingSession {\r\n  id: string;                    // Unique identifier\r\n  timestamp: Date;               // When the session occurred\r\n  language: string;              // Programming language\r\n  codeSnippet: string;          // The actual code typed\r\n  codeName?: string;            // Name of sample code (if applicable)\r\n  wpm: number;                  // Words per minute\r\n  accuracy: number;             // Percentage accuracy\r\n  errors: number;               // Total error count\r\n  duration: number;             // Session duration in seconds\r\n  totalCharacters: number;      // Total characters in the code\r\n  source: 'sample' | 'custom' | 'ai-generated'; // Code source type\r\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"key-database-operations",children:"Key Database Operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"class ScoreDatabase {\r\n  // Initialize database with proper indexes\r\n  async init(): Promise<void>\r\n  \r\n  // Save a new typing session\r\n  async saveSession(session: Omit<TypingSession, 'id'>): Promise<string>\r\n  \r\n  // Get paginated sessions (most recent first)\r\n  async getAllSessions(limit?: number, offset?: number): Promise<TypingSession[]>\r\n  \r\n  // Get daily top scores for progress tracking\r\n  async getDailyTopScores(): Promise<DailyTopScore[]>\r\n  \r\n  // Get personal best records\r\n  async getPersonalBests(): Promise<PersonalBests>\r\n}\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"2-session-completion-modal-srccomponentssessioncompletionmodaltsx",children:["2. Session Completion Modal (",(0,i.jsx)(n.code,{children:"src/components/SessionCompletionModal.tsx"}),")"]}),"\n",(0,i.jsx)(n.h4,{id:"purpose",children:"Purpose"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Provide immediate feedback after session completion"}),"\n",(0,i.jsx)(n.li,{children:"Show personal records and achievements"}),"\n",(0,i.jsx)(n.li,{children:"Handle automatic session saving"}),"\n",(0,i.jsx)(n.li,{children:"Encourage continued practice"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"key-features",children:"Key Features"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// New record detection\r\nconst [isNewRecord, setIsNewRecord] = useState({\r\n  wpm: false,\r\n  accuracy: false,\r\n  errors: false\r\n});\r\n\r\n// Performance-based encouragement messages\r\nconst getPerformanceMessage = () => {\r\n  if (wpm >= 80 && accuracy >= 95) return '\ud83d\udd25 Exceptional! You\\'re a coding speed demon!';\r\n  if (wpm >= 60 && accuracy >= 90) return '\u2b50 Excellent work! Great speed and accuracy!';\r\n  // ... more conditions\r\n};\n"})}),"\n",(0,i.jsx)(n.h4,{id:"session-data-preparation",children:"Session Data Preparation"}),"\n",(0,i.jsx)(n.p,{children:"The modal receives comprehensive session data:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface SessionData {\r\n  wpm: number;\r\n  accuracy: number;\r\n  errors: number;\r\n  duration: number;\r\n  language: string;\r\n  codeSnippet: string;\r\n  codeName?: string;\r\n  source: 'sample' | 'custom' | 'ai-generated';\r\n  totalCharacters: number;\r\n}\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"3-score-display-component-srccomponentsscoredisplaytsx",children:["3. Score Display Component (",(0,i.jsx)(n.code,{children:"src/components/ScoreDisplay.tsx"}),")"]}),"\n",(0,i.jsx)(n.h4,{id:"view-modes",children:"View Modes"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"All Sessions Mode"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Shows every typing session chronologically"}),"\n",(0,i.jsx)(n.li,{children:"Pagination with configurable items per page (10, 25, 50, 100)"}),"\n",(0,i.jsx)(n.li,{children:"Most recent sessions first"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Daily Top Scores Mode"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Aggregates best performance per day per language"}),"\n",(0,i.jsx)(n.li,{children:"Helps users track daily progress"}),"\n",(0,i.jsx)(n.li,{children:"Shows improvement trends over time"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"pagination-implementation",children:"Pagination Implementation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Calculate pagination\r\nconst totalPages = viewMode === 'all' \r\n  ? Math.ceil(totalSessions / itemsPerPage) \r\n  : Math.ceil(dailyTopScores.length / itemsPerPage);\r\n\r\n// Handle page changes\r\nconst handleItemsPerPageChange = (items: ItemsPerPage) => {\r\n  setItemsPerPage(items);\r\n  setCurrentPage(1); // Reset to first page\r\n};\n"})}),"\n",(0,i.jsx)(n.h4,{id:"personal-bests-dashboard",children:"Personal Bests Dashboard"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const [personalBests, setPersonalBests] = useState<{\r\n  bestWpm: TypingSession | null;\r\n  bestAccuracy: TypingSession | null;\r\n  leastErrors: TypingSession | null;\r\n}>({ bestWpm: null, bestAccuracy: null, leastErrors: null });\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"4-integration-with-codetyper-srccomponentscodetypertsx",children:["4. Integration with CodeTyper (",(0,i.jsx)(n.code,{children:"src/components/CodeTyper.tsx"}),")"]}),"\n",(0,i.jsx)(n.h4,{id:"session-completion-detection",children:"Session Completion Detection"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Check if typing is completed\r\nif (currentCharIndex + 1 >= typingCode.length) {\r\n  setTypingStarted(false);\r\n  \r\n  if (startTime) {\r\n    const now = Date.now();\r\n    const elapsedSeconds = (now - startTime) / 1000;\r\n    const finalWpm = Math.round(wordCount / elapsedMinutes);\r\n    \r\n    // Determine source and code name\r\n    let source: 'sample' | 'custom' | 'ai-generated' = 'custom';\r\n    let codeName: string | undefined;\r\n    \r\n    if (selectedTab === 0) {\r\n      source = 'sample';\r\n      const langCodes = sampleCodes[selectedLanguage as keyof typeof sampleCodes];\r\n      const matchingCode = langCodes.find(code => code.code === typingCode);\r\n      codeName = matchingCode?.name;\r\n    } else {\r\n      source = prompt.trim() !== '' || isGenerating ? 'ai-generated' : 'custom';\r\n    }\r\n    \r\n    // Prepare and show completion modal\r\n    setCompletedSessionData(sessionData);\r\n    setShowCompletionModal(true);\r\n  }\r\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"smart-source-detection",children:"Smart Source Detection"}),"\n",(0,i.jsx)(n.p,{children:"The system intelligently determines the source of code being typed:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Sample"}),": Pre-defined code snippets from ",(0,i.jsx)(n.code,{children:"sampleCodes.ts"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Custom"}),": User-written code in the custom tab"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"AI-Generated"}),": Code generated using the AI prompt feature"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"5-app-integration-srcapptsx",children:["5. App Integration (",(0,i.jsx)(n.code,{children:"src/App.tsx"}),")"]}),"\n",(0,i.jsx)(n.h4,{id:"scores-button-addition",children:"Scores Button Addition"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'<button\r\n  className="inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 border border-input bg-background dark:bg-gray-800 shadow-sm hover:bg-accent hover:text-accent-foreground h-9 px-3"\r\n  type="button"\r\n  onClick={() => setShowScores(true)}\r\n>\r\n  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">\r\n    <path d="M3 3v18h18"/>\r\n    <path d="m19 9-5 5-4-4-3 3"/>\r\n  </svg>\r\n  <span className="hidden sm:inline">Scores</span>\r\n</button>\n'})}),"\n",(0,i.jsx)(n.h2,{id:"problems-encountered--solutions",children:"Problems Encountered & Solutions"}),"\n",(0,i.jsxs)(n.h3,{id:"1-storage-conflicts-on-shared-domain",children:["1. ",(0,i.jsx)(n.strong,{children:"Storage Conflicts on Shared Domain"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": Multiple apps on the same domain competing for localStorage space and potentially overwriting each other's data."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Chose IndexedDB over localStorage for complete isolation"}),"\n",(0,i.jsx)(n.li,{children:"Each app gets its own database namespace"}),"\n",(0,i.jsx)(n.li,{children:"Much larger storage capacity (50MB+ vs 5-10MB)"}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"2-session-completion-detection",children:["2. ",(0,i.jsx)(n.strong,{children:"Session Completion Detection"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": Determining exactly when a typing session is complete and calculating final metrics."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Check completion in the keydown handler\r\nif (currentCharIndex + 1 >= typingCode.length) {\r\n  // Session complete - calculate final metrics\r\n  const elapsedSeconds = (now - startTime) / 1000;\r\n  const finalWpm = Math.round(wordCount / elapsedMinutes);\r\n  \r\n  // Trigger completion modal\r\n  setCompletedSessionData(sessionData);\r\n  setShowCompletionModal(true);\r\n}\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"3-source-type-detection",children:["3. ",(0,i.jsx)(n.strong,{children:"Source Type Detection"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": Automatically determining whether code came from samples, custom input, or AI generation."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Smart source detection logic\r\nlet source: 'sample' | 'custom' | 'ai-generated' = 'custom';\r\nlet codeName: string | undefined;\r\n\r\nif (selectedTab === 0) {\r\n  // Sample code tab\r\n  source = 'sample';\r\n  const langCodes = sampleCodes[selectedLanguage as keyof typeof sampleCodes];\r\n  const matchingCode = langCodes.find(code => code.code === typingCode);\r\n  codeName = matchingCode?.name;\r\n} else {\r\n  // Custom code tab - check if AI generated\r\n  source = prompt.trim() !== '' || isGenerating ? 'ai-generated' : 'custom';\r\n}\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"4-pagination-performance",children:["4. ",(0,i.jsx)(n.strong,{children:"Pagination Performance"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": Loading all sessions at once could be slow with large datasets."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Implemented proper IndexedDB pagination with offset/limit"}),"\n",(0,i.jsx)(n.li,{children:"Used cursors for efficient data traversal"}),"\n",(0,i.jsx)(n.li,{children:"Separate count query for total records"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"async getAllSessions(limit?: number, offset?: number): Promise<TypingSession[]> {\r\n  const request = index.openCursor(null, 'prev'); // Most recent first\r\n  \r\n  let count = 0;\r\n  let skipped = 0;\r\n  \r\n  request.onsuccess = (event) => {\r\n    const cursor = (event.target as IDBRequest).result;\r\n    if (cursor) {\r\n      if (offset && skipped < offset) {\r\n        skipped++;\r\n        cursor.continue();\r\n        return;\r\n      }\r\n      \r\n      if (!limit || count < limit) {\r\n        sessions.push(cursor.value);\r\n        count++;\r\n        cursor.continue();\r\n      }\r\n    }\r\n  };\r\n}\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"5-daily-top-scores-calculation",children:["5. ",(0,i.jsx)(n.strong,{children:"Daily Top Scores Calculation"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": Efficiently calculating the best score per day per language from all sessions."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"async getDailyTopScores(): Promise<DailyTopScore[]> {\r\n  const allSessions = await this.getAllSessions();\r\n  const dailyScores = new Map<string, TypingSession>();\r\n\r\n  // Group by date and language, keep best score\r\n  allSessions.forEach(session => {\r\n    const date = new Date(session.timestamp).toISOString().split('T')[0];\r\n    const key = `${date}_${session.language}`;\r\n    \r\n    const existing = dailyScores.get(key);\r\n    if (!existing || this.compareScores(session, existing) > 0) {\r\n      dailyScores.set(key, session);\r\n    }\r\n  });\r\n\r\n  return Array.from(dailyScores.values())\r\n    .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\r\n}\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"6-personal-best-tracking",children:["6. ",(0,i.jsx)(n.strong,{children:"Personal Best Tracking"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": Efficiently determining if a new session beats existing personal records."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Multi-criteria comparison function\r\nprivate compareScores(a: TypingSession, b: TypingSession): number {\r\n  // Primary: WPM (higher is better)\r\n  if (a.wpm !== b.wpm) return a.wpm - b.wpm;\r\n  \r\n  // Secondary: Accuracy (higher is better)\r\n  if (a.accuracy !== b.accuracy) return a.accuracy - b.accuracy;\r\n  \r\n  // Tertiary: Fewer errors (lower is better)\r\n  return b.errors - a.errors;\r\n}\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"7-typescript-integration",children:["7. ",(0,i.jsx)(n.strong,{children:"TypeScript Integration"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": Ensuring type safety across all components and database operations."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Defined comprehensive interfaces for all data structures"}),"\n",(0,i.jsx)(n.li,{children:"Used proper TypeScript generics for database operations"}),"\n",(0,i.jsx)(n.li,{children:"Implemented strict type checking for session data"}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"8-dark-mode-compatibility",children:["8. ",(0,i.jsx)(n.strong,{children:"Dark Mode Compatibility"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": Ensuring all new components work properly in both light and dark modes."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Used Tailwind's dark mode classes consistently"}),"\n",(0,i.jsxs)(n.li,{children:["Passed ",(0,i.jsx)(n.code,{children:"darkMode"})," prop through component hierarchy"]}),"\n",(0,i.jsx)(n.li,{children:"Tested all UI states in both themes"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"technical-decisions",children:"Technical Decisions"}),"\n",(0,i.jsxs)(n.h3,{id:"1-indexeddb-over-localstorage",children:["1. ",(0,i.jsx)(n.strong,{children:"IndexedDB over localStorage"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reason"}),": Domain isolation, larger capacity, better performance"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Trade-off"}),": Slightly more complex API, but wrapped in simple interface"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"2-modal-based-score-display",children:["2. ",(0,i.jsx)(n.strong,{children:"Modal-based Score Display"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reason"}),": Non-intrusive, focused user experience"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Trade-off"}),": Could have been a separate page, but modal keeps context"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"3-immediate-session-saving",children:["3. ",(0,i.jsx)(n.strong,{children:"Immediate Session Saving"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reason"}),": Prevents data loss, immediate feedback"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Trade-off"}),": Could batch saves, but immediate is more reliable"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"4-client-side-only-storage",children:["4. ",(0,i.jsx)(n.strong,{children:"Client-side Only Storage"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reason"}),": Simplicity, privacy, no backend required"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Trade-off"}),": No cross-device sync, but fits project scope"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"5-comprehensive-session-metadata",children:["5. ",(0,i.jsx)(n.strong,{children:"Comprehensive Session Metadata"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reason"}),": Rich analytics possibilities, future-proofing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Trade-off"}),": Larger storage footprint, but negligible impact"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"file-structure",children:"File Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"src/\r\n\u251c\u2500\u2500 components/\r\n\u2502   \u251c\u2500\u2500 CodeTyper.tsx              # Modified: Added session completion\r\n\u2502   \u251c\u2500\u2500 ScoreDisplay.tsx           # New: Score viewing with pagination\r\n\u2502   \u2514\u2500\u2500 SessionCompletionModal.tsx # New: Post-session feedback\r\n\u251c\u2500\u2500 utils/\r\n\u2502   \u2514\u2500\u2500 scoreDatabase.ts           # New: IndexedDB wrapper\r\n\u2514\u2500\u2500 App.tsx                        # Modified: Added scores button\n"})}),"\n",(0,i.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,i.jsx)(n.h3,{id:"scoredatabase-methods",children:"ScoreDatabase Methods"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Initialize database\r\nawait scoreDB.init(): Promise<void>\r\n\r\n// Save new session\r\nawait scoreDB.saveSession(session: Omit<TypingSession, 'id'>): Promise<string>\r\n\r\n// Get paginated sessions\r\nawait scoreDB.getAllSessions(limit?: number, offset?: number): Promise<TypingSession[]>\r\n\r\n// Get session count\r\nawait scoreDB.getTotalSessionCount(): Promise<number>\r\n\r\n// Get daily top scores\r\nawait scoreDB.getDailyTopScores(): Promise<DailyTopScore[]>\r\n\r\n// Get personal bests\r\nawait scoreDB.getPersonalBests(): Promise<PersonalBests>\r\n\r\n// Clear all data\r\nawait scoreDB.clearAllData(): Promise<void>\n"})}),"\n",(0,i.jsx)(n.h3,{id:"component-props",children:"Component Props"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// SessionCompletionModal\r\ninterface SessionCompletionModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  sessionData: SessionData | null;\r\n  darkMode: boolean;\r\n}\r\n\r\n// ScoreDisplay\r\ninterface ScoreDisplayProps {\r\n  darkMode: boolean;\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"future-improvements",children:"Future Improvements"}),"\n",(0,i.jsxs)(n.h3,{id:"1-data-exportimport",children:["1. ",(0,i.jsx)(n.strong,{children:"Data Export/Import"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Export user data\r\nasync exportData(): Promise<string> {\r\n  const sessions = await this.getAllSessions();\r\n  return JSON.stringify(sessions, null, 2);\r\n}\r\n\r\n// Import user data\r\nasync importData(jsonData: string): Promise<void> {\r\n  const sessions = JSON.parse(jsonData);\r\n  for (const session of sessions) {\r\n    await this.saveSession(session);\r\n  }\r\n}\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"2-advanced-analytics",children:["2. ",(0,i.jsx)(n.strong,{children:"Advanced Analytics"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Weekly/monthly progress charts"}),"\n",(0,i.jsx)(n.li,{children:"Language-specific improvement tracking"}),"\n",(0,i.jsx)(n.li,{children:"Error pattern analysis"}),"\n",(0,i.jsx)(n.li,{children:"Performance predictions"}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"3-achievement-system",children:["3. ",(0,i.jsx)(n.strong,{children:"Achievement System"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface Achievement {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  condition: (sessions: TypingSession[]) => boolean;\r\n  icon: string;\r\n  unlockedAt?: Date;\r\n}\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"4-cloud-sync-optional",children:["4. ",(0,i.jsx)(n.strong,{children:"Cloud Sync (Optional)"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Firebase/Supabase integration"}),"\n",(0,i.jsx)(n.li,{children:"Cross-device synchronization"}),"\n",(0,i.jsx)(n.li,{children:"Backup and restore functionality"}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"5-performance-optimizations",children:["5. ",(0,i.jsx)(n.strong,{children:"Performance Optimizations"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Virtual scrolling for large datasets"}),"\n",(0,i.jsx)(n.li,{children:"Background data processing"}),"\n",(0,i.jsx)(n.li,{children:"Caching strategies for frequently accessed data"}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"6-enhanced-filtering",children:["6. ",(0,i.jsx)(n.strong,{children:"Enhanced Filtering"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface FilterOptions {\r\n  language?: string;\r\n  source?: 'sample' | 'custom' | 'ai-generated';\r\n  dateRange?: { start: Date; end: Date };\r\n  minWpm?: number;\r\n  minAccuracy?: number;\r\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"The score logging implementation successfully addresses the requirements while providing a robust, scalable foundation for future enhancements. The use of IndexedDB ensures no conflicts with other applications on the domain, while the comprehensive UI provides users with detailed insights into their typing progress."}),"\n",(0,i.jsx)(n.p,{children:"The modular architecture makes it easy to extend functionality, and the TypeScript implementation ensures type safety throughout the application. The system is ready for production use and can handle thousands of typing sessions efficiently."})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);