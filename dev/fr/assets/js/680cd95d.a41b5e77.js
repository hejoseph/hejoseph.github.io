"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[5044],{8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>c});var t=i(6540);const s={},o=t.createContext(s);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(o.Provider,{value:n},e.children)}},8971:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"react/Code-Analysis-Tools/biome","title":"Why Some React Apps Use \\"lint\\": \\"npx biome lint --write && npx tsc --noEmit\\"","description":"This script combines two important tools in one command:","source":"@site/docs/react/Code-Analysis-Tools/biome.md","sourceDirName":"react/Code-Analysis-Tools","slug":"/react/Code-Analysis-Tools/biome","permalink":"/dev/fr/docs/react/Code-Analysis-Tools/biome","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Understanding React Portals: Why Your Modal Was Broken and How Portals Fixed It","permalink":"/dev/fr/docs/react/Bug-Encountered/react-portals-explained"},"next":{"title":"Integrating ESLint into Your React App","permalink":"/dev/fr/docs/react/Code-Analysis-Tools/lint"}}');var s=i(4848),o=i(8453);const r={},c='Why Some React Apps Use "lint": "npx biome lint --write && npx tsc --noEmit"',l={},a=[{value:"What is <code>biome</code>?",id:"what-is-biome",level:2},{value:"What is <code>tsc --noEmit</code>?",id:"what-is-tsc---noemit",level:2},{value:"Why combine them in a lint script?",id:"why-combine-them-in-a-lint-script",level:2},{value:"Benefits of this approach",id:"benefits-of-this-approach",level:2},{value:"Summary",id:"summary",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsxs)(n.h1,{id:"why-some-react-apps-use-lint-npx-biome-lint---write--npx-tsc---noemit",children:["Why Some React Apps Use ",(0,s.jsx)(n.code,{children:'"lint": "npx biome lint --write && npx tsc --noEmit"'})]})}),"\n",(0,s.jsx)(n.p,{children:"This script combines two important tools in one command:"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h2,{id:"what-is-biome",children:["What is ",(0,s.jsx)(n.code,{children:"biome"}),"?"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Biome"})," is a newer alternative to ESLint (and Prettier combined) \u2014 an all-in-one linter and formatter for JavaScript/TypeScript and related ecosystems."]}),"\n",(0,s.jsx)(n.li,{children:"It aims to provide faster, simpler, and more integrated linting and formatting compared to using ESLint + Prettier separately."}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"biome lint --write"})," lints your code and automatically fixes formatting and code style issues in-place."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h2,{id:"what-is-tsc---noemit",children:["What is ",(0,s.jsx)(n.code,{children:"tsc --noEmit"}),"?"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tsc"})," is the TypeScript compiler."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"--noEmit"})," flag tells ",(0,s.jsx)(n.code,{children:"tsc"})," to ",(0,s.jsx)(n.strong,{children:"only check types"}),", without generating any output files."]}),"\n",(0,s.jsx)(n.li,{children:"This is used to catch TypeScript type errors early, ensuring your code is type-safe."}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"why-combine-them-in-a-lint-script",children:"Why combine them in a lint script?"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'"lint": "npx biome lint --write && npx tsc --noEmit"\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["First, run ",(0,s.jsx)(n.code,{children:"biome lint --write"})," to fix stylistic and linting issues automatically."]}),"\n",(0,s.jsxs)(n.li,{children:["Then, run ",(0,s.jsx)(n.code,{children:"tsc --noEmit"})," to verify type correctness."]}),"\n",(0,s.jsxs)(n.li,{children:["Using ",(0,s.jsx)(n.code,{children:"&&"})," means the type check runs only if linting succeeds."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"benefits-of-this-approach",children:"Benefits of this approach"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Simplifies tooling:"})," Biome replaces separate ESLint + Prettier tools."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Ensures code quality:"})," Both style and type errors are checked."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Speeds up development:"})," Auto-fixing with Biome reduces manual formatting."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Modern tooling:"})," Biome is designed with modern JS/TS ecosystems in mind."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,s.jsx)(n.p,{children:"This script reflects a modern setup where linting and type-checking are combined into one command, making it easy to maintain clean, consistent, and type-safe React apps with minimal config."}),"\n",(0,s.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);