"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[1194],{3266:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"Portfolio/Timelock/development-guide/README","title":"Development Guide","description":"This guide shows you how to extend and modify the TimeLock application, providing practical examples and best practices for Angular development.","source":"@site/docs/Portfolio/Timelock/development-guide/README.md","sourceDirName":"Portfolio/Timelock/development-guide","slug":"/Portfolio/Timelock/development-guide/","permalink":"/dev/fr/docs/Portfolio/Timelock/development-guide/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Code Structure","permalink":"/dev/fr/docs/Portfolio/Timelock/code-structure/"},"next":{"title":"Features Overview","permalink":"/dev/fr/docs/Portfolio/Timelock/features/"}}');var s=t(4848),i=t(8453);const o={},a="Development Guide",d={},l=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Development Workflow",id:"development-workflow",level:2},{value:"Setting Up Your Environment",id:"setting-up-your-environment",level:3},{value:"Making Changes",id:"making-changes",level:3},{value:"Adding New Features",id:"adding-new-features",level:2},{value:"Example: Adding a &quot;Notes&quot; Feature to Tasks",id:"example-adding-a-notes-feature-to-tasks",level:3},{value:"Step 1: Update the Data Model",id:"step-1-update-the-data-model",level:4},{value:"Step 2: Update the Service",id:"step-2-update-the-service",level:4},{value:"Step 3: Create Notes Component",id:"step-3-create-notes-component",level:4},{value:"Step 4: Integrate with TodoItem Component",id:"step-4-integrate-with-todoitem-component",level:4},{value:"Step 5: Update Database Schema",id:"step-5-update-database-schema",level:4},{value:"Example: Adding a New Page",id:"example-adding-a-new-page",level:3},{value:"Step 1: Generate the Component",id:"step-1-generate-the-component",level:4},{value:"Step 2: Create the Statistics Component",id:"step-2-create-the-statistics-component",level:4},{value:"Step 3: Add Route",id:"step-3-add-route",level:4},{value:"Step 4: Add Navigation Link",id:"step-4-add-navigation-link",level:4},{value:"Modifying Existing Features",id:"modifying-existing-features",level:2},{value:"Example: Adding Priority Colors to Tasks",id:"example-adding-priority-colors-to-tasks",level:3},{value:"Step 1: Update Component Styles",id:"step-1-update-component-styles",level:4},{value:"Step 2: Add Priority Indicator",id:"step-2-add-priority-indicator",level:4},{value:"Example: Adding Keyboard Shortcuts",id:"example-adding-keyboard-shortcuts",level:3},{value:"Step 1: Create Keyboard Service",id:"step-1-create-keyboard-service",level:4},{value:"Step 2: Use in Components",id:"step-2-use-in-components",level:4},{value:"Working with Signals",id:"working-with-signals",level:2},{value:"Creating Reactive State",id:"creating-reactive-state",level:3},{value:"Signal Best Practices",id:"signal-best-practices",level:3},{value:"Database Operations",id:"database-operations",level:2},{value:"Adding New Data Types",id:"adding-new-data-types",level:3},{value:"Data Migration",id:"data-migration",level:3},{value:"Component Development",id:"component-development",level:2},{value:"Component Lifecycle",id:"component-lifecycle",level:3},{value:"Component Communication",id:"component-communication",level:3},{value:"Testing Your Changes",id:"testing-your-changes",level:2},{value:"Unit Testing",id:"unit-testing",level:3},{value:"E2E Testing",id:"e2e-testing",level:3},{value:"Manual Testing Checklist",id:"manual-testing-checklist",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Code Organization",id:"code-organization",level:3},{value:"Performance",id:"performance",level:3},{value:"Accessibility",id:"accessibility",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"development-guide",children:"Development Guide"})}),"\n",(0,s.jsx)(n.p,{children:"This guide shows you how to extend and modify the TimeLock application, providing practical examples and best practices for Angular development."}),"\n",(0,s.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#development-workflow",children:"Development Workflow"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#adding-new-features",children:"Adding New Features"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#modifying-existing-features",children:"Modifying Existing Features"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#working-with-signals",children:"Working with Signals"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#database-operations",children:"Database Operations"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#component-development",children:"Component Development"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#testing-your-changes",children:"Testing Your Changes"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#best-practices",children:"Best Practices"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"development-workflow",children:"Development Workflow"}),"\n",(0,s.jsx)(n.h3,{id:"setting-up-your-environment",children:"Setting Up Your Environment"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Start the development server:"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm start\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Open your browser to:"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"http://localhost:4200\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Open your code editor:"})}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Recommended: Visual Studio Code with Angular Language Service"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"making-changes",children:"Making Changes"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Edit files"})," in ",(0,s.jsx)(n.code,{children:"src/app/"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Save changes"})," - Angular CLI automatically recompiles"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Check browser"})," - Changes appear automatically"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Test functionality"})," - Verify your changes work"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Commit changes"})," when satisfied"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"adding-new-features",children:"Adding New Features"}),"\n",(0,s.jsx)(n.h3,{id:"example-adding-a-notes-feature-to-tasks",children:'Example: Adding a "Notes" Feature to Tasks'}),"\n",(0,s.jsx)(n.p,{children:"Let's walk through adding a notes feature that allows users to add rich text notes to tasks."}),"\n",(0,s.jsx)(n.h4,{id:"step-1-update-the-data-model",children:"Step 1: Update the Data Model"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/app/models/todo.model.ts\r\nexport interface Todo {\r\n  // ... existing properties\r\n  notes?: string;  // Add this new property\r\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"step-2-update-the-service",children:"Step 2: Update the Service"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/app/services/todo.service.ts\r\nexport class TodoService {\r\n  // Add method to update notes\r\n  async updateTodoNotes(id: string, notes: string): Promise<void> {\r\n    await this.updateTodo(id, { notes, updatedAt: new Date() });\r\n  }\r\n  \r\n  // Add computed signal for todos with notes\r\n  todosWithNotes = computed(() => \r\n    this.todosSignal().filter(todo => todo.notes && todo.notes.trim().length > 0)\r\n  );\r\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"step-3-create-notes-component",children:"Step 3: Create Notes Component"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"ng generate component components/todo-notes\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// src/app/components/todo-notes/todo-notes.component.ts\r\n@Component({\r\n  selector: \'app-todo-notes\',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule],\r\n  template: `\r\n    <div class="notes-container">\r\n      <label for="notes">Notes:</label>\r\n      <textarea \r\n        id="notes"\r\n        [(ngModel)]="notes"\r\n        (blur)="saveNotes()"\r\n        placeholder="Add notes for this task..."\r\n        class="notes-textarea">\r\n      </textarea>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .notes-container {\r\n      margin-top: 1rem;\r\n    }\r\n    \r\n    .notes-textarea {\r\n      width: 100%;\r\n      min-height: 100px;\r\n      padding: 0.5rem;\r\n      border: 1px solid #d1d5db;\r\n      border-radius: 0.375rem;\r\n      resize: vertical;\r\n    }\r\n  `]\r\n})\r\nexport class TodoNotesComponent {\r\n  @Input() todo!: Todo;\r\n  @Output() notesUpdated = new EventEmitter<string>();\r\n  \r\n  notes = \'\';\r\n  \r\n  ngOnInit() {\r\n    this.notes = this.todo.notes || \'\';\r\n  }\r\n  \r\n  saveNotes() {\r\n    if (this.notes !== this.todo.notes) {\r\n      this.notesUpdated.emit(this.notes);\r\n    }\r\n  }\r\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"step-4-integrate-with-todoitem-component",children:"Step 4: Integrate with TodoItem Component"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// src/app/components/todo-item/todo-item.component.ts\r\n@Component({\r\n  // ... existing configuration\r\n  imports: [CommonModule, FormsModule, TaskEditorComponent, TodoNotesComponent],\r\n  template: `\r\n    \x3c!-- Existing todo item content --\x3e\r\n    \r\n    \x3c!-- Add notes section --\x3e\r\n    <app-todo-notes \r\n      *ngIf="showNotes()"\r\n      [todo]="todo"\r\n      (notesUpdated)="updateNotes($event)">\r\n    </app-todo-notes>\r\n    \r\n    \x3c!-- Add toggle button --\x3e\r\n    <button \r\n      class="notes-toggle"\r\n      (click)="toggleNotes()"\r\n      [class.active]="showNotes()">\r\n      \ud83d\udcdd Notes\r\n    </button>\r\n  `\r\n})\r\nexport class TodoItemComponent {\r\n  // ... existing properties\r\n  showNotes = signal(false);\r\n  \r\n  toggleNotes() {\r\n    this.showNotes.update(show => !show);\r\n  }\r\n  \r\n  updateNotes(notes: string) {\r\n    this.todoUpdated.emit({\r\n      ...this.todo,\r\n      notes,\r\n      updatedAt: new Date()\r\n    });\r\n  }\r\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"step-5-update-database-schema",children:"Step 5: Update Database Schema"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/app/services/indexeddb.service.ts\r\nexport class IndexedDBService {\r\n  // The notes field will be automatically saved as part of the Todo object\r\n  // No schema changes needed for simple field additions\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"example-adding-a-new-page",children:"Example: Adding a New Page"}),"\n",(0,s.jsx)(n.p,{children:'Let\'s add a "Statistics" page that shows task completion analytics.'}),"\n",(0,s.jsx)(n.h4,{id:"step-1-generate-the-component",children:"Step 1: Generate the Component"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"ng generate component pages/statistics\n"})}),"\n",(0,s.jsx)(n.h4,{id:"step-2-create-the-statistics-component",children:"Step 2: Create the Statistics Component"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// src/app/pages/statistics/statistics.component.ts\r\n@Component({\r\n  selector: \'app-statistics\',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: `\r\n    <div class="statistics-page">\r\n      <h1>Task Statistics</h1>\r\n      \r\n      <div class="stats-grid">\r\n        <div class="stat-card">\r\n          <h3>Total Tasks</h3>\r\n          <p class="stat-number">{{totalTasks()}}</p>\r\n        </div>\r\n        \r\n        <div class="stat-card">\r\n          <h3>Completed Tasks</h3>\r\n          <p class="stat-number">{{completedTasks()}}</p>\r\n        </div>\r\n        \r\n        <div class="stat-card">\r\n          <h3>Completion Rate</h3>\r\n          <p class="stat-number">{{completionRate()}}%</p>\r\n        </div>\r\n        \r\n        <div class="stat-card">\r\n          <h3>Average Tasks per Day</h3>\r\n          <p class="stat-number">{{averageTasksPerDay()}}</p>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class="charts-section">\r\n        \x3c!-- Add charts here --\x3e\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .statistics-page {\r\n      padding: 2rem;\r\n    }\r\n    \r\n    .stats-grid {\r\n      display: grid;\r\n      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n      gap: 1rem;\r\n      margin: 2rem 0;\r\n    }\r\n    \r\n    .stat-card {\r\n      background: white;\r\n      padding: 1.5rem;\r\n      border-radius: 0.5rem;\r\n      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n      text-align: center;\r\n    }\r\n    \r\n    .stat-number {\r\n      font-size: 2rem;\r\n      font-weight: bold;\r\n      color: #3b82f6;\r\n      margin: 0.5rem 0;\r\n    }\r\n  `]\r\n})\r\nexport class StatisticsComponent {\r\n  private todoService = inject(TodoService);\r\n  \r\n  todos = this.todoService.todos;\r\n  \r\n  totalTasks = computed(() => this.todos().length);\r\n  \r\n  completedTasks = computed(() => \r\n    this.todos().filter(todo => todo.completed).length\r\n  );\r\n  \r\n  completionRate = computed(() => {\r\n    const total = this.totalTasks();\r\n    const completed = this.completedTasks();\r\n    return total > 0 ? Math.round((completed / total) * 100) : 0;\r\n  });\r\n  \r\n  averageTasksPerDay = computed(() => {\r\n    const todos = this.todos();\r\n    if (todos.length === 0) return 0;\r\n    \r\n    const oldestTask = todos.reduce((oldest, todo) => \r\n      todo.createdAt < oldest.createdAt ? todo : oldest\r\n    );\r\n    \r\n    const daysSinceOldest = Math.ceil(\r\n      (Date.now() - oldestTask.createdAt.getTime()) / (1000 * 60 * 60 * 24)\r\n    );\r\n    \r\n    return Math.round(todos.length / Math.max(daysSinceOldest, 1));\r\n  });\r\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"step-3-add-route",children:"Step 3: Add Route"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/app/app.routes.ts\r\nexport const routes: Routes = [\r\n  // ... existing routes\r\n  {\r\n    path: 'statistics',\r\n    loadComponent: () => import('./pages/statistics/statistics.component')\r\n      .then(m => m.StatisticsComponent)\r\n  },\r\n  // ... rest of routes\r\n];\n"})}),"\n",(0,s.jsx)(n.h4,{id:"step-4-add-navigation-link",children:"Step 4: Add Navigation Link"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// src/app/app.ts - Add to sidebar navigation\r\ntemplate: `\r\n  <nav class="sidebar-nav">\r\n    \x3c!-- Existing navigation items --\x3e\r\n    <a routerLink="/statistics" \r\n       routerLinkActive="active" \r\n       class="nav-item">\r\n      \ud83d\udcca Statistics\r\n    </a>\r\n  </nav>\r\n`\n'})}),"\n",(0,s.jsx)(n.h2,{id:"modifying-existing-features",children:"Modifying Existing Features"}),"\n",(0,s.jsx)(n.h3,{id:"example-adding-priority-colors-to-tasks",children:"Example: Adding Priority Colors to Tasks"}),"\n",(0,s.jsx)(n.h4,{id:"step-1-update-component-styles",children:"Step 1: Update Component Styles"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// src/app/components/todo-item/todo-item.component.ts\r\n@Component({\r\n  template: `\r\n    <div class="todo-item" [class]="getPriorityClass()">\r\n      \x3c!-- existing content --\x3e\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .todo-item.priority-high {\r\n      border-left: 4px solid #ef4444;\r\n    }\r\n    \r\n    .todo-item.priority-medium {\r\n      border-left: 4px solid #f59e0b;\r\n    }\r\n    \r\n    .todo-item.priority-low {\r\n      border-left: 4px solid #10b981;\r\n    }\r\n  `]\r\n})\r\nexport class TodoItemComponent {\r\n  getPriorityClass(): string {\r\n    return `priority-${this.todo.priority}`;\r\n  }\r\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"step-2-add-priority-indicator",children:"Step 2: Add Priority Indicator"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"template: `\r\n  <div class=\"todo-item\" [class]=\"getPriorityClass()\">\r\n    <span class=\"priority-indicator\" [class]=\"getPriorityClass()\">\r\n      {{getPriorityIcon()}}\r\n    </span>\r\n    \x3c!-- rest of content --\x3e\r\n  </div>\r\n`\r\n\r\ngetPriorityIcon(): string {\r\n  switch (this.todo.priority) {\r\n    case 'high': return '\ud83d\udd34';\r\n    case 'medium': return '\ud83d\udfe1';\r\n    case 'low': return '\ud83d\udfe2';\r\n    default: return '';\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"example-adding-keyboard-shortcuts",children:"Example: Adding Keyboard Shortcuts"}),"\n",(0,s.jsx)(n.h4,{id:"step-1-create-keyboard-service",children:"Step 1: Create Keyboard Service"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"ng generate service services/keyboard\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/app/services/keyboard.service.ts\r\n@Injectable({ providedIn: 'root' })\r\nexport class KeyboardService {\r\n  private shortcuts = new Map<string, () => void>();\r\n  \r\n  constructor() {\r\n    this.setupGlobalListeners();\r\n  }\r\n  \r\n  registerShortcut(key: string, callback: () => void): void {\r\n    this.shortcuts.set(key, callback);\r\n  }\r\n  \r\n  unregisterShortcut(key: string): void {\r\n    this.shortcuts.delete(key);\r\n  }\r\n  \r\n  private setupGlobalListeners(): void {\r\n    document.addEventListener('keydown', (event) => {\r\n      const key = this.getKeyString(event);\r\n      const callback = this.shortcuts.get(key);\r\n      \r\n      if (callback) {\r\n        event.preventDefault();\r\n        callback();\r\n      }\r\n    });\r\n  }\r\n  \r\n  private getKeyString(event: KeyboardEvent): string {\r\n    const parts = [];\r\n    \r\n    if (event.ctrlKey) parts.push('ctrl');\r\n    if (event.altKey) parts.push('alt');\r\n    if (event.shiftKey) parts.push('shift');\r\n    \r\n    parts.push(event.key.toLowerCase());\r\n    \r\n    return parts.join('+');\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"step-2-use-in-components",children:"Step 2: Use in Components"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/app/pages/project-detail/project-detail.component.ts\r\nexport class ProjectDetailComponent {\r\n  private keyboardService = inject(KeyboardService);\r\n  \r\n  ngOnInit() {\r\n    // Register shortcuts\r\n    this.keyboardService.registerShortcut('ctrl+n', () => this.addNewTask());\r\n    this.keyboardService.registerShortcut('ctrl+f', () => this.focusSearch());\r\n    this.keyboardService.registerShortcut('escape', () => this.clearSelection());\r\n  }\r\n  \r\n  ngOnDestroy() {\r\n    // Clean up shortcuts\r\n    this.keyboardService.unregisterShortcut('ctrl+n');\r\n    this.keyboardService.unregisterShortcut('ctrl+f');\r\n    this.keyboardService.unregisterShortcut('escape');\r\n  }\r\n  \r\n  addNewTask() {\r\n    // Implementation\r\n  }\r\n  \r\n  focusSearch() {\r\n    // Implementation\r\n  }\r\n  \r\n  clearSelection() {\r\n    // Implementation\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"working-with-signals",children:"Working with Signals"}),"\n",(0,s.jsx)(n.h3,{id:"creating-reactive-state",children:"Creating Reactive State"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"export class MyComponent {\r\n  // Simple signal\r\n  count = signal(0);\r\n  \r\n  // Signal with object\r\n  user = signal<User | null>(null);\r\n  \r\n  // Computed signal\r\n  doubleCount = computed(() => this.count() * 2);\r\n  \r\n  // Effect (side effects)\r\n  constructor() {\r\n    effect(() => {\r\n      console.log('Count changed:', this.count());\r\n    });\r\n  }\r\n  \r\n  // Update signals\r\n  increment() {\r\n    this.count.update(value => value + 1);\r\n  }\r\n  \r\n  setUser(user: User) {\r\n    this.user.set(user);\r\n  }\r\n  \r\n  updateUser(updates: Partial<User>) {\r\n    this.user.update(current => \r\n      current ? { ...current, ...updates } : null\r\n    );\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"signal-best-practices",children:"Signal Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Use readonly signals for public API:"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"private dataSignal = signal<Data[]>([]);\r\npublic data = this.dataSignal.asReadonly();\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Prefer computed over manual updates:"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Good\r\nfilteredData = computed(() => \r\n  this.data().filter(item => item.active)\r\n);\r\n\r\n// Avoid\r\nupdateFilteredData() {\r\n  this.filteredData.set(this.data().filter(item => item.active));\r\n}\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Use effects sparingly:"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Good - for side effects only\r\neffect(() => {\r\n  console.log('Data changed:', this.data().length);\r\n});\r\n\r\n// Avoid - use computed instead\r\neffect(() => {\r\n  this.filteredData.set(this.data().filter(item => item.active));\r\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"database-operations",children:"Database Operations"}),"\n",(0,s.jsx)(n.h3,{id:"adding-new-data-types",children:"Adding New Data Types"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// 1. Update IndexedDB schema\r\nprivate createObjectStores(db: IDBDatabase): void {\r\n  // Add new object store\r\n  if (!db.objectStoreNames.contains('notes')) {\r\n    const notesStore = db.createObjectStore('notes', { keyPath: 'id' });\r\n    notesStore.createIndex('todoId', 'todoId', { unique: false });\r\n  }\r\n}\r\n\r\n// 2. Add service methods\r\nasync saveNotes(notes: Note[]): Promise<void> {\r\n  const transaction = this.db!.transaction(['notes'], 'readwrite');\r\n  const store = transaction.objectStore('notes');\r\n  \r\n  for (const note of notes) {\r\n    await store.put(note);\r\n  }\r\n}\r\n\r\nasync loadNotes(): Promise<Note[]> {\r\n  const transaction = this.db!.transaction(['notes'], 'readonly');\r\n  const store = transaction.objectStore('notes');\r\n  const request = store.getAll();\r\n  \r\n  return new Promise((resolve, reject) => {\r\n    request.onsuccess = () => resolve(request.result || []);\r\n    request.onerror = () => reject(request.error);\r\n  });\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"data-migration",children:"Data Migration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Handle version upgrades\r\nrequest.onupgradeneeded = (event) => {\r\n  const db = (event.target as IDBOpenDBRequest).result;\r\n  const oldVersion = event.oldVersion;\r\n  \r\n  if (oldVersion < 2) {\r\n    // Migration from version 1 to 2\r\n    this.migrateToV2(db);\r\n  }\r\n  \r\n  if (oldVersion < 3) {\r\n    // Migration from version 2 to 3\r\n    this.migrateToV3(db);\r\n  }\r\n};\r\n\r\nprivate migrateToV2(db: IDBDatabase): void {\r\n  // Add new fields to existing data\r\n  const transaction = db.transaction(['todos'], 'readwrite');\r\n  const store = transaction.objectStore('todos');\r\n  \r\n  store.openCursor().onsuccess = (event) => {\r\n    const cursor = (event.target as IDBRequest).result;\r\n    if (cursor) {\r\n      const todo = cursor.value;\r\n      todo.notes = '';  // Add new field\r\n      cursor.update(todo);\r\n      cursor.continue();\r\n    }\r\n  };\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"component-development",children:"Component Development"}),"\n",(0,s.jsx)(n.h3,{id:"component-lifecycle",children:"Component Lifecycle"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"export class MyComponent implements OnInit, OnDestroy {\r\n  private subscription = new Subscription();\r\n  \r\n  ngOnInit() {\r\n    // Initialize component\r\n    this.loadData();\r\n    this.setupSubscriptions();\r\n  }\r\n  \r\n  ngOnDestroy() {\r\n    // Cleanup\r\n    this.subscription.unsubscribe();\r\n  }\r\n  \r\n  private setupSubscriptions() {\r\n    // Note: With signals, you often don't need subscriptions\r\n    // But for external observables:\r\n    this.subscription.add(\r\n      this.externalService.data$.subscribe(data => {\r\n        // Handle data\r\n      })\r\n    );\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"component-communication",children:"Component Communication"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Child component\r\n@Component({\r\n  selector: 'app-child',\r\n  template: `\r\n    <button (click)=\"sendData()\">Send Data</button>\r\n  `\r\n})\r\nexport class ChildComponent {\r\n  @Input() inputData!: any;\r\n  @Output() dataChanged = new EventEmitter<any>();\r\n  \r\n  sendData() {\r\n    this.dataChanged.emit({ message: 'Hello from child' });\r\n  }\r\n}\r\n\r\n// Parent component\r\n@Component({\r\n  template: `\r\n    <app-child \r\n      [inputData]=\"parentData\"\r\n      (dataChanged)=\"handleChildData($event)\">\r\n    </app-child>\r\n  `\r\n})\r\nexport class ParentComponent {\r\n  parentData = { value: 'Hello child' };\r\n  \r\n  handleChildData(data: any) {\r\n    console.log('Received from child:', data);\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"testing-your-changes",children:"Testing Your Changes"}),"\n",(0,s.jsx)(n.h3,{id:"unit-testing",children:"Unit Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Component test\r\ndescribe('TodoItemComponent', () => {\r\n  let component: TodoItemComponent;\r\n  let fixture: ComponentFixture<TodoItemComponent>;\r\n  let mockTodoService: jasmine.SpyObj<TodoService>;\r\n\r\n  beforeEach(async () => {\r\n    const spy = jasmine.createSpyObj('TodoService', ['updateTodo']);\r\n\r\n    await TestBed.configureTestingModule({\r\n      imports: [TodoItemComponent],\r\n      providers: [\r\n        { provide: TodoService, useValue: spy }\r\n      ]\r\n    }).compileComponents();\r\n\r\n    fixture = TestBed.createComponent(TodoItemComponent);\r\n    component = fixture.componentInstance;\r\n    mockTodoService = TestBed.inject(TodoService) as jasmine.SpyObj<TodoService>;\r\n    \r\n    component.todo = {\r\n      id: '1',\r\n      title: 'Test Todo',\r\n      completed: false,\r\n      // ... other required properties\r\n    };\r\n    \r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should toggle completion', () => {\r\n    component.toggleComplete();\r\n    expect(component.todoUpdated.emit).toHaveBeenCalledWith(\r\n      jasmine.objectContaining({ completed: true })\r\n    );\r\n  });\r\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"e2e-testing",children:"E2E Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// e2e test\r\ntest('should add a new todo', async ({ page }) => {\r\n  await page.goto('/projects');\r\n  \r\n  // Click on first project\r\n  await page.click('[data-testid=\"project-card\"]:first-child');\r\n  \r\n  // Add new todo\r\n  await page.fill('[data-testid=\"todo-input\"]', 'New test todo');\r\n  await page.click('[data-testid=\"add-todo-button\"]');\r\n  \r\n  // Verify todo appears\r\n  await expect(page.locator('[data-testid=\"todo-item\"]').last())\r\n    .toContainText('New test todo');\r\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"manual-testing-checklist",children:"Manual Testing Checklist"}),"\n",(0,s.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Feature works as expected"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","No console errors"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Responsive design works"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Data persists after page reload"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Error handling works"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Performance is acceptable"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"code-organization",children:"Code Organization"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Follow the folder structure:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Components in ",(0,s.jsx)(n.code,{children:"components/"})]}),"\n",(0,s.jsxs)(n.li,{children:["Pages in ",(0,s.jsx)(n.code,{children:"pages/"})]}),"\n",(0,s.jsxs)(n.li,{children:["Services in ",(0,s.jsx)(n.code,{children:"services/"})]}),"\n",(0,s.jsxs)(n.li,{children:["Models in ",(0,s.jsx)(n.code,{children:"models/"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Use meaningful names:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Good\r\ngetUserTodos()\r\nisTaskOverdue()\r\ncalculateCompletionPercentage()\r\n\r\n// Avoid\r\ngetData()\r\ncheck()\r\ncalc()\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Keep components focused:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Single responsibility"}),"\n",(0,s.jsx)(n.li,{children:"Small, manageable size"}),"\n",(0,s.jsx)(n.li,{children:"Clear inputs and outputs"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"performance",children:"Performance"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Use OnPush change detection:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"@Component({\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Lazy load routes:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"{\r\n  path: 'feature',\r\n  loadComponent: () => import('./feature.component')\r\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Use trackBy for lists:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<div *ngFor="let item of items; trackBy: trackByFn">\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"accessibility",children:"Accessibility"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Use semantic HTML:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<button type="button">Action</button>\r\n<nav aria-label="Main navigation">\r\n<main role="main">\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Add ARIA labels:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<button aria-label="Delete task">\ud83d\uddd1\ufe0f</button>\r\n<input aria-describedby="help-text">\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Ensure keyboard navigation:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"@HostListener('keydown', ['$event'])\r\nonKeyDown(event: KeyboardEvent) {\r\n  if (event.key === 'Enter') {\r\n    this.activate();\r\n  }\r\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Handle async operations:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"async saveData() {\r\n  try {\r\n    await this.service.save(this.data);\r\n    this.showSuccess('Data saved');\r\n  } catch (error) {\r\n    this.showError('Failed to save data');\r\n    console.error(error);\r\n  }\r\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Validate user input:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"validateInput(value: string): boolean {\r\n  return value && value.trim().length > 0;\r\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Provide user feedback:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"isLoading = signal(false);\r\nerrorMessage = signal<string | null>(null);\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsx)(n.p,{children:"You now have the knowledge to:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Add new features"})," to TimeLock"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Modify existing functionality"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Work with Angular signals"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Handle data persistence"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Test your changes"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Start with small changes and gradually work on more complex features. The TimeLock codebase provides excellent examples of modern Angular patterns that you can learn from and extend."}),"\n",(0,s.jsx)(n.p,{children:"Happy coding! \ud83d\ude80"})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(6540);const s={},i=r.createContext(s);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);