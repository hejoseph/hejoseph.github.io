"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[3324],{8074:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"Portfolio/NoteApp/Api/endpoints","title":"API Endpoints","description":"Overview","source":"@site/docs/Portfolio/NoteApp/Api/endpoints.md","sourceDirName":"Portfolio/NoteApp/Api","slug":"/Portfolio/NoteApp/Api/endpoints","permalink":"/dev/fr/docs/Portfolio/NoteApp/Api/endpoints","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Authentication System","permalink":"/dev/fr/docs/Portfolio/NoteApp/Api/authentication"},"next":{"title":"Database Models","permalink":"/dev/fr/docs/Portfolio/NoteApp/Database/models"}}');var t=r(4848),i=r(8453);const o={},a="API Endpoints",d={},l=[{value:"Overview",id:"overview",level:2},{value:"What is a REST API?",id:"what-is-a-rest-api",level:2},{value:"Server Configuration",id:"server-configuration",level:2},{value:"Middleware Setup",id:"middleware-setup",level:3},{value:"User Management Endpoints",id:"user-management-endpoints",level:2},{value:"Create Account",id:"create-account",level:3},{value:"Request Format",id:"request-format",level:4},{value:"Response Format",id:"response-format",level:4},{value:"User Login",id:"user-login",level:3},{value:"Key Features",id:"key-features",level:4},{value:"Get User Information",id:"get-user-information",level:3},{value:"Note Management Endpoints",id:"note-management-endpoints",level:2},{value:"Create Note",id:"create-note",level:3},{value:"Request Format",id:"request-format-1",level:4},{value:"Edit Note",id:"edit-note",level:3},{value:"Key Features",id:"key-features-1",level:4},{value:"Delete Note",id:"delete-note",level:3},{value:"Pin/Unpin Note",id:"pinunpin-note",level:3},{value:"Get All Notes",id:"get-all-notes",level:3},{value:"Key Features",id:"key-features-2",level:4},{value:"Search Notes",id:"search-notes",level:3},{value:"Search Features",id:"search-features",level:4},{value:"HTTP Status Codes Used",id:"http-status-codes-used",level:2},{value:"Error Response Format",id:"error-response-format",level:2},{value:"Connection to Other Components",id:"connection-to-other-components",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"api-endpoints",children:"API Endpoints"})}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"The Notes App backend provides a RESTful API with endpoints for user management and note operations. All endpoints return JSON responses and follow standard HTTP status codes for success and error handling."}),"\n",(0,t.jsx)(n.h2,{id:"what-is-a-rest-api",children:"What is a REST API?"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"REST (Representational State Transfer)"})," is an architectural style for web services that uses:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"HTTP methods"})," (GET, POST, PUT, DELETE) to indicate the type of operation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"URLs"})," to identify resources (users, notes)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"JSON"})," for data exchange"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Status codes"})," to indicate success or failure"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"server-configuration",children:"Server Configuration"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"File"}),": ",(0,t.jsx)(n.code,{children:"backend/index.js"})]}),"\n",(0,t.jsxs)(n.p,{children:["The server is built using ",(0,t.jsx)(n.strong,{children:"Express.js"}),", a web framework for Node.js:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'const express = require("express");\r\nconst cors = require("cors");\r\nconst app = express();\r\n\r\napp.use(express.json());\r\napp.use(cors({ origin: "*" }));\r\n\r\napp.listen(8000);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"middleware-setup",children:"Middleware Setup"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"express.json()"})}),": Parses incoming JSON request bodies"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:'cors({ origin: "*" })'})}),": Enables Cross-Origin Resource Sharing from any domain"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"app.listen(8000)"})}),": Starts the server on port 8000"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"user-management-endpoints",children:"User Management Endpoints"}),"\n",(0,t.jsx)(n.h3,{id:"create-account",children:"Create Account"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Endpoint"}),": ",(0,t.jsx)(n.code,{children:"POST /create-account"}),"\r\n",(0,t.jsx)(n.strong,{children:"Authentication"}),": None required"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'app.post("/create-account", async (req, res) => {\r\n  const { fullName, email, password } = req.body;\r\n  \r\n  // Validation\r\n  if (!fullName) {\r\n    return res.status(400).json({ error: true, message: "Full Name is required" });\r\n  }\r\n  \r\n  // Check for existing user\r\n  const isUser = await User.findOne({ email: email });\r\n  if (isUser) {\r\n    return res.json({ error: true, message: "User already exists" });\r\n  }\r\n  \r\n  // Create and save user\r\n  const user = new User({ fullName, email, password });\r\n  await user.save();\r\n  \r\n  // Generate JWT token\r\n  const accessToken = jwt.sign({ user }, process.env.ACCESS_TOKEN_SECRET, {\r\n    expiresIn: "36000m",\r\n  });\r\n  \r\n  return res.json({\r\n    error: false,\r\n    user,\r\n    accessToken,\r\n    message: "Registration Successful",\r\n  });\r\n});\n'})}),"\n",(0,t.jsx)(n.h4,{id:"request-format",children:"Request Format"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n  "fullName": "John Doe",\r\n  "email": "john@example.com",\r\n  "password": "password123"\r\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"response-format",children:"Response Format"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n  "error": false,\r\n  "user": { "fullName": "John Doe", "email": "john@example.com", "_id": "..." },\r\n  "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",\r\n  "message": "Registration Successful"\r\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"user-login",children:"User Login"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Endpoint"}),": ",(0,t.jsx)(n.code,{children:"POST /login"}),"\r\n",(0,t.jsx)(n.strong,{children:"Authentication"}),": None required"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'app.post("/login", async (req, res) => {\r\n  const { email, password } = req.body;\r\n  \r\n  const userInfo = await User.findOne({ email: email });\r\n  \r\n  if (userInfo.email == email && userInfo.password == password) {\r\n    const user = { user: userInfo };\r\n    const accessToken = jwt.sign(user, process.env.ACCESS_TOKEN_SECRET, {\r\n      expiresIn: "36000m",\r\n    });\r\n    \r\n    return res.json({\r\n      error: false,\r\n      message: "Login Successful",\r\n      email,\r\n      accessToken,\r\n    });\r\n  } else {\r\n    return res.status(400).json({\r\n      error: true,\r\n      message: "Invalid Credentials",\r\n    });\r\n  }\r\n});\n'})}),"\n",(0,t.jsx)(n.h4,{id:"key-features",children:"Key Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Plain text password comparison"})," (security concern)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"JWT token generation"})," on successful login"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Error handling"})," for invalid credentials"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"get-user-information",children:"Get User Information"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Endpoint"}),": ",(0,t.jsx)(n.code,{children:"GET /get-user"}),"\r\n",(0,t.jsx)(n.strong,{children:"Authentication"}),": Required (JWT token)"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'app.get("/get-user", authenticateToken, async (req, res) => {\r\n  const { user } = req.user;\r\n  const isUser = await User.findOne({ _id: user._id });\r\n  \r\n  return res.json({\r\n    user: {\r\n      fullName: isUser.fullName,\r\n      email: isUser.email,\r\n      _id: isUser._id,\r\n      createdOn: isUser.createOn,\r\n    },\r\n    message: "",\r\n  });\r\n});\n'})}),"\n",(0,t.jsx)(n.h2,{id:"note-management-endpoints",children:"Note Management Endpoints"}),"\n",(0,t.jsx)(n.h3,{id:"create-note",children:"Create Note"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Endpoint"}),": ",(0,t.jsx)(n.code,{children:"POST /add-note"}),"\r\n",(0,t.jsx)(n.strong,{children:"Authentication"}),": Required"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'app.post("/add-note", authenticateToken, async (req, res) => {\r\n  const { title, content, tags } = req.body;\r\n  const { user } = req.user;\r\n  \r\n  if (!title) {\r\n    return res.status(400).json({ message: "Title is required" });\r\n  }\r\n  \r\n  if (!content) {\r\n    return res.status(400).json({ message: "content is required" });\r\n  }\r\n  \r\n  try {\r\n    const note = new Note({\r\n      title,\r\n      content,\r\n      tags: tags || [],\r\n      userId: user._id,\r\n    });\r\n    \r\n    await note.save();\r\n    \r\n    return res.json({\r\n      error: false,\r\n      note,\r\n      message: "Note added successfully",\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({\r\n      error: true,\r\n      message: "Internal Server Error",\r\n    });\r\n  }\r\n});\n'})}),"\n",(0,t.jsx)(n.h4,{id:"request-format-1",children:"Request Format"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n  "title": "Meeting Notes",\r\n  "content": "Discussed project timeline and deliverables",\r\n  "tags": ["work", "meeting"]\r\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"edit-note",children:"Edit Note"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Endpoint"}),": ",(0,t.jsx)(n.code,{children:"PUT /edit-note/:noteId"}),"\r\n",(0,t.jsx)(n.strong,{children:"Authentication"}),": Required"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'app.put("/edit-note/:noteId", authenticateToken, async (req, res) => {\r\n  const noteId = req.params.noteId;\r\n  const { title, content, tags, isPinned } = req.body;\r\n  const { user } = req.user;\r\n  \r\n  try {\r\n    const note = await Note.findOne({ _id: noteId, userId: user._id });\r\n    if (!note) {\r\n      return res.status(404).json({ error: true, message: "Note not found" });\r\n    }\r\n    \r\n    if (title) note.title = title;\r\n    if (content) note.content = content;\r\n    if (tags) note.tags = tags;\r\n    if (isPinned) note.isPinned = isPinned;\r\n    \r\n    await note.save();\r\n    return res.json({\r\n      error: false,\r\n      note,\r\n      message: "Note updated successfully",\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({\r\n      error: true,\r\n      message: "Internal Server Error ",\r\n    });\r\n  }\r\n});\n'})}),"\n",(0,t.jsx)(n.h4,{id:"key-features-1",children:"Key Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"URL parameters"}),": ",(0,t.jsx)(n.code,{children:":noteId"})," extracts note ID from URL"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Partial updates"}),": Only provided fields are updated"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"User ownership verification"}),": Ensures users can only edit their own notes"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"delete-note",children:"Delete Note"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Endpoint"}),": ",(0,t.jsx)(n.code,{children:"DELETE /delete-note/:noteId"}),"\r\n",(0,t.jsx)(n.strong,{children:"Authentication"}),": Required"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'app.delete("/delete-note/:noteId", authenticateToken, async (req, res) => {\r\n  const noteId = req.params.noteId;\r\n  const { user } = req.user;\r\n  \r\n  try {\r\n    const note = await Note.findOne({ _id: noteId, userId: user._id });\r\n    if (!note) {\r\n      return res.status(404).json({ error: true, message: "Note not found" });\r\n    }\r\n    \r\n    await Note.deleteOne({ _id: noteId, userId: user._id });\r\n    \r\n    return res.json({\r\n      error: false,\r\n      note,\r\n      message: "Note deleted successfully",\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({\r\n      error: true,\r\n      message: "Internal Server Error ",\r\n    });\r\n  }\r\n});\n'})}),"\n",(0,t.jsx)(n.h3,{id:"pinunpin-note",children:"Pin/Unpin Note"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Endpoint"}),": ",(0,t.jsx)(n.code,{children:"PUT /update-note-pinned/:noteId"}),"\r\n",(0,t.jsx)(n.strong,{children:"Authentication"}),": Required"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'app.put("/update-note-pinned/:noteId", authenticateToken, async (req, res) => {\r\n  const noteId = req.params.noteId;\r\n  const { isPinned } = req.body;\r\n  const { user } = req.user;\r\n  \r\n  try {\r\n    const note = await Note.findOne({ _id: noteId, userId: user._id });\r\n    if (!note) {\r\n      return res.status(404).json({ error: true, message: "Note not found" });\r\n    }\r\n    \r\n    if (isPinned !== undefined) note.isPinned = isPinned;\r\n    \r\n    await note.save();\r\n    return res.json({\r\n      error: false,\r\n      note,\r\n      message: "Note updated successfully",\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({\r\n      error: true,\r\n      message: "Internal Server Error ",\r\n    });\r\n  }\r\n});\n'})}),"\n",(0,t.jsx)(n.h3,{id:"get-all-notes",children:"Get All Notes"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Endpoint"}),": ",(0,t.jsx)(n.code,{children:"GET /get-all-notes"}),"\r\n",(0,t.jsx)(n.strong,{children:"Authentication"}),": Required"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'app.get("/get-all-notes", authenticateToken, async (req, res) => {\r\n  const { user } = req.user;\r\n  \r\n  try {\r\n    const notes = await Note.find({ userId: user._id }).sort({ isPinned: -1 });\r\n    \r\n    return res.json({\r\n      error: false,\r\n      notes,\r\n      message: "All notes retrieved successfully",\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({\r\n      error: true,\r\n      message: "Internal Server Error",\r\n    });\r\n  }\r\n});\n'})}),"\n",(0,t.jsx)(n.h4,{id:"key-features-2",children:"Key Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Sorting"}),": ",(0,t.jsx)(n.code,{children:".sort({ isPinned: -1 })"})," puts pinned notes first"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"User filtering"}),": Only returns notes belonging to authenticated user"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"search-notes",children:"Search Notes"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Endpoint"}),": ",(0,t.jsx)(n.code,{children:"GET /search-notes"}),"\r\n",(0,t.jsx)(n.strong,{children:"Authentication"}),": Required"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'app.get("/search-notes/", authenticateToken, async (req, res) => {\r\n  const { user } = req.user;\r\n  const { query } = req.query;\r\n  \r\n  if (!query) {\r\n    return res.status(400).json({ error: true, message: "Search query is required" });\r\n  }\r\n  \r\n  try {\r\n    const matchingNotes = await Note.find({\r\n      userId: user._id,\r\n      $or: [\r\n        { title: { $regex: new RegExp(query, "i") } },\r\n        { content: { $regex: new RegExp(query, "i") } },\r\n      ],\r\n    });\r\n    \r\n    return res.json({\r\n      error: false,\r\n      notes: matchingNotes,\r\n      message: "Notes matching the search query retrieved successfully"\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({\r\n      error: true,\r\n      message: "Internal Server Error",\r\n    });\r\n  }\r\n});\n'})}),"\n",(0,t.jsx)(n.h4,{id:"search-features",children:"Search Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Query parameters"}),": ",(0,t.jsx)(n.code,{children:"?query=searchterm"})," in URL"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Case-insensitive search"}),": ",(0,t.jsx)(n.code,{children:'"i"'})," flag in regex"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Multiple field search"}),": Searches both title and content"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"MongoDB regex"}),": ",(0,t.jsx)(n.code,{children:"$regex"})," operator for pattern matching"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"http-status-codes-used",children:"HTTP Status Codes Used"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"200 OK"}),": Successful requests"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"400 Bad Request"}),": Invalid input or missing required fields"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"401 Unauthorized"}),": Missing or invalid authentication token"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"404 Not Found"}),": Requested resource doesn't exist"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"500 Internal Server Error"}),": Server-side errors"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"error-response-format",children:"Error Response Format"}),"\n",(0,t.jsx)(n.p,{children:"All error responses follow a consistent format:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n  "error": true,\r\n  "message": "Description of the error"\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"connection-to-other-components",children:"Connection to Other Components"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Authentication System"}),": Most endpoints require JWT token validation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Database Models"}),": All endpoints interact with User and Note models"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Frontend"}),": These endpoints are consumed by the React application"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Middleware"}),": ",(0,t.jsx)(n.code,{children:"authenticateToken"})," protects sensitive operations"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var s=r(6540);const t={},i=s.createContext(t);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);