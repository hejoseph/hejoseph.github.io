"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[6912],{8453:(e,s,i)=>{i.d(s,{R:()=>l,x:()=>a});var n=i(6540);const r={},t=n.createContext(r);function l(e){const s=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),n.createElement(t.Provider,{value:s},e.children)}},8514:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"QA-Testing/Test-Design-Coverage/pairwise-testing","title":"Test Case Design Technique: Pairwise Testing","description":"Overview","source":"@site/docs/QA-Testing/3-Test-Design-Coverage/5-pairwise-testing.md","sourceDirName":"QA-Testing/3-Test-Design-Coverage","slug":"/QA-Testing/Test-Design-Coverage/pairwise-testing","permalink":"/dev/fr/docs/QA-Testing/Test-Design-Coverage/pairwise-testing","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Test Case Design Technique: State Transition Testing","permalink":"/dev/fr/docs/QA-Testing/Test-Design-Coverage/state-transition"},"next":{"title":"Types of Test Coverage: Requirement, Code, and Risk Coverage","permalink":"/dev/fr/docs/QA-Testing/Test-Design-Coverage/test-coverage-types"}}');var r=i(4848),t=i(8453);const l={},a="Test Case Design Technique: Pairwise Testing",c={},d=[{value:"Overview",id:"overview",level:2},{value:"Why Use Pairwise Testing?",id:"why-use-pairwise-testing",level:2},{value:"Basic Concept",id:"basic-concept",level:2},{value:"Example",id:"example",level:2},{value:"Input Parameters",id:"input-parameters",level:3},{value:"Pairwise Test Cases (Generated via Tool)",id:"pairwise-test-cases-generated-via-tool",level:3},{value:"Tools to Generate Pairwise Tests",id:"tools-to-generate-pairwise-tests",level:2},{value:"Real-World Use Cases",id:"real-world-use-cases",level:2},{value:"Limitations",id:"limitations",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Summary",id:"summary",level:2},{value:"Quick Template",id:"quick-template",level:2}];function o(e){const s={a:"a",blockquote:"blockquote",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"test-case-design-technique-pairwise-testing",children:"Test Case Design Technique: Pairwise Testing"})}),"\n",(0,r.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Pairwise Testing"})," (also known as ",(0,r.jsx)(s.strong,{children:"All-Pairs Testing"}),") is a black-box test design technique used to reduce the number of test cases needed when testing combinations of multiple input parameters."]}),"\n",(0,r.jsxs)(s.p,{children:["Rather than testing ",(0,r.jsx)(s.strong,{children:"every possible combination"}),", pairwise testing ensures that ",(0,r.jsx)(s.strong,{children:"all possible pairs of input values"})," are covered at least once. Research has shown that most defects are caused by interactions between ",(0,r.jsx)(s.strong,{children:"two parameters"}),", making this approach highly efficient."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"why-use-pairwise-testing",children:"Why Use Pairwise Testing?"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Reduces the ",(0,r.jsx)(s.strong,{children:"explosion of combinations"})," in multi-variable systems"]}),"\n",(0,r.jsxs)(s.li,{children:["Offers ",(0,r.jsx)(s.strong,{children:"high coverage with fewer test cases"})]}),"\n",(0,r.jsx)(s.li,{children:"More efficient than exhaustive testing"}),"\n",(0,r.jsxs)(s.li,{children:["Ideal for ",(0,r.jsx)(s.strong,{children:"configuration testing"}),", ",(0,r.jsx)(s.strong,{children:"form validations"}),", ",(0,r.jsx)(s.strong,{children:"API parameters"}),", and ",(0,r.jsx)(s.strong,{children:"device compatibility matrices"})]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"basic-concept",children:"Basic Concept"}),"\n",(0,r.jsx)(s.p,{children:"Let\u2019s say a system has 3 input fields:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Browser"}),": Chrome, Firefox"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"OS"}),": Windows, macOS"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Language"}),": English, Spanish"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"Total combinations = 2 \xd7 2 \xd7 2 = 8 (full factorial testing)"}),"\n",(0,r.jsxs)(s.p,{children:["Using pairwise testing, we can reduce this to ",(0,r.jsx)(s.strong,{children:"4 test cases"})," while still covering all ",(0,r.jsx)(s.strong,{children:"pairs of values"})," at least once."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(s.h3,{id:"input-parameters",children:"Input Parameters"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Parameter"}),(0,r.jsx)(s.th,{children:"Values"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Browser"}),(0,r.jsx)(s.td,{children:"Chrome, Firefox"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"OS"}),(0,r.jsx)(s.td,{children:"Windows, macOS"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Language"}),(0,r.jsx)(s.td,{children:"English, Spanish"})]})]})]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"pairwise-test-cases-generated-via-tool",children:"Pairwise Test Cases (Generated via Tool)"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Test Case"}),(0,r.jsx)(s.th,{children:"Browser"}),(0,r.jsx)(s.th,{children:"OS"}),(0,r.jsx)(s.th,{children:"Language"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"TC01"}),(0,r.jsx)(s.td,{children:"Chrome"}),(0,r.jsx)(s.td,{children:"Windows"}),(0,r.jsx)(s.td,{children:"English"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"TC02"}),(0,r.jsx)(s.td,{children:"Firefox"}),(0,r.jsx)(s.td,{children:"Windows"}),(0,r.jsx)(s.td,{children:"Spanish"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"TC03"}),(0,r.jsx)(s.td,{children:"Chrome"}),(0,r.jsx)(s.td,{children:"macOS"}),(0,r.jsx)(s.td,{children:"Spanish"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"TC04"}),(0,r.jsx)(s.td,{children:"Firefox"}),(0,r.jsx)(s.td,{children:"macOS"}),(0,r.jsx)(s.td,{children:"English"})]})]})]}),"\n",(0,r.jsx)(s.p,{children:"\u2705 Every possible pair (e.g., Firefox + Windows, Firefox + macOS, Chrome + English, etc.) appears at least once."}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"tools-to-generate-pairwise-tests",children:"Tools to Generate Pairwise Tests"}),"\n",(0,r.jsx)(s.p,{children:"Since manually deriving pairwise combinations can get complex with more parameters, there are several tools to automate it:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"PICT"})," (Microsoft tool)"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"AllPairs"})," (from Perl)"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Pairwise Online Tools"})," (e.g., ",(0,r.jsx)(s.a,{href:"https://pairwise.teremokgames.com",children:"pairwise.teremokgames.com"}),")"]}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.strong,{children:"Hexawise"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.strong,{children:"TestersDesk Pairwise Generator"})}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"real-world-use-cases",children:"Real-World Use Cases"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Mobile App Testing"})," across devices, OS, screen sizes"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Web App Testing"})," with combinations of browsers, languages, login types"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Payment Gateway Testing"})," with card types, currencies, transaction types"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"API Testing"})," with different request parameters and headers"]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"limitations",children:"Limitations"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Doesn\u2019t cover ",(0,r.jsx)(s.strong,{children:"three-way or higher"})," interactions (but extensions like ",(0,r.jsx)(s.strong,{children:"orthogonal arrays"})," can help)"]}),"\n",(0,r.jsxs)(s.li,{children:["Not suitable for scenarios where ",(0,r.jsx)(s.strong,{children:"specific sequences or state dependencies"})," are critical"]}),"\n",(0,r.jsxs)(s.li,{children:["Best when parameters are ",(0,r.jsx)(s.strong,{children:"independent"})," of one another"]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Use pairwise for ",(0,r.jsx)(s.strong,{children:"combinatorial explosion"})," problems (3+ variables)"]}),"\n",(0,r.jsxs)(s.li,{children:["Confirm ",(0,r.jsx)(s.strong,{children:"parameter independence"})," before using"]}),"\n",(0,r.jsxs)(s.li,{children:["Combine with ",(0,r.jsx)(s.strong,{children:"equivalence partitioning"})," or ",(0,r.jsx)(s.strong,{children:"boundary value analysis"})," for thorough coverage"]}),"\n",(0,r.jsxs)(s.li,{children:["Document the ",(0,r.jsx)(s.strong,{children:"rationale"})," and ",(0,r.jsx)(s.strong,{children:"tools"})," used for transparency"]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Pairwise Testing"})," is a smart, efficient way to test multi-variable systems without being overwhelmed by combinations. It gives strong coverage where it matters most\u2014",(0,r.jsx)(s.strong,{children:"interactions between pairs of inputs"}),"."]}),"\n",(0,r.jsxs)(s.blockquote,{children:["\n",(0,r.jsx)(s.p,{children:"\u201cTest smarter, not harder. Pairwise testing gives you 80% of the value with 20% of the effort.\u201d"}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"quick-template",children:"Quick Template"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Parameter 1"}),(0,r.jsx)(s.th,{children:"Parameter 2"}),(0,r.jsx)(s.th,{children:"Parameter 3"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Value A"}),(0,r.jsx)(s.td,{children:"Value X"}),(0,r.jsx)(s.td,{children:"Value 1"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Value A"}),(0,r.jsx)(s.td,{children:"Value Y"}),(0,r.jsx)(s.td,{children:"Value 2"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Value B"}),(0,r.jsx)(s.td,{children:"Value X"}),(0,r.jsx)(s.td,{children:"Value 2"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Value B"}),(0,r.jsx)(s.td,{children:"Value Y"}),(0,r.jsx)(s.td,{children:"Value 1"})]})]})]}),"\n",(0,r.jsxs)(s.p,{children:["Every ",(0,r.jsx)(s.strong,{children:"pair"})," of values from each column will appear at least once."]})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);