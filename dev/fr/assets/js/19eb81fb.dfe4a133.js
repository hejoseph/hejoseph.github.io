"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[9265],{401:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"Portfolio/CodeTyper/solutions","title":"CodeTyper Use Case: Solutions","description":"This document describes the solutions implemented to address the challenges encountered during the development of the CodeTyper application.","source":"@site/docs/Portfolio/CodeTyper/03-solutions.md","sourceDirName":"Portfolio/CodeTyper","slug":"/Portfolio/CodeTyper/solutions","permalink":"/dev/fr/docs/Portfolio/CodeTyper/solutions","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"CodeTyper Use Case: Challenges","permalink":"/dev/fr/docs/Portfolio/CodeTyper/challenges"},"next":{"title":"CodeTyper Use Case: Code Deep Dive","permalink":"/dev/fr/docs/Portfolio/CodeTyper/code-deep-dive"}}');var i=n(4848),s=n(8453);const r={},a="CodeTyper Use Case: Solutions",d={},l=[{value:"1. Simulating a Real Code Editor",id:"1-simulating-a-real-code-editor",level:2},{value:"2. Real-time WPM Calculation",id:"2-real-time-wpm-calculation",level:2},{value:"3. Handling User-Provided Code",id:"3-handling-user-provided-code",level:2},{value:"4. State Management",id:"4-state-management",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"codetyper-use-case-solutions",children:"CodeTyper Use Case: Solutions"})}),"\n",(0,i.jsx)(t.p,{children:"This document describes the solutions implemented to address the challenges encountered during the development of the CodeTyper application."}),"\n",(0,i.jsx)(t.h2,{id:"1-simulating-a-real-code-editor",children:"1. Simulating a Real Code Editor"}),"\n",(0,i.jsx)(t.p,{children:"The solution to this challenge involved a two-part approach:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:'A "Simple" Enter Key:'})," When the user presses ",(0,i.jsx)(t.code,{children:"Enter"}),", the application adds a newline character and then inserts the same indentation as the previous line. This creates a temporary mismatch between the user's typed text and the target code, which is the key to simulating the behavior of a real editor."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:'A "Smart" Backspace Key:'})," The ",(0,i.jsx)(t.code,{children:"handleBackspaceKey"})," function was completely overhauled to detect when the user is at the beginning of a line with incorrect indentation. In this situation, the ",(0,i.jsx)(t.code,{children:"Backspace"})," key deletes an entire block of indentation at once, without counting as an error."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"This two-part solution allows the user to correct the indentation of their code without being penalized, which provides a more authentic and intuitive typing experience."}),"\n",(0,i.jsx)(t.h2,{id:"2-real-time-wpm-calculation",children:"2. Real-time WPM Calculation"}),"\n",(0,i.jsxs)(t.p,{children:["The solution to this challenge was to modify the ",(0,i.jsx)(t.code,{children:"useEffect"})," hook that calculates the WPM. The ",(0,i.jsx)(t.code,{children:"typedChars"})," variable was removed from the dependency array, which prevents the timer from being reset on every keystroke. This ensures that the WPM is calculated continuously and displayed in real-time."]}),"\n",(0,i.jsx)(t.h2,{id:"3-handling-user-provided-code",children:"3. Handling User-Provided Code"}),"\n",(0,i.jsxs)(t.p,{children:["The solution to this challenge involved the use of the ",(0,i.jsx)(t.code,{children:"highlight.js"})," library, which is a popular syntax highlighting library that supports a wide variety of programming languages. The application also includes robust error handling to prevent crashes when the user provides malformed or incomplete code."]}),"\n",(0,i.jsx)(t.h2,{id:"4-state-management",children:"4. State Management"}),"\n",(0,i.jsxs)(t.p,{children:["The solution to this challenge was to use React's ",(0,i.jsx)(t.code,{children:"useState"})," and ",(0,i.jsx)(t.code,{children:"useRef"})," hooks to manage the application's state. The ",(0,i.jsx)(t.code,{children:"useState"})," hook is used to manage the state that is rendered to the screen, while the ",(0,i.jsx)(t.code,{children:"useRef"})," hook is used to manage the state that is not rendered to the screen (e.g., the timer)."]}),"\n",(0,i.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(t.p,{children:"The development of the CodeTyper application was a challenging but rewarding experience. The solutions described in this document have resulted in a robust and user-friendly application that provides a realistic and effective way for developers to practice their typing skills."})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var o=n(6540);const i={},s=o.createContext(i);function r(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);