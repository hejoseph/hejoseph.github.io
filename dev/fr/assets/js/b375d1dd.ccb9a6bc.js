"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[5879],{4859:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Angular/Observable/observables","title":"Observables in Angular","description":"Observables are a fundamental concept in Angular, based on the RxJS library. They provide a powerful way to handle asynchronous data streams and events.","source":"@site/docs/Angular/Observable/observables.md","sourceDirName":"Angular/Observable","slug":"/Angular/Observable/observables","permalink":"/dev/fr/docs/Angular/Observable/observables","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"observables-vs-fetch","permalink":"/dev/fr/docs/Angular/Observable/observables-vs-fetch"},"next":{"title":"Angular E2E Testing Frameworks \u2013 Overview & Usage","permalink":"/dev/fr/docs/Angular/Testing-Framework/e2e"}}');var a=n(4848),t=n(8453);const i={},l="Observables in Angular",o={},c=[{value:"What is an Observable?",id:"what-is-an-observable",level:2},{value:"Key Characteristics",id:"key-characteristics",level:2},{value:"Common Use Cases in Angular",id:"common-use-cases-in-angular",level:2},{value:"1. HTTP Requests",id:"1-http-requests",level:3},{value:"2. Component Usage",id:"2-component-usage",level:3},{value:"3. Using Async Pipe (Recommended)",id:"3-using-async-pipe-recommended",level:3},{value:"Common RxJS Operators",id:"common-rxjs-operators",level:2},{value:"Map - Transform data",id:"map---transform-data",level:3},{value:"CatchError - Handle errors",id:"catcherror---handle-errors",level:3},{value:"Debounce - Delay emissions",id:"debounce---delay-emissions",level:3},{value:"Observable vs Promise",id:"observable-vs-promise",level:2},{value:"Best Practices",id:"best-practices",level:2}];function d(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.header,{children:(0,a.jsx)(r.h1,{id:"observables-in-angular",children:"Observables in Angular"})}),"\n",(0,a.jsxs)(r.p,{children:["Observables are a fundamental concept in Angular, based on the ",(0,a.jsx)(r.strong,{children:"RxJS library"}),". They provide a powerful way to handle asynchronous data streams and events."]}),"\n",(0,a.jsx)(r.h2,{id:"what-is-an-observable",children:"What is an Observable?"}),"\n",(0,a.jsxs)(r.p,{children:["An Observable is a ",(0,a.jsx)(r.strong,{children:"lazy collection of multiple values over time"}),". Think of it as a stream of data that you can subscribe to and react to changes."]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"import { Observable } from 'rxjs';\r\n\r\n// Creating a simple observable\r\nconst observable = new Observable(observer => {\r\n  observer.next('Hello');\r\n  observer.next('World');\r\n  observer.complete();\r\n});\n"})}),"\n",(0,a.jsx)(r.h2,{id:"key-characteristics",children:"Key Characteristics"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Lazy"}),": Observables don't execute until you subscribe to them"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Cancellable"}),": You can unsubscribe to stop receiving data"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Composable"}),": You can chain operators to transform data"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Multi-value"}),": Can emit multiple values over time"]}),"\n"]}),"\n",(0,a.jsx)(r.h2,{id:"common-use-cases-in-angular",children:"Common Use Cases in Angular"}),"\n",(0,a.jsx)(r.h3,{id:"1-http-requests",children:"1. HTTP Requests"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class DataService {\r\n  constructor(private http: HttpClient) {}\r\n  \r\n  getData() {\r\n    return this.http.get<any[]>('api/data'); // Returns Observable\r\n  }\r\n}\n"})}),"\n",(0,a.jsx)(r.h3,{id:"2-component-usage",children:"2. Component Usage"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-data',\r\n  template: `<div *ngFor=\"let item of data\">{{item.name}}</div>`\r\n})\r\nexport class DataComponent implements OnInit, OnDestroy {\r\n  data: any[] = [];\r\n  private subscription: Subscription;\r\n  \r\n  constructor(private dataService: DataService) {}\r\n  \r\n  ngOnInit() {\r\n    this.subscription = this.dataService.getData().subscribe(\r\n      data => this.data = data,\r\n      error => console.error(error)\r\n    );\r\n  }\r\n  \r\n  ngOnDestroy() {\r\n    this.subscription.unsubscribe(); // Prevent memory leaks\r\n  }\r\n}\n"})}),"\n",(0,a.jsx)(r.h3,{id:"3-using-async-pipe-recommended",children:"3. Using Async Pipe (Recommended)"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"@Component({\r\n  selector: 'app-data',\r\n  template: `<div *ngFor=\"let item of data$ | async\">{{item.name}}</div>`\r\n})\r\nexport class DataComponent {\r\n  data$ = this.dataService.getData(); // Observable\r\n  \r\n  constructor(private dataService: DataService) {}\r\n}\n"})}),"\n",(0,a.jsx)(r.h2,{id:"common-rxjs-operators",children:"Common RxJS Operators"}),"\n",(0,a.jsx)(r.h3,{id:"map---transform-data",children:"Map - Transform data"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"this.dataService.getData().pipe(\r\n  map(data => data.filter(item => item.active))\r\n).subscribe(filteredData => console.log(filteredData));\n"})}),"\n",(0,a.jsx)(r.h3,{id:"catcherror---handle-errors",children:"CatchError - Handle errors"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"import { catchError } from 'rxjs/operators';\r\nimport { of } from 'rxjs';\r\n\r\nthis.dataService.getData().pipe(\r\n  catchError(error => {\r\n    console.error(error);\r\n    return of([]); // Return empty array on error\r\n  })\r\n).subscribe(data => this.data = data);\n"})}),"\n",(0,a.jsx)(r.h3,{id:"debounce---delay-emissions",children:"Debounce - Delay emissions"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"import { debounceTime } from 'rxjs/operators';\r\n\r\nsearchControl.valueChanges.pipe(\r\n  debounceTime(300) // Wait 300ms after user stops typing\r\n).subscribe(searchTerm => this.search(searchTerm));\n"})}),"\n",(0,a.jsx)(r.h2,{id:"observable-vs-promise",children:"Observable vs Promise"}),"\n",(0,a.jsxs)(r.table,{children:[(0,a.jsx)(r.thead,{children:(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.th,{children:"Observable"}),(0,a.jsx)(r.th,{children:"Promise"})]})}),(0,a.jsxs)(r.tbody,{children:[(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:"Lazy (cold)"}),(0,a.jsx)(r.td,{children:"Eager (hot)"})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:"Cancellable"}),(0,a.jsx)(r.td,{children:"Not cancellable"})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:"Multiple values"}),(0,a.jsx)(r.td,{children:"Single value"})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:"Rich operators"}),(0,a.jsx)(r.td,{children:"Limited methods"})]})]})]}),"\n",(0,a.jsx)(r.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsxs)(r.ol,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Always unsubscribe"})," to prevent memory leaks"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Use async pipe"})," when possible"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Handle errors"})," with catchError operator"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Use takeUntil"})," pattern for component cleanup"]}),"\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.strong,{children:"Avoid nested subscriptions"})}),"\n"]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"// Good: Using takeUntil pattern\r\nprivate destroy$ = new Subject<void>();\r\n\r\nngOnInit() {\r\n  this.dataService.getData().pipe(\r\n    takeUntil(this.destroy$)\r\n  ).subscribe(data => this.data = data);\r\n}\r\n\r\nngOnDestroy() {\r\n  this.destroy$.next();\r\n  this.destroy$.complete();\r\n}\n"})}),"\n",(0,a.jsx)(r.p,{children:"Observables are essential for building reactive Angular applications and handling asynchronous operations effectively!"})]})}function h(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>l});var s=n(6540);const a={},t=s.createContext(a);function i(e){const r=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(t.Provider,{value:r},e.children)}}}]);