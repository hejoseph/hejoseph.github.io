"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[1660],{90:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>i,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Portfolio/CodeTyper/Code-Breakdown/sampleCodes","title":"CodeTyper Use Case: Code Breakdown - sampleCodes.ts","description":"This document provides a detailed breakdown of the sampleCodes.ts file, which provides the code snippets for the application.","source":"@site/docs/Portfolio/CodeTyper/Code-Breakdown/03-sampleCodes.md","sourceDirName":"Portfolio/CodeTyper/Code-Breakdown","slug":"/Portfolio/CodeTyper/Code-Breakdown/sampleCodes","permalink":"/dev/fr/docs/Portfolio/CodeTyper/Code-Breakdown/sampleCodes","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"CodeTyper Use Case: Code Breakdown - App.tsx","permalink":"/dev/fr/docs/Portfolio/CodeTyper/Code-Breakdown/App"},"next":{"title":"Score Logging Implementation Guide","permalink":"/dev/fr/docs/Portfolio/CodeTyper/Feature/SCORE_LOGGING_IMPLEMENTATION"}}');var t=n(4848),d=n(8453);const r={},a="CodeTyper Use Case: Code Breakdown - sampleCodes.ts",i={},c=[{value:"Data Structure",id:"data-structure",level:2},{value:"Usage",id:"usage",level:2},{value:"Conclusion",id:"conclusion",level:2}];function l(e){const o={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,d.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.header,{children:(0,t.jsx)(o.h1,{id:"codetyper-use-case-code-breakdown---samplecodests",children:"CodeTyper Use Case: Code Breakdown - sampleCodes.ts"})}),"\n",(0,t.jsxs)(o.p,{children:["This document provides a detailed breakdown of the ",(0,t.jsx)(o.code,{children:"sampleCodes.ts"})," file, which provides the code snippets for the application."]}),"\n",(0,t.jsx)(o.h2,{id:"data-structure",children:"Data Structure"}),"\n",(0,t.jsxs)(o.p,{children:["The ",(0,t.jsx)(o.code,{children:"sampleCodes"})," object is a collection of code snippets, organized by programming language. Each language is a key in the object, and the value is an array of objects, where each object represents a single code snippet."]}),"\n",(0,t.jsx)(o.p,{children:"Each code snippet object has two properties:"}),"\n",(0,t.jsxs)(o.ul,{children:["\n",(0,t.jsxs)(o.li,{children:[(0,t.jsx)(o.code,{children:"name"}),': The name of the code snippet (e.g., "Factorial", "Fibonacci", etc.).']}),"\n",(0,t.jsxs)(o.li,{children:[(0,t.jsx)(o.code,{children:"code"}),": The code snippet itself, as a string."]}),"\n"]}),"\n",(0,t.jsx)(o.p,{children:"Here is an example of a single code snippet object:"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-typescript",children:"{\n  name: 'Factorial',\n  code: `function factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5)); // 120`\n}\n"})}),"\n",(0,t.jsx)(o.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsxs)(o.p,{children:["The ",(0,t.jsx)(o.code,{children:"sampleCodes"})," object is used by the ",(0,t.jsx)(o.code,{children:"CodeTyper"})," component to provide the user with a variety of code snippets to practice with. The ",(0,t.jsx)(o.code,{children:"getRandomCode"})," function in the ",(0,t.jsx)(o.code,{children:"CodeTyper"})," component selects a random code snippet from the ",(0,t.jsx)(o.code,{children:"sampleCodes"})," object based on the user's selected language."]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-typescript",children:"const getRandomCode = useCallback((lang: string) => {\n  const langCodes = sampleCodes[lang as keyof typeof sampleCodes];\n  const randomIndex = Math.floor(Math.random() * langCodes.length);\n  return langCodes[randomIndex].code;\n}, []);\n"})}),"\n",(0,t.jsx)(o.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsxs)(o.p,{children:["The ",(0,t.jsx)(o.code,{children:"sampleCodes.ts"})," file is a simple but important file. It provides the data that is used to populate the code editor, and it is easily extensible to include new programming languages and code snippets."]})]})}function p(e={}){const{wrapper:o}={...(0,d.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,o,n)=>{n.d(o,{R:()=>r,x:()=>a});var s=n(6540);const t={},d=s.createContext(t);function r(e){const o=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function a(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(d.Provider,{value:o},e.children)}}}]);