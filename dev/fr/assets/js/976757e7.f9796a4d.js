"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[1426],{4306:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Portfolio/CodeTyper/Code-Breakdown/App","title":"CodeTyper Use Case: Code Breakdown - App.tsx","description":"This document provides a detailed breakdown of the App.tsx component, which is the root component of the application.","source":"@site/docs/Portfolio/CodeTyper/Code-Breakdown/02-App.md","sourceDirName":"Portfolio/CodeTyper/Code-Breakdown","slug":"/Portfolio/CodeTyper/Code-Breakdown/App","permalink":"/dev/fr/docs/Portfolio/CodeTyper/Code-Breakdown/App","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"CodeTyper Use Case: Code Breakdown - CodeTyper.tsx","permalink":"/dev/fr/docs/Portfolio/CodeTyper/Code-Breakdown/CodeTyper"},"next":{"title":"CodeTyper Use Case: Code Breakdown - sampleCodes.ts","permalink":"/dev/fr/docs/Portfolio/CodeTyper/Code-Breakdown/sampleCodes"}}');var t=o(4848),d=o(8453);const r={},i="CodeTyper Use Case: Code Breakdown - App.tsx",a={},c=[{value:"State Management",id:"state-management",level:2},{value:"Core Functions",id:"core-functions",level:2},{value:"Rendering Logic",id:"rendering-logic",level:2},{value:"Conclusion",id:"conclusion",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,d.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"codetyper-use-case-code-breakdown---apptsx",children:"CodeTyper Use Case: Code Breakdown - App.tsx"})}),"\n",(0,t.jsxs)(n.p,{children:["This document provides a detailed breakdown of the ",(0,t.jsx)(n.code,{children:"App.tsx"})," component, which is the root component of the application."]}),"\n",(0,t.jsx)(n.h2,{id:"state-management",children:"State Management"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"App"})," component uses a single state variable to manage its behavior:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"darkMode"}),": A boolean that indicates whether the application is currently in dark mode."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const [darkMode, setDarkMode] = useState(false);\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"core-functions",children:"Core Functions"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"App"})," component has a single core function that is responsible for its behavior:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"toggleDarkMode"}),": This function is called when the user clicks the theme toggle button. It is responsible for toggling the ",(0,t.jsx)(n.code,{children:"darkMode"})," state variable."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const toggleDarkMode = () => {\n  setDarkMode((prevMode) => !prevMode);\n};\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"rendering-logic",children:"Rendering Logic"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"App"})," component uses a ",(0,t.jsx)(n.code,{children:"useEffect"})," hook to apply the ",(0,t.jsx)(n.code,{children:"dark"})," class to the ",(0,t.jsx)(n.code,{children:"<html>"})," element when the ",(0,t.jsx)(n.code,{children:"darkMode"})," state variable is true. This allows the application to use Tailwind CSS's dark mode feature."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"useEffect(() => {\n  // Apply or remove dark mode class based on state\n  if (darkMode) {\n    document.documentElement.classList.add('dark');\n  } else {\n    document.documentElement.classList.remove('dark');\n  }\n}, [darkMode]);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"App"})," component also renders the ",(0,t.jsx)(n.code,{children:"CodeTyper"})," component, which is the heart of the application."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'<main className="container mx-auto">\n  <CodeTyper darkMode={darkMode} />\n</main>\n'})}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"App"})," component is a simple but important component. It is responsible for managing the application's dark mode feature and for rendering the ",(0,t.jsx)(n.code,{children:"CodeTyper"})," component."]})]})}function p(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>i});var s=o(6540);const t={},d=s.createContext(t);function r(e){const n=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(d.Provider,{value:n},e.children)}}}]);