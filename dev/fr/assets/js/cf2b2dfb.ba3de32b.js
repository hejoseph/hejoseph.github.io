"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[6954],{2494:e=>{e.exports=JSON.parse('{"tag":{"label":"composition","permalink":"/dev/fr/docs/tags/composition","allTagsPath":"/dev/fr/docs/tags","count":1,"items":[{"id":"java/Core/OOP/composition-inheritance","title":"Composition plut\xf4t qu\'h\xe9ritage","description":"\\"Composition plut\xf4t qu\'h\xe9ritage\\" (\xe9galement connu sous le nom de \\"privil\xe9gier la composition \xe0 l\'h\xe9ritage\\") est un principe de conception en programmation orient\xe9e objet qui sugg\xe8re que les classes devraient acqu\xe9rir de nouvelles fonctionnalit\xe9s en composant des objets de classes existantes (c\'est-\xe0-dire en contenant des instances d\'autres classes) plut\xf4t qu\'en h\xe9ritant d\'elles. Ce principe favorise une plus grande flexibilit\xe9, un couplage r\xe9duit et une meilleure r\xe9utilisabilit\xe9 du code.","permalink":"/dev/fr/docs/java/Core/OOP/composition-inheritance"}],"unlisted":false}}')}}]);