"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[6386],{2282:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"Portfolio/YT-DL-Batch/java-application/architecture","title":"Java Application Architecture","description":"Overview","source":"@site/docs/Portfolio/YT-DL-Batch/java-application/architecture.md","sourceDirName":"Portfolio/YT-DL-Batch/java-application","slug":"/Portfolio/YT-DL-Batch/java-application/architecture","permalink":"/dev/fr/docs/Portfolio/YT-DL-Batch/java-application/architecture","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Data Formats & Communication Protocol","permalink":"/dev/fr/docs/Portfolio/YT-DL-Batch/data-formats/communication-protocol"},"next":{"title":"YouTube Download Tools - Documentation Summary","permalink":"/dev/fr/docs/Portfolio/YT-DL-Batch/summary"}}');var o=i(4848),t=i(8453);const s={},a="Java Application Architecture",l={},d=[{value:"Overview",id:"overview",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"Maven Configuration (<code>pom.xml</code>)",id:"maven-configuration-pomxml",level:3},{value:"Core Architecture Components",id:"core-architecture-components",level:3},{value:"1. Main Application Class (<code>YoutubeDownloader.java</code>)",id:"1-main-application-class-youtubedownloaderjava",level:2},{value:"Interactive Menu System",id:"interactive-menu-system",level:3},{value:"Download Processing Pipeline",id:"download-processing-pipeline",level:3},{value:"2. Video Data Model (<code>Video.java</code>)",id:"2-video-data-model-videojava",level:2},{value:"3. Configuration Management (<code>Configuration.java</code>)",id:"3-configuration-management-configurationjava",level:2},{value:"Properties-Based Configuration",id:"properties-based-configuration",level:3},{value:"Dynamic Configuration Updates",id:"dynamic-configuration-updates",level:3},{value:"4. File I/O Operations (<code>FileIO.java</code>)",id:"4-file-io-operations-fileiojava",level:2},{value:"5. Performance Monitoring (<code>Timer.java</code>)",id:"5-performance-monitoring-timerjava",level:2},{value:"Data Processing Workflow",id:"data-processing-workflow",level:2},{value:"Input Format Processing",id:"input-format-processing",level:3},{value:"Quality Selection Algorithm",id:"quality-selection-algorithm",level:3},{value:"Download History Management",id:"download-history-management",level:3},{value:"External Dependencies",id:"external-dependencies",level:2},{value:"youtube-dl Integration",id:"youtube-dl-integration",level:3},{value:"ffmpeg Integration",id:"ffmpeg-integration",level:3},{value:"Error Handling and Resilience",id:"error-handling-and-resilience",level:2},{value:"Robust Command Execution",id:"robust-command-execution",level:3},{value:"Configuration Files",id:"configuration-files",level:2},{value:"Default Configuration (<code>config.properties</code>)",id:"default-configuration-configproperties",level:3},{value:"Batch Execution (<code>run.bat</code>)",id:"batch-execution-runbat",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"java-application-architecture",children:"Java Application Architecture"})}),"\n",(0,o.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsx)(n.p,{children:"The YoutubeDownloader is a command-line Java application built with Maven that handles the actual downloading of YouTube videos. It processes video lists collected by the Chrome extension and downloads them with user-specified quality settings and folder organization. The application is designed around a modular architecture with clear separation of concerns."}),"\n",(0,o.jsx)(n.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,o.jsxs)(n.h3,{id:"maven-configuration-pomxml",children:["Maven Configuration (",(0,o.jsx)(n.code,{children:"pom.xml"}),")"]}),"\n",(0,o.jsx)(n.p,{children:"The project uses Maven for dependency management and build automation:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:"<groupId>com.joseph</groupId>\r\n<artifactId>YoutubeDownloader</artifactId>\r\n<version>1.0-SNAPSHOT</version>\r\n<packaging>jar</packaging>\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Key Features:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Java 11 Compatibility"}),": Targets Java 11 for modern language features"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Shade Plugin"}),": Creates a fat JAR with all dependencies included"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Main Class Configuration"}),": Automatically sets the entry point to ",(0,o.jsx)(n.code,{children:"com.joseph.youtube.YoutubeDownloader"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"UTF-8 Encoding"}),": Ensures proper character handling across platforms"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"core-architecture-components",children:"Core Architecture Components"}),"\n",(0,o.jsxs)(n.h2,{id:"1-main-application-class-youtubedownloaderjava",children:["1. Main Application Class (",(0,o.jsx)(n.code,{children:"YoutubeDownloader.java"}),")"]}),"\n",(0,o.jsx)(n.p,{children:"The central orchestrator that provides the command-line interface and coordinates all operations:"}),"\n",(0,o.jsx)(n.h3,{id:"interactive-menu-system",children:"Interactive Menu System"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'public void start(){\r\n    while (true) {\r\n        System.out.println("YouTube Video Downloader");\r\n        System.out.println("1. One video MP4 format and choose resolution");\r\n        System.out.println("2. MP3 format");\r\n        System.out.println("3. Download full youtube playlist and choose resolution");\r\n        System.out.println("4. Download list of videos from text file and choose resolution");\r\n        System.out.println("5. Change Configuration Settings");\r\n        // Handle user input...\r\n    }\r\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Core Responsibilities:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"User Interface"}),": Provides interactive command-line menu system"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Workflow Orchestration"}),": Coordinates between configuration, file I/O, and download operations"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"External Process Management"}),": Executes youtube-dl commands and processes output"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"History Tracking"}),": Maintains download history to prevent duplicate downloads"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Error Handling"}),": Manages failures and provides user feedback"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"download-processing-pipeline",children:"Download Processing Pipeline"}),"\n",(0,o.jsx)(n.p,{children:"The application follows a sophisticated pipeline for processing downloads:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"URL Parsing"}),": Extracts video IDs and parameters from YouTube URLs"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Quality Selection"}),": Determines optimal video/audio format combinations"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Folder Management"}),": Creates directory structures based on categories"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Command Construction"}),": Builds youtube-dl commands with appropriate parameters"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Execution Monitoring"}),": Tracks download progress and handles errors"]}),"\n"]}),"\n",(0,o.jsxs)(n.h2,{id:"2-video-data-model-videojava",children:["2. Video Data Model (",(0,o.jsx)(n.code,{children:"Video.java"}),")"]}),"\n",(0,o.jsx)(n.p,{children:"A data transfer object that represents YouTube video metadata:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'public class Video {\r\n    private String id;      // YouTube video ID (11 characters)\r\n    private String folder;  // Category/folder name\r\n    private String quality; // Desired quality (360p, 720p, etc.)\r\n    \r\n    public static Video fromURL(String url) {\r\n        String[] arr = url.split("\\\\?");\r\n        Map<String, String> params = getParams(arr[1]);\r\n        String folder = params.get("f");\r\n        String quality = params.get("q");\r\n        String id = params.get("v");\r\n        return new Video(id, folder, quality);\r\n    }\r\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Key Features:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"URL Parsing"}),": Extracts video metadata from formatted URLs"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Parameter Processing"}),": Handles both semicolon (",(0,o.jsx)(n.code,{children:";"}),") and ampersand (",(0,o.jsx)(n.code,{children:"&"}),") separators"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Data Encapsulation"}),": Provides clean access to video properties"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Validation"}),": Ensures proper video ID format and parameter extraction"]}),"\n"]}),"\n",(0,o.jsxs)(n.h2,{id:"3-configuration-management-configurationjava",children:["3. Configuration Management (",(0,o.jsx)(n.code,{children:"Configuration.java"}),")"]}),"\n",(0,o.jsx)(n.p,{children:"Handles application settings and user preferences:"}),"\n",(0,o.jsx)(n.h3,{id:"properties-based-configuration",children:"Properties-Based Configuration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'private void loadConfigFile(){\r\n    config = new Properties();\r\n    File file = new File(configFile);\r\n    if (!file.exists()) {\r\n        // Create default configuration\r\n        config.setProperty("destinationFolderName", destinationFolderName);\r\n        config.setProperty("downloadedFileName", downloadedFileName);\r\n        config.store(output, "Default configuration");\r\n    }\r\n    // Load existing configuration...\r\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Configuration Parameters:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"destinationFolderName"}),": Base directory for downloaded videos"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"downloadedFileName"}),": Template for naming downloaded files using youtube-dl variables"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"downloadOnlyNewVideos"}),": Boolean flag to skip previously downloaded videos"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"defaultListFile"}),": Default file path for batch processing"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"dynamic-configuration-updates",children:"Dynamic Configuration Updates"}),"\n",(0,o.jsx)(n.p,{children:"The system provides an interactive configuration menu that allows users to:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"View current settings"}),"\n",(0,o.jsx)(n.li,{children:"Modify individual configuration values"}),"\n",(0,o.jsx)(n.li,{children:"Save changes persistently"}),"\n",(0,o.jsx)(n.li,{children:"Reload configuration without restarting"}),"\n"]}),"\n",(0,o.jsxs)(n.h2,{id:"4-file-io-operations-fileiojava",children:["4. File I/O Operations (",(0,o.jsx)(n.code,{children:"FileIO.java"}),")"]}),"\n",(0,o.jsx)(n.p,{children:"Utility class for file operations with robust error handling:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'public static ArrayList<String> read(String fp){\r\n    File file = new File(fp);\r\n    ArrayList<String> contents = new ArrayList<String>();\r\n    try{\r\n        Scanner sc = new Scanner(file);\r\n        while(sc.hasNextLine()){\r\n            String line = sc.nextLine();\r\n            if(line.equals("")) continue; // Skip empty lines\r\n            contents.add(line);\r\n        }\r\n    } catch(FileNotFoundException ignored){\r\n        System.out.println("file not found : "+fp);\r\n    }\r\n    return contents;\r\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Capabilities:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"File Reading"}),": Loads text files into memory with empty line filtering"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"File Writing"}),": Saves string arrays to files with proper formatting"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Append Operations"}),": Adds new content to existing files"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Error Resilience"}),": Handles missing files and I/O errors gracefully"]}),"\n"]}),"\n",(0,o.jsxs)(n.h2,{id:"5-performance-monitoring-timerjava",children:["5. Performance Monitoring (",(0,o.jsx)(n.code,{children:"Timer.java"}),")"]}),"\n",(0,o.jsx)(n.p,{children:"Simple utility for tracking operation execution times:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'public static void stop(){\r\n    endTime = System.nanoTime();\r\n    long executionTimeMs = (endTime - startTime) / 1000000;\r\n    long hours = executionTimeMs / 3600000;\r\n    long minutes = (executionTimeMs % 3600000) / 60000;\r\n    long seconds = (executionTimeMs % 60000) / 1000;\r\n    long milliseconds = executionTimeMs % 1000;\r\n    System.out.println("Execution time: " + String.format("%02d:%02d:%02d:%03d", hours, minutes, seconds, milliseconds));\r\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"data-processing-workflow",children:"Data Processing Workflow"}),"\n",(0,o.jsx)(n.h3,{id:"input-format-processing",children:"Input Format Processing"}),"\n",(0,o.jsx)(n.p,{children:"The application processes two types of input formats:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Direct URLs"}),": ",(0,o.jsx)(n.code,{children:"https://www.youtube.com/watch?v=VIDEO_ID;f=category;q=quality"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Parameter Headers"}),": Lines starting with ",(0,o.jsx)(n.code,{children:"f=category;q=quality"})," that apply to subsequent URLs"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"quality-selection-algorithm",children:"Quality Selection Algorithm"}),"\n",(0,o.jsx)(n.p,{children:"The application implements intelligent quality selection:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'public String selectBestCode(String link, String resolution){\r\n    // Execute youtube-dl -F to get available formats\r\n    // Parse output to find best video and audio codes\r\n    // Combine video+audio for optimal quality\r\n    if(audioCode.equals("") || bestCode.equals("")){\r\n        result = "best";\r\n    } else {\r\n        result = bestCode + "+" + audioCode;\r\n    }\r\n    return result;\r\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Selection Logic:"})}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Format Discovery"}),": Uses youtube-dl to list available formats"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Quality Matching"}),": Finds exact resolution match or best available"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Audio Combination"}),": Pairs video streams with high-quality audio"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Fallback Strategy"}),': Uses "best" format if specific combination unavailable']}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"download-history-management",children:"Download History Management"}),"\n",(0,o.jsx)(n.p,{children:"The application maintains a persistent history to avoid re-downloading:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"History File"}),": ",(0,o.jsx)(n.code,{children:"ids.txt"})," stores previously downloaded video URLs"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Duplicate Detection"}),": Checks URLs against history before downloading"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Configurable Behavior"}),": Can be disabled via ",(0,o.jsx)(n.code,{children:"downloadOnlyNewVideos"})," setting"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"external-dependencies",children:"External Dependencies"}),"\n",(0,o.jsx)(n.h3,{id:"youtube-dl-integration",children:"youtube-dl Integration"}),"\n",(0,o.jsx)(n.p,{children:"The application relies on the external youtube-dl tool:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Format Selection"}),": Uses ",(0,o.jsx)(n.code,{children:"-F"})," flag to discover available formats"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Download Execution"}),": Constructs complex command-line arguments"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Progress Monitoring"}),": Parses output for download progress and completion status"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"ffmpeg-integration",children:"ffmpeg Integration"}),"\n",(0,o.jsx)(n.p,{children:"Automatically used by youtube-dl for:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Format Conversion"}),": Merging separate video and audio streams"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Quality Processing"}),": Handling different codecs and containers"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"error-handling-and-resilience",children:"Error Handling and Resilience"}),"\n",(0,o.jsx)(n.h3,{id:"robust-command-execution",children:"Robust Command Execution"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'public boolean runCmd(String cmd){\r\n    try {\r\n        Process p = Runtime.getRuntime().exec(cmd);\r\n        BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()));\r\n        // Process output and track completion...\r\n    } catch (Exception err) {\r\n        err.printStackTrace();\r\n        return false;\r\n    }\r\n    return percentage.equals("100.0");\r\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Error Recovery Features:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Process Monitoring"}),": Tracks external command execution"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Output Parsing"}),": Extracts progress and error information"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Graceful Degradation"}),": Continues processing other videos if one fails"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"User Feedback"}),": Provides clear error messages and status updates"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"configuration-files",children:"Configuration Files"}),"\n",(0,o.jsxs)(n.h3,{id:"default-configuration-configproperties",children:["Default Configuration (",(0,o.jsx)(n.code,{children:"config.properties"}),")"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-properties",children:"destinationFolderName=C:\\\\workspace\\\\stream\\\\youtube\\\\\r\ndownloadOnlyNewVideos=true\r\ndownloadedFileName=%(channel)s-%(upload_date)s-%(title)s-%(id)s-%(resolution)s.%(ext)s\r\ndefaultListFile=list.txt\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"batch-execution-runbat",children:["Batch Execution (",(0,o.jsx)(n.code,{children:"run.bat"}),")"]}),"\n",(0,o.jsx)(n.p,{children:"Simple Windows batch file for easy execution:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-batch",children:"java -jar YoutubeDownloader.jar\r\npause\n"})}),"\n",(0,o.jsx)(n.p,{children:"This architecture provides a robust, configurable, and user-friendly system for batch downloading YouTube videos with automatic organization and quality control."})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>a});var r=i(6540);const o={},t=r.createContext(o);function s(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);