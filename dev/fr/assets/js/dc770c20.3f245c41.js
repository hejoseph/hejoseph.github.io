"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[6123],{3186:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>t,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"java/Core/OOP/object-equality","title":"\xc9galit\xe9 des Objets - equals() et hashCode()","description":"En Java, d\xe9terminer si deux objets sont \\"\xe9gaux\\" est un concept fondamental, surtout lorsque l\'on travaille avec des collections. Java fournit deux m\xe9thodes dans la classe Object qui sont cruciales pour d\xe9finir et g\xe9rer l\'\xe9galit\xe9 des objets : equals() et hashCode(). Comprendre leur contrat et comment les surcharger correctement est vital pour des applications robustes.","source":"@site/i18n/fr/docusaurus-plugin-content-docs/current/java/1-Core/1-OOP/5-object-equality.md","sourceDirName":"java/1-Core/1-OOP","slug":"/java/Core/OOP/object-equality","permalink":"/dev/fr/docs/java/Core/OOP/object-equality","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"java","permalink":"/dev/fr/docs/tags/java"},{"inline":true,"label":"oop","permalink":"/dev/fr/docs/tags/oop"},{"inline":true,"label":"object equality","permalink":"/dev/fr/docs/tags/object-equality"},{"inline":true,"label":"collections","permalink":"/dev/fr/docs/tags/collections"},{"inline":true,"label":"equals","permalink":"/dev/fr/docs/tags/equals"},{"inline":true,"label":"hashCode","permalink":"/dev/fr/docs/tags/hash-code"}],"version":"current","sidebarPosition":5,"frontMatter":{"title":"\xc9galit\xe9 des Objets - equals() et hashCode()","sidebar_position":5,"tags":["java","oop","object equality","collections","equals","hashCode"]},"sidebar":"tutorialSidebar","previous":{"title":"Principes SOLID","permalink":"/dev/fr/docs/java/Core/OOP/solid-principles"},"next":{"title":"Immutabilit\xe9 - `final` et copies d\xe9fensives","permalink":"/dev/fr/docs/java/Core/OOP/immutability"}}');var i=n(4848),l=n(8453);const t={title:"\xc9galit\xe9 des Objets - equals() et hashCode()",sidebar_position:5,tags:["java","oop","object equality","collections","equals","hashCode"]},o=void 0,a={},d=[{value:"1. La m\xe9thode <code>equals()</code>",id:"1-la-m\xe9thode-equals",level:3},{value:"2. La m\xe9thode <code>hashCode()</code>",id:"2-la-m\xe9thode-hashcode",level:3},{value:"Bonnes pratiques",id:"bonnes-pratiques",level:3}];function c(e){const s={code:"code",em:"em",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(s.p,{children:['En Java, d\xe9terminer si deux objets sont "\xe9gaux" est un concept fondamental, surtout lorsque l\'on travaille avec des collections. Java fournit deux m\xe9thodes dans la classe ',(0,i.jsx)(s.code,{children:"Object"})," qui sont cruciales pour d\xe9finir et g\xe9rer l'\xe9galit\xe9 des objets : ",(0,i.jsx)(s.code,{children:"equals()"})," et ",(0,i.jsx)(s.code,{children:"hashCode()"}),". Comprendre leur contrat et comment les surcharger correctement est vital pour des applications robustes."]}),"\n",(0,i.jsxs)(s.h3,{id:"1-la-m\xe9thode-equals",children:["1. La m\xe9thode ",(0,i.jsx)(s.code,{children:"equals()"})]}),"\n",(0,i.jsxs)(s.p,{children:["La m\xe9thode ",(0,i.jsx)(s.code,{children:"equals()"})," est utilis\xe9e pour d\xe9terminer si deux objets sont logiquement \xe9gaux, en se basant sur leur contenu plut\xf4t que sur leur adresse m\xe9moire."]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsxs)(s.strong,{children:["Impl\xe9mentation par d\xe9faut (",(0,i.jsx)(s.code,{children:"Object.equals(Object obj)"}),"):"]}),"\r\nL'impl\xe9mentation par d\xe9faut de ",(0,i.jsx)(s.code,{children:"equals()"})," dans la classe ",(0,i.jsx)(s.code,{children:"Object"})," compare simplement les adresses m\xe9moire des deux objets, ce qui signifie que ",(0,i.jsx)(s.code,{children:"obj1.equals(obj2)"})," est \xe9quivalent \xe0 ",(0,i.jsx)(s.code,{children:"obj1 == obj2"}),". Elle retourne ",(0,i.jsx)(s.code,{children:"true"})," uniquement si les deux r\xe9f\xe9rences d'objets pointent vers le m\xeame objet en m\xe9moire."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:"public boolean equals(Object obj) {\r\n    return (this == obj); // V\xe9rifie l'\xe9galit\xe9 de r\xe9f\xe9rence\r\n}\n"})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsxs)(s.strong,{children:["Pourquoi surcharger ",(0,i.jsx)(s.code,{children:"equals()"}),"?"]}),"\r\nPour la plupart des classes personnalis\xe9es, vous voudrez d\xe9finir l'\xe9galit\xe9 bas\xe9e sur l'",(0,i.jsx)(s.em,{children:"\xe9tat"})," (les valeurs de leurs champs) des objets, et non seulement sur le fait qu'ils sont la m\xeame instance. Par exemple, deux objets ",(0,i.jsx)(s.code,{children:"Person"})," pourraient \xeatre consid\xe9r\xe9s comme \xe9gaux s'ils ont le m\xeame ",(0,i.jsx)(s.code,{children:"id"})," et le m\xeame ",(0,i.jsx)(s.code,{children:"name"}),", m\xeame s'il s'agit d'objets distincts en m\xe9moire."]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsxs)(s.strong,{children:["Contrat de ",(0,i.jsx)(s.code,{children:"equals()"})," (tel que sp\xe9cifi\xe9 dans ",(0,i.jsx)(s.code,{children:"java.lang.Object"}),"):"]}),"\r\nLorsque vous surchargez ",(0,i.jsx)(s.code,{children:"equals()"}),", vous ",(0,i.jsx)(s.em,{children:"devez"})," adh\xe9rer \xe0 ces cinq propri\xe9t\xe9s pour qu'elle se comporte correctement et de mani\xe8re pr\xe9visible, en particulier lorsqu'elle est utilis\xe9e dans des collections :"]}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"R\xe9flexivit\xe9:"})," Pour toute valeur de r\xe9f\xe9rence non nulle ",(0,i.jsx)(s.code,{children:"x"}),", ",(0,i.jsx)(s.code,{children:"x.equals(x)"})," doit retourner ",(0,i.jsx)(s.code,{children:"true"}),". (Un objet doit \xeatre \xe9gal \xe0 lui-m\xeame)."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Sym\xe9trie:"})," Pour toutes valeurs de r\xe9f\xe9rence non nulles ",(0,i.jsx)(s.code,{children:"x"})," et ",(0,i.jsx)(s.code,{children:"y"}),", ",(0,i.jsx)(s.code,{children:"x.equals(y)"})," doit retourner ",(0,i.jsx)(s.code,{children:"true"})," si et seulement si ",(0,i.jsx)(s.code,{children:"y.equals(x)"})," retourne ",(0,i.jsx)(s.code,{children:"true"}),". (Si A est \xe9gal \xe0 B, alors B doit \xeatre \xe9gal \xe0 A)."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Transitivit\xe9:"})," Pour toutes valeurs de r\xe9f\xe9rence non nulles ",(0,i.jsx)(s.code,{children:"x"}),", ",(0,i.jsx)(s.code,{children:"y"})," et ",(0,i.jsx)(s.code,{children:"z"}),", si ",(0,i.jsx)(s.code,{children:"x.equals(y)"})," retourne ",(0,i.jsx)(s.code,{children:"true"})," et ",(0,i.jsx)(s.code,{children:"y.equals(z)"})," retourne ",(0,i.jsx)(s.code,{children:"true"}),", alors ",(0,i.jsx)(s.code,{children:"x.equals(z)"})," doit retourner ",(0,i.jsx)(s.code,{children:"true"}),". (Si A est \xe9gal \xe0 B, et B est \xe9gal \xe0 C, alors A doit \xeatre \xe9gal \xe0 C)."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Consistance:"})," Pour toutes valeurs de r\xe9f\xe9rence non nulles ",(0,i.jsx)(s.code,{children:"x"})," et ",(0,i.jsx)(s.code,{children:"y"}),", de multiples invocations de ",(0,i.jsx)(s.code,{children:"x.equals(y)"})," doivent syst\xe9matiquement retourner ",(0,i.jsx)(s.code,{children:"true"})," ou syst\xe9matiquement retourner ",(0,i.jsx)(s.code,{children:"false"}),", \xe0 condition qu'aucune information utilis\xe9e dans les comparaisons ",(0,i.jsx)(s.code,{children:"equals"})," sur les objets ne soit modifi\xe9e. (L'\xe9galit\xe9 ne change pas \xe0 moins que l'\xe9tat de l'objet ne change)."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsxs)(s.strong,{children:["Gestion du ",(0,i.jsx)(s.code,{children:"null"}),":"]})," Pour toute valeur de r\xe9f\xe9rence non nulle ",(0,i.jsx)(s.code,{children:"x"}),", ",(0,i.jsx)(s.code,{children:"x.equals(null)"})," doit retourner ",(0,i.jsx)(s.code,{children:"false"}),". (Un objet n'est jamais \xe9gal \xe0 ",(0,i.jsx)(s.code,{children:"null"}),")."]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsxs)(s.strong,{children:["Mod\xe8le typique d'impl\xe9mentation de ",(0,i.jsx)(s.code,{children:"equals()"}),":"]})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:"public class MyClass {\r\n    private int id;\r\n    private String name;\r\n\r\n    public MyClass(int id, String name) {\r\n        this.id = id;\r\n        this.name = name;\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        // 1. V\xe9rifier l'\xe9galit\xe9 de r\xe9f\xe9rence (optimisation)\r\n        if (this == o) return true;\r\n        // 2. V\xe9rifier null et le type de classe\r\n        if (o == null || getClass() != o.getClass()) return false;\r\n        // Ou si vous utilisez instanceof pour le polymorphisme (attention au LSP et \xe0 la sym\xe9trie) :\r\n        // if (!(o instanceof MyClass)) return false;\r\n\r\n        // 3. Caster l'objet au type de la classe courante\r\n        MyClass myClass = (MyClass) o;\r\n\r\n        // 4. Comparer les champs pertinents\r\n        if (id != myClass.id) return false;\r\n        return name != null ? name.equals(myClass.name) : myClass.name == null;\r\n    }\r\n\r\n    // ... getters, setters, etc.\r\n}\n"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsxs)(s.strong,{children:["Pi\xe8ges courants avec ",(0,i.jsx)(s.code,{children:"equals()"}),":"]})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsxs)(s.strong,{children:["Violation de la sym\xe9trie (par exemple, avec ",(0,i.jsx)(s.code,{children:"instanceof"})," et l'h\xe9ritage):"]})," Si ",(0,i.jsx)(s.code,{children:"A.equals(B)"})," est vrai, ",(0,i.jsx)(s.code,{children:"B.equals(A)"})," doit \xeatre vrai. L'utilisation de ",(0,i.jsx)(s.code,{children:"instanceof"})," pour la v\xe9rification de type peut parfois violer la sym\xe9trie si des sous-classes sont impliqu\xe9es (par exemple, ",(0,i.jsx)(s.code,{children:"ColorPoint"})," \xe9tend ",(0,i.jsx)(s.code,{children:"Point"})," et ",(0,i.jsx)(s.code,{children:"equals"})," v\xe9rifie ",(0,i.jsx)(s.code,{children:"instanceof Point"}),"). Il est g\xe9n\xe9ralement plus s\xfbr d'utiliser ",(0,i.jsx)(s.code,{children:"getClass() != o.getClass()"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsxs)(s.strong,{children:["Oubli de surcharger ",(0,i.jsx)(s.code,{children:"hashCode()"}),":"]})," C'est le pi\xe8ge le plus critique, conduisant \xe0 un comportement incorrect dans les collections bas\xe9es sur le hachage."]}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsxs)(s.h3,{id:"2-la-m\xe9thode-hashcode",children:["2. La m\xe9thode ",(0,i.jsx)(s.code,{children:"hashCode()"})]}),"\n",(0,i.jsxs)(s.p,{children:["La m\xe9thode ",(0,i.jsx)(s.code,{children:"hashCode()"})," retourne une valeur de code de hachage enti\xe8re pour l'objet. Ce code de hachage est principalement utilis\xe9 par les collections bas\xe9es sur le hachage (comme ",(0,i.jsx)(s.code,{children:"HashMap"}),", ",(0,i.jsx)(s.code,{children:"HashSet"}),", ",(0,i.jsx)(s.code,{children:"Hashtable"}),") pour d\xe9terminer o\xf9 stocker et retrouver les objets efficacement."]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsxs)(s.strong,{children:["Impl\xe9mentation par d\xe9faut (",(0,i.jsx)(s.code,{children:"Object.hashCode()"}),"):"]}),"\r\nL'impl\xe9mentation par d\xe9faut de ",(0,i.jsx)(s.code,{children:"hashCode()"})," dans ",(0,i.jsx)(s.code,{children:"Object"})," retourne g\xe9n\xe9ralement un entier distinct pour des objets distincts. Il s'agit souvent de l'adresse m\xe9moire de l'objet convertie en entier, ou d'un autre identifiant unique bas\xe9 sur la repr\xe9sentation interne de l'objet."]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsxs)(s.strong,{children:["Pourquoi surcharger ",(0,i.jsx)(s.code,{children:"hashCode()"}),"?"]}),"\r\nSi vous surchargez ",(0,i.jsx)(s.code,{children:"equals()"}),", vous ",(0,i.jsx)(s.em,{children:"devez"})," \xe9galement surcharger ",(0,i.jsx)(s.code,{children:"hashCode()"})," pour maintenir le contrat g\xe9n\xe9ral de ",(0,i.jsx)(s.code,{children:"Object.hashCode()"}),"."]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsxs)(s.strong,{children:["Contrat de ",(0,i.jsx)(s.code,{children:"hashCode()"})," (tel que sp\xe9cifi\xe9 dans ",(0,i.jsx)(s.code,{children:"java.lang.Object"}),"):"]})}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Consistance:"})," Chaque fois qu'elle est invoqu\xe9e sur le m\xeame objet plus d'une fois pendant l'ex\xe9cution d'une application Java, la m\xe9thode ",(0,i.jsx)(s.code,{children:"hashCode"})," doit retourner le m\xeame entier de mani\xe8re coh\xe9rente, \xe0 condition qu'aucune information utilis\xe9e dans les comparaisons ",(0,i.jsx)(s.code,{children:"equals"})," sur l'objet ne soit modifi\xe9e. Cet entier n'a pas besoin de rester coh\xe9rent d'une ex\xe9cution de l'application \xe0 l'autre."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"L'\xe9galit\xe9 implique l'\xe9galit\xe9 des codes de hachage:"})," Si deux objets sont \xe9gaux selon la m\xe9thode ",(0,i.jsx)(s.code,{children:"equals(Object)"}),", alors l'appel de la m\xe9thode ",(0,i.jsx)(s.code,{children:"hashCode"})," sur chacun des deux objets doit produire le m\xeame r\xe9sultat entier."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"L'in\xe9galit\xe9 n'implique PAS l'in\xe9galit\xe9 des codes de hachage:"})," Il n'",(0,i.jsx)(s.em,{children:"est pas"})," requis que si deux objets sont in\xe9gaux selon la m\xe9thode ",(0,i.jsx)(s.code,{children:"equals(Object)"}),", alors l'appel de la m\xe9thode ",(0,i.jsx)(s.code,{children:"hashCode"})," sur chacun des deux objets doive produire des r\xe9sultats entiers distincts. Cependant, la production de r\xe9sultats entiers distincts pour des objets in\xe9gaux peut am\xe9liorer la performance des tables de hachage. (Les collisions sont autoris\xe9es mais doivent \xeatre minimis\xe9es)."]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsxs)(s.strong,{children:["Pourquoi le contrat ",(0,i.jsx)(s.code,{children:"equals()"})," et ",(0,i.jsx)(s.code,{children:"hashCode()"})," est crucial :"]})}),"\n",(0,i.jsxs)(s.p,{children:["Les collections bas\xe9es sur le hachage fonctionnent en calculant d'abord le ",(0,i.jsx)(s.code,{children:"hashCode()"})," d'un objet pour d\xe9terminer \xe0 quel \"compartiment\" il appartient. Ce n'est qu'ensuite qu'elles utilisent ",(0,i.jsx)(s.code,{children:"equals()"})," pour comparer les objets au sein de ce compartiment."]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsxs)(s.strong,{children:["Si vous surchargez ",(0,i.jsx)(s.code,{children:"equals()"})," mais pas ",(0,i.jsx)(s.code,{children:"hashCode()"})," :"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"obj1.equals(obj2)"})," pourrait retourner ",(0,i.jsx)(s.code,{children:"true"})," (car leur contenu est le m\xeame)."]}),"\n",(0,i.jsxs)(s.li,{children:["Mais ",(0,i.jsx)(s.code,{children:"obj1.hashCode()"})," et ",(0,i.jsx)(s.code,{children:"obj2.hashCode()"})," pourraient retourner des valeurs diff\xe9rentes (en raison de l'impl\xe9mentation par d\xe9faut qui retourne des valeurs distinctes pour des objets distincts)."]}),"\n",(0,i.jsxs)(s.li,{children:["Cela signifie que ",(0,i.jsx)(s.code,{children:"HashMap"})," ou ",(0,i.jsx)(s.code,{children:"HashSet"})," pourrait placer ",(0,i.jsx)(s.code,{children:"obj1"})," et ",(0,i.jsx)(s.code,{children:"obj2"})," dans des compartiments diff\xe9rents, et vous ne seriez pas en mesure de r\xe9cup\xe9rer ",(0,i.jsx)(s.code,{children:"obj1"})," en utilisant ",(0,i.jsx)(s.code,{children:"obj2"})," comme cl\xe9, ou un ",(0,i.jsx)(s.code,{children:"HashSet"}),' pourrait contenir deux objets "\xe9gaux". Cela rompt le comportement attendu de ces collections.']}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsxs)(s.strong,{children:["Mod\xe8le typique d'impl\xe9mentation de ",(0,i.jsx)(s.code,{children:"hashCode()"}),":"]}),"\r\nUne bonne impl\xe9mentation de ",(0,i.jsx)(s.code,{children:"hashCode()"})," combine les codes de hachage de tous les champs utilis\xe9s dans ",(0,i.jsx)(s.code,{children:"equals()"}),". Pour les champs primitifs, utilisez leur code de hachage direct (ou celui de leur classe enveloppe ",(0,i.jsx)(s.code,{children:"hashCode()"}),"). Pour les types de r\xe9f\xe9rence, utilisez leur ",(0,i.jsx)(s.code,{children:"hashCode()"}),". Les valeurs ",(0,i.jsx)(s.code,{children:"null"})," n\xe9cessitent un traitement sp\xe9cial (par exemple, retourner 0 ou une constante fixe)."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:"import java.util.Objects; // Utilitaire pour g\xe9n\xe9rer facilement des codes de hachage\r\n\r\npublic class MyClass {\r\n    private int id;\r\n    private String name;\r\n\r\n    // Constructeur, equals() comme ci-dessus...\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        // Utiliser Objects.hash() est la m\xe9thode la plus simple et recommand\xe9e\r\n        return Objects.hash(id, name);\r\n\r\n        // Exemple d'impl\xe9mentation manuelle :\r\n        // int result = id;\r\n        // result = 31 * result + (name != null ? name.hashCode() : 0);\r\n        // return result;\r\n    }\r\n}\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Le nombre 31 est un multiplicateur premier courant utilis\xe9 dans les calculs de ",(0,i.jsx)(s.code,{children:"hashCode()"})," car c'est un nombre premier impair. Multiplier par un nombre premier impair minimise les collisions et fonctionne bien dans les sc\xe9narios typiques."]}),"\n",(0,i.jsx)(s.h3,{id:"bonnes-pratiques",children:"Bonnes pratiques"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Toujours surcharger les deux:"})," Si vous surchargez ",(0,i.jsx)(s.code,{children:"equals()"}),", vous ",(0,i.jsx)(s.em,{children:"devez"})," surcharger ",(0,i.jsx)(s.code,{children:"hashCode()"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsxs)(s.strong,{children:["Utiliser les champs utilis\xe9s dans ",(0,i.jsx)(s.code,{children:"equals()"}),":"]})," Assurez-vous que les champs utilis\xe9s pour calculer ",(0,i.jsx)(s.code,{children:"hashCode()"})," sont les ",(0,i.jsx)(s.em,{children:"m\xeames champs exacts"})," utilis\xe9s dans la comparaison ",(0,i.jsx)(s.code,{children:"equals()"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Consistance:"})," Le ",(0,i.jsx)(s.code,{children:"hashCode()"})," doit retourner la m\xeame valeur pour un objet tant que les champs utilis\xe9s dans ",(0,i.jsx)(s.code,{children:"equals()"})," ne changent pas. Si les champs d'un objet changent, son code de hachage pourrait changer, ce qui peut causer des probl\xe8mes si l'objet est d\xe9j\xe0 stock\xe9 dans une collection bas\xe9e sur le hachage (il pourrait devenir \"perdu\"). Pour cette raison, les objets utilis\xe9s comme cl\xe9s dans ",(0,i.jsx)(s.code,{children:"HashMap"})," ou \xe9l\xe9ments dans ",(0,i.jsx)(s.code,{children:"HashSet"})," sont souvent rendus ",(0,i.jsx)(s.strong,{children:"immuables"})," ou au moins les champs utilis\xe9s dans ",(0,i.jsx)(s.code,{children:"equals()"})," et ",(0,i.jsx)(s.code,{children:"hashCode()"})," sont immuables."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"G\xe9n\xe9ration par l'IDE:"})," Les IDE modernes (comme IntelliJ IDEA, Eclipse) peuvent g\xe9n\xe9rer automatiquement les m\xe9thodes ",(0,i.jsx)(s.code,{children:"equals()"})," et ",(0,i.jsx)(s.code,{children:"hashCode()"})," en fonction des champs que vous s\xe9lectionnez. C'est fortement recommand\xe9 car cela aide \xe0 garantir la justesse et \xe0 adh\xe9rer aux bonnes pratiques."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsxs)(s.strong,{children:[(0,i.jsx)(s.code,{children:"Objects.hash()"}),":"]})," Depuis Java 7, ",(0,i.jsx)(s.code,{children:"java.util.Objects.hash(Object... values)"})," fournit un moyen pratique de g\xe9n\xe9rer des codes de hachage \xe0 partir de plusieurs champs, en g\xe9rant correctement les valeurs nulles."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Consid\xe9rations de performance:"})," Bien que l'objectif principal soit la justesse, un code de hachage bien distribu\xe9 (minimisant les collisions) est important pour la performance des collections bas\xe9es sur le hachage."]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["En impl\xe9mentant correctement ",(0,i.jsx)(s.code,{children:"equals()"})," et ",(0,i.jsx)(s.code,{children:"hashCode()"}),", vous vous assurez que vos objets personnalis\xe9s se comportent comme pr\xe9vu dans tous les contextes o\xf9 l'\xe9galit\xe9 des objets est importante, en particulier lorsqu'ils sont utilis\xe9s dans le puissant framework de collections de Java."]})]})}function u(e={}){const{wrapper:s}={...(0,l.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>t,x:()=>o});var r=n(6540);const i={},l=r.createContext(i);function t(e){const s=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(l.Provider,{value:s},e.children)}}}]);