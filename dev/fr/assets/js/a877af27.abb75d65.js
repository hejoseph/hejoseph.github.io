"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[5434],{2950:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"tech-related/microservices-architecture","title":"Microservices Architecture","description":"Overview","source":"@site/docs/tech-related/microservices-architecture.md","sourceDirName":"tech-related","slug":"/tech-related/microservices-architecture","permalink":"/dev/fr/docs/tech-related/microservices-architecture","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Comment M3U8 fonctionne sur VLC","permalink":"/dev/fr/docs/tech-related/m3u8"},"next":{"title":"Git Professionnel","permalink":"/dev/fr/docs/Git/master-git"}}');var s=n(4848),c=n(8453);const t={},l="Microservices Architecture",o={},a=[{value:"Overview",id:"overview",level:2},{value:"Key Concepts",id:"key-concepts",level:2},{value:"Benefits",id:"benefits",level:2},{value:"Challenges",id:"challenges",level:2},{value:"Typical Use Cases",id:"typical-use-cases",level:2},{value:"Example Diagram",id:"example-diagram",level:2},{value:"Related Concepts",id:"related-concepts",level:2},{value:"References",id:"references",level:2}];function d(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"microservices-architecture",children:"Microservices Architecture"})}),"\n",(0,s.jsx)(i.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(i.p,{children:"Microservices architecture is a software design pattern in which an application is structured as a collection of loosely coupled, independently deployable services. Each microservice is responsible for a discrete piece of functionality and communicates with others through well-defined APIs\u2014often over HTTP or messaging queues."}),"\n",(0,s.jsx)(i.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Service Independence:"})," Each component (microservice) is independently deployable, scalable, and maintained by a small, autonomous team."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Single Responsibility:"})," Every service typically focuses on a specific business function (e.g., user management, billing, inventory)."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Decentralized Data Management:"})," Each microservice manages its own database or data source, promoting loose coupling between services."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"API Communication:"})," Services interact via lightweight mechanisms, commonly RESTful HTTP APIs, message brokers (e.g. RabbitMQ, Kafka), or gRPC."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Fault Isolation:"})," Failures are contained to individual services, preventing cascading failures across the entire application."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Polyglot Development:"})," Different microservices might be built with different programming languages, frameworks, or data stores depending on their requirements."]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"benefits",children:"Benefits"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Scalability:"})," Services can be scaled independently based on their resource requirements."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Agility:"})," Teams work in parallel, speeding up development and deployment cycles."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Resilience:"})," The isolation of services limits the impact of individual failures."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Technology Diversity:"})," Teams can choose technology stacks that best fit the service\u2019s needs."]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"challenges",children:"Challenges"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Distributed Complexity:"})," Increased network communication, versioning, and debugging difficulty."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Data Consistency:"})," Managing transactions and maintaining consistency between services can be difficult."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Operational Overhead:"})," Requires orchestration, monitoring, containerization (e.g., Docker, Kubernetes)."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Deployment Automation:"})," Continuous Integration/Continuous Deployment (CI/CD) pipelines become crucial."]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"typical-use-cases",children:"Typical Use Cases"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Large-scale, rapidly evolving, or complex enterprise applications."}),"\n",(0,s.jsx)(i.li,{children:"Scenarios requiring independent scaling, frequent releases, or targeted technology stacks."}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"example-diagram",children:"Example Diagram"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{children:"+-----------+      +------------+      +-----------+\r\n|  Service  | ==>  |  Service   | ==>  |  Service  |\r\n|   User    |      |  Billing   |      | Inventory |\r\n+-----------+      +------------+      +-----------+\r\n      ^                   |                  |\r\n      |                   v                  |\r\n   (API Gateway) <----- (Clients) -------\x3e (Other Services)\n"})}),"\n",(0,s.jsx)(i.h2,{id:"related-concepts",children:"Related Concepts"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Monolithic Architecture:"})," Opposite approach\u2014entire application in a single codebase/process."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"SOA (Service Oriented Architecture):"})," Microservices are a modern evolution of SOA principles, differing mainly in granularity, independence, and decentralization."]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"references",children:"References"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.a,{href:"https://martinfowler.com/articles/microservices.html",children:"Martin Fowler on Microservices"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.a,{href:"https://www.oreilly.com/library/view/building-microservices/9781491950340/",children:"Building Microservices (Sam Newman)"})}),"\n"]})]})}function h(e={}){const{wrapper:i}={...(0,c.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>t,x:()=>l});var r=n(6540);const s={},c=r.createContext(s);function t(e){const i=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(c.Provider,{value:i},e.children)}}}]);