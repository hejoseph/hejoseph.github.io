"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[7380],{8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>d});var t=s(6540);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}},9540:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>a,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"Portfolio/CodeTyper/code-deep-dive","title":"CodeTyper Use Case: Code Deep Dive","description":"This document provides a detailed, line-by-line explanation of the CodeTyper.tsx component, which is the heart of the CodeTyper application.","source":"@site/docs/Portfolio/CodeTyper/04-code-deep-dive.md","sourceDirName":"Portfolio/CodeTyper","slug":"/Portfolio/CodeTyper/code-deep-dive","permalink":"/dev/fr/docs/Portfolio/CodeTyper/code-deep-dive","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"CodeTyper Use Case: Solutions","permalink":"/dev/fr/docs/Portfolio/CodeTyper/solutions"},"next":{"title":"CodeTyper Use Case: Code Breakdown - CodeTyper.tsx","permalink":"/dev/fr/docs/Portfolio/CodeTyper/Code-Breakdown/CodeTyper"}}');var i=s(4848),r=s(8453);const o={},d="CodeTyper Use Case: Code Deep Dive",c={},l=[{value:"State Management",id:"state-management",level:2},{value:"Core Functions",id:"core-functions",level:2},{value:"Rendering Logic",id:"rendering-logic",level:2},{value:"Conclusion",id:"conclusion",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"codetyper-use-case-code-deep-dive",children:"CodeTyper Use Case: Code Deep Dive"})}),"\n",(0,i.jsxs)(n.p,{children:["This document provides a detailed, line-by-line explanation of the ",(0,i.jsx)(n.code,{children:"CodeTyper.tsx"})," component, which is the heart of the CodeTyper application."]}),"\n",(0,i.jsx)(n.h2,{id:"state-management",children:"State Management"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"CodeTyper"})," component uses a number of state variables to manage its complex behavior. Here is a breakdown of each one:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"selectedLanguage"}),": The programming language that is currently selected by the user."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"customCode"}),": The code that the user has provided to practice with."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"selectedTab"}),': The tab that is currently selected by the user (either "Sample Code" or "Custom Code").']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"selectedLLM"}),": The large language model that is currently selected by the user."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"prompt"}),": The prompt that the user has provided to generate code with."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"isGenerating"}),": A boolean that indicates whether the application is currently generating code."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"geminiApiKey"}),": The user's Gemini API key."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"typingCode"}),": The code that the user is currently typing."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"wpm"}),": The user's words per minute."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"accuracy"}),": The user's typing accuracy."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"errors"}),": The number of errors that the user has made."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"typingStarted"}),": A boolean that indicates whether the user has started typing."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"typedChars"}),": The characters that the user has typed so far."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"currentCharIndex"}),": The index of the character that the user is currently typing."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"cursorPosition"}),": The position of the cursor in the code editor."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"startTime"}),": The time at which the user started typing."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"typingErrors"}),": An array of objects that contains information about the errors that the user has made."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"core-functions",children:"Core Functions"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"CodeTyper"})," component has a number of core functions that are responsible for its behavior. Here is a breakdown of each one:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"handleKeyDown"}),": This function is called every time the user presses a key. It is responsible for handling all of the user's input, including special keys like ",(0,i.jsx)(n.code,{children:"Tab"}),", ",(0,i.jsx)(n.code,{children:"Enter"}),", and ",(0,i.jsx)(n.code,{children:"Backspace"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"handleEnterKey"}),": This function is called when the user presses the ",(0,i.jsx)(n.code,{children:"Enter"})," key. It is responsible for adding a newline character to the user's typed text and then inserting the same indentation as the previous line."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"handleBackspaceKey"}),": This function is called when the user presses the ",(0,i.jsx)(n.code,{children:"Backspace"}),' key. It is responsible for deleting characters from the user\'s typed text. It also includes a "smart backspace" feature that allows the user to delete entire blocks of indentation at once.']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"resetTyping"}),': This function is called when the user clicks the "Restart" button. It is responsible for resetting the application to its initial state.']}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"rendering-logic",children:"Rendering Logic"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"CodeTyper"})," component uses the ",(0,i.jsx)(n.code,{children:"renderTypingArea"})," function to render the code editor. This function uses the ",(0,i.jsx)(n.code,{children:"highlight.js"})," library to provide syntax highlighting for the code. It also includes logic to display the user's typed text, the cursor, and any errors that the user has made."]}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"CodeTyper.tsx"})," component is a complex piece of code, but it is also a powerful one. It is responsible for all of the core functionality of the CodeTyper application, and it provides a robust and user-friendly way for developers to practice their typing skills."]})]})}function a(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);