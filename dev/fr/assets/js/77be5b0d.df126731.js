"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[7715],{131:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"Portfolio/CodeTyper/challenges","title":"CodeTyper Use Case: Challenges","description":"This document outlines the primary challenges encountered during the development of the CodeTyper application.","source":"@site/docs/Portfolio/CodeTyper/02-challenges.md","sourceDirName":"Portfolio/CodeTyper","slug":"/Portfolio/CodeTyper/challenges","permalink":"/dev/fr/docs/Portfolio/CodeTyper/challenges","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"CodeTyper Use Case: Introduction","permalink":"/dev/fr/docs/Portfolio/CodeTyper/introduction"},"next":{"title":"CodeTyper Use Case: Solutions","permalink":"/dev/fr/docs/Portfolio/CodeTyper/solutions"}}');var o=n(4848),s=n(8453);const r={},a="CodeTyper Use Case: Challenges",l={},d=[{value:"1. Simulating a Real Code Editor",id:"1-simulating-a-real-code-editor",level:2},{value:"2. Real-time WPM Calculation",id:"2-real-time-wpm-calculation",level:2},{value:"3. Handling User-Provided Code",id:"3-handling-user-provided-code",level:2},{value:"4. State Management",id:"4-state-management",level:2},{value:"The Solutions",id:"the-solutions",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"codetyper-use-case-challenges",children:"CodeTyper Use Case: Challenges"})}),"\n",(0,o.jsx)(t.p,{children:"This document outlines the primary challenges encountered during the development of the CodeTyper application."}),"\n",(0,o.jsx)(t.h2,{id:"1-simulating-a-real-code-editor",children:"1. Simulating a Real Code Editor"}),"\n",(0,o.jsx)(t.p,{children:"The most significant challenge was to replicate the behavior of a real code editor within the constraints of a typing tutor application. This involved several key features:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Automatic Indentation:"})," When the user presses ",(0,o.jsx)(t.code,{children:"Enter"}),", the new line should automatically have the same indentation as the previous line. This is more complex than it sounds, as the correct indentation can vary depending on the context of the code (e.g., a line with a closing brace should have less indentation than the previous line)."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Smart Backspace:"})," The ",(0,o.jsx)(t.code,{children:"Backspace"})," key should be able to delete entire blocks of indentation at once, rather than requiring the user to press the key multiple times."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Cursor Synchronization:"})," The cursor must remain synchronized with the user's typing, even when the typed text temporarily deviates from the target code (e.g., when the user has incorrect indentation)."]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"2-real-time-wpm-calculation",children:"2. Real-time WPM Calculation"}),"\n",(0,o.jsx)(t.p,{children:"Calculating the user's words per minute (WPM) in real-time presented another challenge. The initial implementation only updated the WPM when the user paused typing, which did not provide a live, continuous feedback loop. The solution required a more sophisticated timer implementation that would not be reset on every keystroke."}),"\n",(0,o.jsx)(t.h2,{id:"3-handling-user-provided-code",children:"3. Handling User-Provided Code"}),"\n",(0,o.jsx)(t.p,{children:"The application allows users to provide their own code to practice with. This introduced a number of complexities:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Syntax Highlighting:"})," The application must be able to apply syntax highlighting to any code snippet provided by the user, regardless of the language."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Error Handling:"})," The application must be robust enough to handle malformed or incomplete code without crashing."]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"4-state-management",children:"4. State Management"}),"\n",(0,o.jsx)(t.p,{children:"The application's state is complex, with many different pieces of information to track (e.g., the user's typed text, the current character index, the cursor position, the WPM, the accuracy, etc.). Managing this state effectively was a key challenge, and it required careful use of React's state management features."}),"\n",(0,o.jsx)(t.h2,{id:"the-solutions",children:"The Solutions"}),"\n",(0,o.jsx)(t.p,{children:"The following documents in this series will detail the solutions that were implemented to address these challenges."})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var i=n(6540);const o={},s=i.createContext(o);function r(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);