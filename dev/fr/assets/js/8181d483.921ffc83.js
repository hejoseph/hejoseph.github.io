"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[1740],{7663:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"java/Core/OOP/composition-inheritance","title":"Composition plut\xf4t qu\'h\xe9ritage","description":"\\"Composition plut\xf4t qu\'h\xe9ritage\\" (\xe9galement connu sous le nom de \\"privil\xe9gier la composition \xe0 l\'h\xe9ritage\\") est un principe de conception en programmation orient\xe9e objet qui sugg\xe8re que les classes devraient acqu\xe9rir de nouvelles fonctionnalit\xe9s en composant des objets de classes existantes (c\'est-\xe0-dire en contenant des instances d\'autres classes) plut\xf4t qu\'en h\xe9ritant d\'elles. Ce principe favorise une plus grande flexibilit\xe9, un couplage r\xe9duit et une meilleure r\xe9utilisabilit\xe9 du code.","source":"@site/i18n/fr/docusaurus-plugin-content-docs/current/java/1-Core/1-OOP/3-composition-inheritance.md","sourceDirName":"java/1-Core/1-OOP","slug":"/java/Core/OOP/composition-inheritance","permalink":"/dev/fr/docs/java/Core/OOP/composition-inheritance","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"java","permalink":"/dev/fr/docs/tags/java"},{"inline":true,"label":"oop","permalink":"/dev/fr/docs/tags/oop"},{"inline":true,"label":"design patterns","permalink":"/dev/fr/docs/tags/design-patterns"},{"inline":true,"label":"composition","permalink":"/dev/fr/docs/tags/composition"},{"inline":true,"label":"inheritance","permalink":"/dev/fr/docs/tags/inheritance"}],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Composition plut\xf4t qu\'h\xe9ritage","sidebar_position":3,"tags":["java","oop","design patterns","composition","inheritance"]},"sidebar":"tutorialSidebar","previous":{"title":"Interfaces vs. Classes Abstraites","permalink":"/dev/fr/docs/java/Core/OOP/interface-abstract"},"next":{"title":"Principes SOLID","permalink":"/dev/fr/docs/java/Core/OOP/solid-principles"}}');var t=s(4848),r=s(8453);const o={title:"Composition plut\xf4t qu'h\xe9ritage",sidebar_position:3,tags:["java","oop","design patterns","composition","inheritance"]},l=void 0,a={},c=[{value:"Le probl\xe8me avec l&#39;h\xe9ritage",id:"le-probl\xe8me-avec-lh\xe9ritage",level:3},{value:"Qu&#39;est-ce que la composition ?",id:"quest-ce-que-la-composition-",level:3},{value:"Avantages de la composition",id:"avantages-de-la-composition",level:3},{value:"Inconv\xe9nients de la composition",id:"inconv\xe9nients-de-la-composition",level:3},{value:"Exemple illustratif : Une <code>Voiture</code> et son <code>Moteur</code>",id:"exemple-illustratif--une-voiture-et-son-moteur",level:3},{value:"Quand choisir l&#39;un ou l&#39;autre",id:"quand-choisir-lun-ou-lautre",level:3}];function u(e){const n={code:"code",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"\"Composition plut\xf4t qu'h\xe9ritage\" (\xe9galement connu sous le nom de \"privil\xe9gier la composition \xe0 l'h\xe9ritage\") est un principe de conception en programmation orient\xe9e objet qui sugg\xe8re que les classes devraient acqu\xe9rir de nouvelles fonctionnalit\xe9s en composant des objets de classes existantes (c'est-\xe0-dire en contenant des instances d'autres classes) plut\xf4t qu'en h\xe9ritant d'elles. Ce principe favorise une plus grande flexibilit\xe9, un couplage r\xe9duit et une meilleure r\xe9utilisabilit\xe9 du code."}),"\n",(0,t.jsx)(n.h3,{id:"le-probl\xe8me-avec-lh\xe9ritage",children:"Le probl\xe8me avec l'h\xe9ritage"}),"\n",(0,t.jsxs)(n.p,{children:["Bien que l'h\xe9ritage (mot-cl\xe9 ",(0,t.jsx)(n.code,{children:"extends"})," en Java) soit un concept fondamental de la POO pour la r\xe9utilisation du code et le polymorphisme, il peut entra\xeener plusieurs probl\xe8mes, en particulier dans les syst\xe8mes complexes :"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Couplage fort :"})," L'h\xe9ritage cr\xe9e une relation forte et rigide entre la classe parente (super-classe) et la classe enfant (sous-classe). La sous-classe devient d\xe9pendante des d\xe9tails d'impl\xe9mentation de la super-classe. Les modifications apport\xe9es \xe0 la super-classe peuvent affecter de mani\xe8re inattendue les sous-classes (le \"probl\xe8me de la classe de base fragile\")."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Violations du Principe de Substitution de Liskov (LSP) :"})," Parfois, les d\xe9veloppeurs utilisent l'h\xe9ritage uniquement pour la r\xe9utilisation du code, m\xeame lorsque la relation \"est un\" (qu'implique l'h\xe9ritage) n'est pas strictement vraie. Cela peut conduire \xe0 des sous-classes qui ne peuvent pas \xeatre substitu\xe9es \xe0 leur super-classe sans compromettre la correction du programme."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Flexibilit\xe9 limit\xe9e :"})," Une classe ne peut h\xe9riter que d'une seule super-classe en Java (h\xe9ritage simple). Si une classe a besoin de fonctionnalit\xe9s provenant de plusieurs sources non li\xe9es, l'h\xe9ritage devient probl\xe9matique."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Exposition des internes de la super-classe :"})," L'h\xe9ritage expose souvent les membres prot\xe9g\xe9s, voire priv\xe9s, de la super-classe aux sous-classes, ce qui affaiblit l'encapsulation."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Difficult\xe9 \xe0 modifier le comportement \xe0 l'ex\xe9cution :"})," Le comportement h\xe9rit\xe9 d'une super-classe est fix\xe9 au moment de la compilation. Il est difficile de modifier dynamiquement le comportement h\xe9rit\xe9 d'un objet."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"quest-ce-que-la-composition-",children:"Qu'est-ce que la composition ?"}),"\n",(0,t.jsx)(n.p,{children:"La composition implique la construction d'objets complexes en combinant des objets plus simples et existants. Au lieu d'h\xe9riter du comportement d'une classe de base, une classe acquiert un nouveau comportement en d\xe9tenant une instance d'une autre classe et en d\xe9l\xe9guant des t\xe2ches \xe0 cette instance. Cela cr\xe9e une relation \"a un\"."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Exemple :"})," Une ",(0,t.jsx)(n.code,{children:"Voiture"}),' "a un" ',(0,t.jsx)(n.code,{children:"Moteur"}),", plut\xf4t qu'une ",(0,t.jsx)(n.code,{children:"Voiture"}),' "est un" ',(0,t.jsx)(n.code,{children:"Moteur"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"avantages-de-la-composition",children:"Avantages de la composition"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Flexibilit\xe9 et adaptabilit\xe9 :"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Changements de comportement \xe0 l'ex\xe9cution :"})," Les comportements peuvent \xeatre modifi\xe9s \xe0 l'ex\xe9cution en rempla\xe7ant l'objet compos\xe9 par un autre objet qui impl\xe9mente la m\xeame interface. C'est une id\xe9e fondamentale derri\xe8re les strat\xe9gies et l'injection de d\xe9pendances."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Comportements multiples :"})," Une classe peut composer plusieurs objets diff\xe9rents, r\xe9alisant ainsi efficacement plusieurs comportements sans les limitations de l'h\xe9ritage simple."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Couplage faible :"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"D\xe9pendances r\xe9duites :"})," La classe composante interagit avec l'objet compos\xe9 via son interface, et non ses d\xe9tails d'impl\xe9mentation. Cela r\xe9duit la d\xe9pendance entre les classes."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Encapsulation :"})," L'impl\xe9mentation interne de l'objet compos\xe9 est masqu\xe9e de la classe composante, favorisant une meilleure encapsulation."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Tests plus faciles :"})," \xc9tant donn\xe9 que les composants sont moins coupl\xe9s, ils sont g\xe9n\xe9ralement plus faciles \xe0 tester de mani\xe8re isol\xe9e."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Meilleure r\xe9utilisabilit\xe9 du code :"})," Les composants individuels (les objets compos\xe9s) peuvent \xeatre r\xe9utilis\xe9s dans diff\xe9rents contextes en \xe9tant compos\xe9s dans diverses classes."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Meilleure ad\xe9quation aux relations du monde r\xe9el :"}),' Souvent, les relations du monde r\xe9el sont des relations "a un" (composition) plut\xf4t que "est un" (h\xe9ritage).']}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"inconv\xe9nients-de-la-composition",children:"Inconv\xe9nients de la composition"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Augmentation du nombre d'objets :"})," Vous pourriez vous retrouver avec plus d'objets et de classes par rapport \xe0 une hi\xe9rarchie d'h\xe9ritage pure, ce qui pourrait sembler plus complexe au d\xe9but."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Surcharge de d\xe9l\xe9gation :"}),' Vous devez souvent \xe9crire du code de "d\xe9l\xe9gation" \u2013 des m\xe9thodes dans la classe composante qui appellent simplement des m\xe9thodes sur l\'objet compos\xe9. Cela peut parfois ressembler \xe0 du code passe-partout, bien que les IDE et parfois les fonctionnalit\xe9s du langage puissent aider.']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"D\xe9pendance \xe0 l'interface :"})," L'efficacit\xe9 de la composition repose fortement sur des interfaces bien d\xe9finies pour les objets compos\xe9s."]}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"exemple-illustratif--une-voiture-et-son-moteur",children:["Exemple illustratif : Une ",(0,t.jsx)(n.code,{children:"Voiture"})," et son ",(0,t.jsx)(n.code,{children:"Moteur"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Utilisation de l'h\xe9ritage (moins id\xe9al pour ce sc\xe9nario) :"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Pas une bonne conception pour la relation typique voiture/moteur\r\nclass Engine {\r\n    public void start() {\r\n        System.out.println("Le moteur d\xe9marre.");\r\n    }\r\n    public void stop() {\r\n        System.out.println("Le moteur s\'arr\xeate.");\r\n    }\r\n}\r\n\r\nclass Car extends Engine { // Probl\xe8me : Une Voiture "est un" Moteur, ce qui n\'est pas vrai\r\n    public void drive() {\r\n        start(); // M\xe9thode h\xe9rit\xe9e\r\n        System.out.println("La voiture roule.");\r\n    }\r\n}\r\n\r\n// Probl\xe8me : Que se passe-t-il si nous voulons changer le type de moteur de la Voiture \xe0 l\'ex\xe9cution ?\r\n// Ou avoir diff\xe9rents types de moteurs comme ElectricEngine, PetrolEngine ?\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Utilisation de la composition (pr\xe9f\xe9r\xe9) :"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// D\xe9finir une interface pour le comportement dont nous avons besoin\r\ninterface Startable {\r\n    void start();\r\n    void stop();\r\n}\r\n\r\n// Impl\xe9mentations concr\xe8tes du comportement\r\nclass PetrolEngine implements Startable {\r\n    @Override\r\n    public void start() {\r\n        System.out.println("Le moteur essence d\xe9marre avec un rugissement.");\r\n    }\r\n    @Override\r\n    public void stop() {\r\n        System.out.println("Le moteur essence s\'arr\xeate.");\r\n    }\r\n}\r\n\r\nclass ElectricEngine implements Startable {\r\n    @Override\r\n    public void start() {\r\n        System.out.println("Le moteur \xe9lectrique bourdonne et prend vie.");\r\n    }\r\n    @Override\r\n    public void stop() {\r\n        System.out.println("Le moteur \xe9lectrique s\'arr\xeate silencieusement.");\r\n    }\r\n}\r\n\r\n// La classe Car compose un Moteur (ou tout objet Startable)\r\nclass Car {\r\n    private Startable engine; // La Voiture "a un" Startable (type d\'interface)\r\n\r\n    // Injection par constructeur : le moteur est fourni de l\'ext\xe9rieur\r\n    public Car(Startable engine) {\r\n        this.engine = engine;\r\n    }\r\n\r\n    // Injection par mutateur : permet de changer le moteur \xe0 l\'ex\xe9cution\r\n    public void setEngine(Startable engine) {\r\n        this.engine = engine;\r\n    }\r\n\r\n    public void drive() {\r\n        if (engine != null) {\r\n            engine.start(); // D\xe9l\xe9guer \xe0 l\'objet compos\xe9\r\n            System.out.println("La voiture roule.");\r\n        } else {\r\n            System.out.println("Pas de moteur pour faire rouler la voiture.");\r\n        }\r\n    }\r\n\r\n    public void stopDriving() {\r\n        if (engine != null) {\r\n            engine.stop(); // D\xe9l\xe9guer \xe0 l\'objet compos\xe9\r\n            System.out.println("La voiture s\'est arr\xeat\xe9e.");\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Car petrolCar = new Car(new PetrolEngine());\r\n        petrolCar.drive();\r\n        petrolCar.stopDriving();\r\n\r\n        System.out.println("--- Changement de moteur ---");\r\n\r\n        Car electricCar = new Car(new ElectricEngine());\r\n        electricCar.drive();\r\n        electricCar.stopDriving();\r\n        \r\n        // Exemple de changement de moteur \xe0 l\'ex\xe9cution (si la conception le permet)\r\n        petrolCar.setEngine(new ElectricEngine());\r\n        petrolCar.drive(); \r\n    }\r\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Dans l'exemple de composition, la classe ",(0,t.jsx)(n.code,{children:"Car"})," n'h\xe9rite pas de ",(0,t.jsx)(n.code,{children:"Engine"}),". Au lieu de cela, elle contient une instance d'un objet qui impl\xe9mente l'interface ",(0,t.jsx)(n.code,{children:"Startable"}),". Cela nous permet de remplacer facilement diff\xe9rents types de moteurs (par exemple, ",(0,t.jsx)(n.code,{children:"PetrolEngine"}),", ",(0,t.jsx)(n.code,{children:"ElectricEngine"}),") sans modifier la classe ",(0,t.jsx)(n.code,{children:"Car"})," elle-m\xeame, ce qui offre une plus grande flexibilit\xe9."]}),"\n",(0,t.jsx)(n.h3,{id:"quand-choisir-lun-ou-lautre",children:"Quand choisir l'un ou l'autre"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Choisissez l'h\xe9ritage lorsque :"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:['Il existe une relation "est un" claire et ind\xe9niable (par exemple, un ',(0,t.jsx)(n.code,{children:"Chien"}),' "est un" ',(0,t.jsx)(n.code,{children:"Animal"}),")."]}),"\n",(0,t.jsx)(n.li,{children:"Vous souhaitez r\xe9utiliser une impl\xe9mentation commune et l'\xe9tendre."}),"\n",(0,t.jsx)(n.li,{children:"La classe de base et les sous-classes sont fortement coupl\xe9es et forment une unit\xe9 unique et coh\xe9sive."}),"\n",(0,t.jsx)(n.li,{children:"Vous souhaitez tirer parti du polymorphisme o\xf9 les sous-classes sont directement substituables \xe0 la super-classe (le LSP est respect\xe9)."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Choisissez la composition lorsque :"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:['Il existe une relation "a un" (par exemple, une ',(0,t.jsx)(n.code,{children:"Voiture"}),' "a un" ',(0,t.jsx)(n.code,{children:"Moteur"}),")."]}),"\n",(0,t.jsx)(n.li,{children:"Vous souhaitez obtenir de la flexibilit\xe9 et la capacit\xe9 de modifier le comportement \xe0 l'ex\xe9cution."}),"\n",(0,t.jsx)(n.li,{children:"Vous souhaitez r\xe9duire le couplage entre les classes."}),"\n",(0,t.jsx)(n.li,{children:"Vous avez besoin de r\xe9utiliser le comportement de plusieurs sources non li\xe9es."}),"\n",(0,t.jsx)(n.li,{children:"Le comportement dont vous avez besoin est ind\xe9pendant de la hi\xe9rarchie des classes."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Dans la conception POO moderne, la \"Composition plut\xf4t qu'h\xe9ritage\" est g\xe9n\xe9ralement pr\xe9f\xe9r\xe9e car elle conduit \xe0 des syst\xe8mes plus flexibles, maintenables et robustes. L'h\xe9ritage doit \xeatre utilis\xe9 avec discernement, g\xe9n\xe9ralement pour cr\xe9er des hi\xe9rarchies bien d\xe9finies o\xf9 la relation \"est un\" est forte et o\xf9 les avantages de l'impl\xe9mentation partag\xe9e l'emportent sur le potentiel de couplage fort."})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var i=s(6540);const t={},r=i.createContext(t);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);