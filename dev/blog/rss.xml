<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="rss.xsl"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Tech Journey Blog</title>
        <link>https://hejoseph.com/dev/blog</link>
        <description>Tech Journey Blog</description>
        <lastBuildDate>Mon, 09 Jun 2025 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Stack Overflow's Demise]]></title>
            <link>https://hejoseph.com/dev/blog/stack-overflow-decline</link>
            <guid>https://hejoseph.com/dev/blog/stack-overflow-decline</guid>
            <pubDate>Mon, 09 Jun 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[The Quiet Demise of Stack Overflow: More Than Just an AI Story]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-quiet-demise-of-stack-overflow-more-than-just-an-ai-story">The Quiet Demise of Stack Overflow: More Than Just an AI Story<a href="https://hejoseph.com/dev/blog/stack-overflow-decline#the-quiet-demise-of-stack-overflow-more-than-just-an-ai-story" class="hash-link" aria-label="Direct link to The Quiet Demise of Stack Overflow: More Than Just an AI Story" title="Direct link to The Quiet Demise of Stack Overflow: More Than Just an AI Story">​</a></h2>
<p>Remember Stack Overflow? For over a decade, it was the undisputed digital cathedral for developers, the first tab you opened when a coding problem stumped you. It was the collective brain of the programming world, a place where answers were forged through community wisdom and rigorous peer review.</p>
<p>But new data and a compelling analysis suggest this titan of tech support is quietly, perhaps even rapidly, fading into irrelevance. And while large language models (LLMs) like ChatGPT have undeniably played a role in its recent struggles, a deeper dive reveals a more complex truth: Stack Overflow was already on a downward spiral, a trajectory set by its own internal decisions and culture, long before AI became a mainstream threat.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-numbers-dont-lie-a-dwindling-community">The Numbers Don't Lie: A Dwindling Community<a href="https://hejoseph.com/dev/blog/stack-overflow-decline#the-numbers-dont-lie-a-dwindling-community" class="hash-link" aria-label="Direct link to The Numbers Don't Lie: A Dwindling Community" title="Direct link to The Numbers Don't Lie: A Dwindling Community">​</a></h3>
<p>The most glaring evidence of Stack Overflow's decline is the dramatic drop in question volume. A chilling graph highlights a significant decrease, starting as early as 2014, and then accelerating sharply after the launch of ChatGPT.</p>
<p>The data is stark: <strong>"the volume of questions posed has almost dried up."</strong> In fact, the monthly question count is now <strong>"as low as at Stack Overflow's launch in 2009."</strong> As one observed, <strong>"whoa, that's crazy, it's so crazy,"</strong> to see fewer questions today than when they first started programming. This isn't just a dip; it's a plunge.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="chatgpt-the-accelerator-not-the-sole-cause">ChatGPT: The Accelerator, Not the Sole Cause<a href="https://hejoseph.com/dev/blog/stack-overflow-decline#chatgpt-the-accelerator-not-the-sole-cause" class="hash-link" aria-label="Direct link to ChatGPT: The Accelerator, Not the Sole Cause" title="Direct link to ChatGPT: The Accelerator, Not the Sole Cause">​</a></h3>
<p>There's no denying the immediate impact of LLMs. As soon as ChatGPT burst onto the scene, Stack Overflow's question volume plummeted. Why? Because tools like ChatGPT offer swift, polite, and eerily accurate answers. They're trained on vast datasets, <strong>"including potentially the content of Stack Overflow,"</strong> providing similar quality but with a far more agreeable user experience. Unlike Stack Overflow's moderators, <strong>"ChatGPT is polite and answers all questions."</strong> It's the ultimate low-friction, high-reward information source for many developers.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-self-inflicted-wounds-culture-and-missed-opportunities">The Self-Inflicted Wounds: Culture and Missed Opportunities<a href="https://hejoseph.com/dev/blog/stack-overflow-decline#the-self-inflicted-wounds-culture-and-missed-opportunities" class="hash-link" aria-label="Direct link to The Self-Inflicted Wounds: Culture and Missed Opportunities" title="Direct link to The Self-Inflicted Wounds: Culture and Missed Opportunities">​</a></h3>
<p>But let's be clear: ChatGPT wasn't the <em>primary</em> cause of the initial rot. The analysis strongly argues that Stack Overflow committed fundamental strategic and cultural errors well before AI entered the picture.</p>
<p><strong>1. A Culture of "Toxic Gatekeeping":</strong>
The site's moderation culture is described as overtly <strong>"toxic"</strong> and a breeding ground for <strong>"gatekeeping."</strong> Moderators were often perceived as aggressive, quick to close legitimate questions, even those offering valuable insights or aiding understanding. One user lamented, <strong>"Stack Overflow was a product people generally didn't like, it was more that they just had to be there."</strong> Another insightfully noted, <strong>"I stopped asking questions at that time because the site felt unwelcoming."</strong> This unwelcoming atmosphere, ironically, appears to have coincided with the start of the decline. In 2014, when <strong>"Stack Overflow significantly improved moderator efficiency,"</strong> questions began to drop. More efficient moderation, it seems, meant more questions closed, alienating a large segment of its user base.</p>
<p><strong>2. A Glaring Lack of Innovation (Integration is King):</strong>
Perhaps the most staggering oversight was Stack Overflow's failure to innovate where it mattered most: direct integration. The document highlights a crucial missed opportunity: why did Stack Overflow never develop an official plugin for popular Integrated Development Environments (IDEs) like VS Code?</p>
<p>As the author points out, <strong>"They should have had this Stack Overflow plugin from, like, 2017, 2018. Why wouldn't they do that?"</strong> Developers live in their IDEs, and instant access to Stack Overflow's vast knowledge base directly within their workflow would have been invaluable. <strong>"Integration is king,"</strong> and Stack Overflow simply failed to build the bridges necessary to stay relevant in the evolving developer ecosystem.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-unseen-cost-data-and-the-perfect-exit">The Unseen Cost: Data and the Perfect Exit<a href="https://hejoseph.com/dev/blog/stack-overflow-decline#the-unseen-cost-data-and-the-perfect-exit" class="hash-link" aria-label="Direct link to The Unseen Cost: Data and the Perfect Exit" title="Direct link to The Unseen Cost: Data and the Perfect Exit">​</a></h3>
<p>There's also a sense of injustice expressed regarding the data. The author argues that LLMs like OpenAI's and Anthropic's models <strong>"likely stole everything"</strong> from Stack Overflow, which possessed <strong>"the richest training data ever existing for coding."</strong> This raises questions about compensation and fair use in the age of AI.</p>
<p>Amidst this unfolding drama, a nod must be given to Stack Overflow's founders, Jeff Atwood and Joel Spolsky. They sold the company for a whopping <strong>$1.8 billion</strong> in 2020. In retrospect, this timing was <strong>"nearly perfect,"</strong> occurring just before the terminal decline became acutely apparent.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="where-do-developers-go-now-the-future-of-community">Where Do Developers Go Now? The Future of Community<a href="https://hejoseph.com/dev/blog/stack-overflow-decline#where-do-developers-go-now-the-future-of-community" class="hash-link" aria-label="Direct link to Where Do Developers Go Now? The Future of Community" title="Direct link to Where Do Developers Go Now? The Future of Community">​</a></h3>
<p>So, if not Stack Overflow, then where? The analysis suggests that developers are already migrating to other platforms for help and community. <strong>"Discord servers are probably one of the biggest things right now,"</strong> notes the author. Other spaces like WhatsApp and Telegram groups are also filling the void, indicating a shift towards more immediate, less formal, and often more welcoming interactions.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-verdict-self-inflicted-irrelevance">The Verdict: Self-Inflicted Irrelevance<a href="https://hejoseph.com/dev/blog/stack-overflow-decline#the-verdict-self-inflicted-irrelevance" class="hash-link" aria-label="Direct link to The Verdict: Self-Inflicted Irrelevance" title="Direct link to The Verdict: Self-Inflicted Irrelevance">​</a></h3>
<p>Ultimately, the analysis points to a sobering truth: Stack Overflow largely authored its own decline. Its internal culture, rigid moderation policies, and critical lack of strategic innovation made it ripe for disruption. The advent of LLMs simply accelerated an inevitable process. As the author concludes, <strong>"I wouldn't say 'unfortunately,' because Stack Overflow, ultimately, Stack Overflow was making itself irrelevant."</strong></p>
<p>The quiet demise of Stack Overflow serves as a cautionary tale: even established giants in the tech world are not immune to decline if they fail to adapt, innovate, and cultivate a truly welcoming community. In the rapidly evolving landscape of software development, relevance is earned, not given, and it can be lost as quickly as it was gained.</p>]]></content:encoded>
            <category>Stack Overflow</category>
            <category>AI</category>
            <category>LLMs</category>
            <category>developer community</category>
            <category>tech decline</category>
        </item>
        <item>
            <title><![CDATA[Builder AI - The "Biggest AI Scam"? Behind the Algorithm, 700 Human Engineers]]></title>
            <link>https://hejoseph.com/dev/blog/builder-ai-scam-ai-humans</link>
            <guid>https://hejoseph.com/dev/blog/builder-ai-scam-ai-humans</guid>
            <pubDate>Sun, 08 Jun 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[The world of tech startups is often filled with grandiose promises, but sometimes, reality is far more down-to-earth, even shocking. The Builder AI case is a striking example. This "no-code" development startup, which had managed to raise hundreds of millions of dollars and attract the support of giants like Microsoft, recently made headlines for very bad reasons. The revelation? Its flagship platform, supposedly revolutionary and powered by an AI named Natasha, was in fact... manual work carried out by 700 human engineers based in India.]]></description>
            <content:encoded><![CDATA[<p>The world of tech startups is often filled with grandiose promises, but sometimes, reality is far more down-to-earth, even shocking. The Builder AI case is a striking example. This "no-code" development startup, which had managed to raise hundreds of millions of dollars and attract the support of giants like Microsoft, recently made headlines for very bad reasons. The revelation? Its flagship platform, supposedly revolutionary and powered by an AI named Natasha, was in fact... manual work carried out by 700 human engineers based in India.</p>
<p>This is a story that raises serious questions about the overstatement of AI capabilities in the startup ecosystem, dubious financial practices, and the increasingly blurred line between human-assisted automation and true artificial intelligence.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-scam-at-the-heart-of-builder-ai-natasha-the-ai-that-wasnt">The Scam at the Heart of Builder AI: Natasha, the AI that wasn't<a href="https://hejoseph.com/dev/blog/builder-ai-scam-ai-humans#the-scam-at-the-heart-of-builder-ai-natasha-the-ai-that-wasnt" class="hash-link" aria-label="Direct link to The Scam at the Heart of Builder AI: Natasha, the AI that wasn't" title="Direct link to The Scam at the Heart of Builder AI: Natasha, the AI that wasn't">​</a></h3>
<p>The central idea of the case is simple: Builder AI marketed a product by presenting it as an artificial intelligence marvel, when behind the scenes, client requests were handled by an army of humans. The source even goes so far as to call it the "biggest scam in the history of AI."</p>
<p>The promise? A platform capable of assembling software applications "like Lego bricks" thanks to an AI assistant called Natasha. The reality? "Natasha neural network turned out to be 700 Indian programmers." Each client request was sent to an office in India, where these 700 engineers wrote the code by hand. This is "absolutely incredible," as the author points out.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="when-human-work-masquerades-as-ai-a-recurring-pattern">When Human Work Masquerades as AI: A Recurring Pattern?<a href="https://hejoseph.com/dev/blog/builder-ai-scam-ai-humans#when-human-work-masquerades-as-ai-a-recurring-pattern" class="hash-link" aria-label="Direct link to When Human Work Masquerades as AI: A Recurring Pattern?" title="Direct link to When Human Work Masquerades as AI: A Recurring Pattern?">​</a></h3>
<p>Unfortunately, this is not an isolated case. The source emphasizes that this practice of masking cheap human labor behind an AI veneer is not new. Companies have been seen claiming AI capabilities when they relied on "a group of Indians that they hire on the back end and they call it and they call it AI."</p>
<p>This even opens up a reflection on complexity: did these Indian engineers themselves use AI tools to "prompt" and maintain the pace? The line between "AI-powered" and "human-assisted by AI" becomes dangerously porous.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="quality-sacrificed-on-the-altar-of-deception">Quality Sacrificed on the Altar of Deception<a href="https://hejoseph.com/dev/blog/builder-ai-scam-ai-humans#quality-sacrificed-on-the-altar-of-deception" class="hash-link" aria-label="Direct link to Quality Sacrificed on the Altar of Deception" title="Direct link to Quality Sacrificed on the Altar of Deception">​</a></h3>
<p>Despite the use of 700 engineers, the results were far from satisfactory. The delivered products were "buggy, dysfunctional and difficult to maintain." The code was described as "unreadable" and the functions "did not work." A biting irony when one claims to deliver innovation through AI. "Nice okay everything was real artificial intelligence except the uh except that none of it was," the source comments sarcastically.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-financial-fall-445-million-dollars-gone">The Financial Fall: 445 Million Dollars Gone<a href="https://hejoseph.com/dev/blog/builder-ai-scam-ai-humans#the-financial-fall-445-million-dollars-gone" class="hash-link" aria-label="Direct link to The Financial Fall: 445 Million Dollars Gone" title="Direct link to The Financial Fall: 445 Million Dollars Gone">​</a></h3>
<p>Thanks to this deception, Builder AI managed to attract 445 million dollars in investments over eight years, with prestigious names like Microsoft on its honor roll. But the house of cards did not withstand. The fall was brutal: a default on payment to the creditor Viola Credit, which seized 37 million dollars from the company's accounts, paralyzed its operations. Additional funds in India remained blocked by regulatory restrictions.</p>
<p>After the exposure of the deception, the startup officially went bankrupt. It's an "absolutely ridiculous" end for a company that purported to be at the forefront of technology.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-endgame-of-ai-scams-fake-it-till-you-make-it-taken-to-the-extreme">The "Endgame" of AI Scams: "Fake It Till You Make It" Taken to the Extreme?<a href="https://hejoseph.com/dev/blog/builder-ai-scam-ai-humans#the-endgame-of-ai-scams-fake-it-till-you-make-it-taken-to-the-extreme" class="hash-link" aria-label="Direct link to The &quot;Endgame&quot; of AI Scams: &quot;Fake It Till You Make It&quot; Taken to the Extreme?" title="Direct link to The &quot;Endgame&quot; of AI Scams: &quot;Fake It Till You Make It&quot; Taken to the Extreme?">​</a></h3>
<p>Why such an undertaking? What motivates founders to embark on such a path? Is it simply to "ride the hype" of AI and "embezzle money"? The source questions the intention.</p>
<p>One hypothesis is that it was initially a different product that mutated. The founders might have believed they could use developers as a "stop gap" while waiting to develop a true AI, but failed to achieve that goal. This is "fake it till you make it" pushed to its extreme, with disastrous consequences.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="ai-must-multiply-roles-not-replace-them">AI Must "Multiply Roles," Not "Replace" Them<a href="https://hejoseph.com/dev/blog/builder-ai-scam-ai-humans#ai-must-multiply-roles-not-replace-them" class="hash-link" aria-label="Direct link to AI Must &quot;Multiply Roles,&quot; Not &quot;Replace&quot; Them" title="Direct link to AI Must &quot;Multiply Roles,&quot; Not &quot;Replace&quot; Them">​</a></h3>
<p>The author of the source expresses deep skepticism towards AI companies that boast of being able to "replace all engineers." He suggests that a healthier and more realistic approach for AI is to build tools that "multiply the roles" of engineers, making them more efficient or simplifying their work, rather than seeking to eliminate them.</p>
<p>"Fully working independent AI sucks," he concludes, arguing that we should have understood after "3 years" that total autonomous AI is less effective than AI that assists humans.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="a-connection-with-versailles-innovations">A Connection with Versailles Innovations<a href="https://hejoseph.com/dev/blog/builder-ai-scam-ai-humans#a-connection-with-versailles-innovations" class="hash-link" aria-label="Direct link to A Connection with Versailles Innovations" title="Direct link to A Connection with Versailles Innovations">​</a></h3>
<p>Amidst this debacle, the name Versailles Innovations surfaced due to its commercial association with Builder AI from 2021. The co-founder of Versailles, who was also the former managing director of Facebook in India, denied any financial wrongdoing or irregularities in transactions with Builder AI, calling the allegations "absolutely baseless and false."</p>
<p>The Builder AI case is a brutal reminder of the dangers of "vaporware" and excessive "hype" around AI, especially when colossal sums are at stake. It underscores that the complete replacement of human labor by AI is still a fantasy, and that the most promising AI tools are those that augment human capabilities, rather than those that secretly claim to annihilate them. It's a costly lesson for investors and a warning for the entire tech sector.</p>]]></content:encoded>
            <category>AI</category>
            <category>scam</category>
            <category>startup</category>
            <category>no-code</category>
            <category>ethics</category>
            <category>technology</category>
            <category>development</category>
            <category>finance</category>
            <category>BuilderAI</category>
        </item>
        <item>
            <title><![CDATA[The Hidden Dangers of C - Unpacking Memory Management Risks]]></title>
            <link>https://hejoseph.com/dev/blog/c-memory-management-risks-the-hidden-dangers</link>
            <guid>https://hejoseph.com/dev/blog/c-memory-management-risks-the-hidden-dangers</guid>
            <pubDate>Sat, 24 May 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[The C programming language. It's often hailed as the "mother of almost all modern languages," forming the bedrock of everything from operating systems and compilers to game engines and encryption tools. Its power and low-level control are unparalleled, making it indispensable for critical infrastructure. Yet, this very power comes with a demanding responsibility: manual memory management.]]></description>
            <content:encoded><![CDATA[<p>The C programming language. It's often hailed as the "mother of almost all modern languages," forming the bedrock of everything from operating systems and compilers to game engines and encryption tools. Its power and low-level control are unparalleled, making it indispensable for critical infrastructure. Yet, this very power comes with a demanding responsibility: manual memory management.</p>
<p>Unlike languages with automatic garbage collection, C forces developers to "grow up and manage memory by yourself." This means allocating memory with <code>malloc</code> and diligently freeing it with <code>free</code> once it's no longer needed. This seemingly simple contract between <code>malloc</code> and <code>free</code> hides a minefield of potential pitfalls. Mishandling this responsibility can lead to catastrophic security vulnerabilities and system instability, often manifesting as "undefined behavior" – a programmer's nightmare where anything, from a minor glitch to complete system compromise, can happen.</p>
<p>Let's delve into some of the most common and dangerous memory management errors in C, illuminated by infamous historical incidents.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-perils-of-c-common-memory-management-risks">The Perils of C: Common Memory Management Risks<a href="https://hejoseph.com/dev/blog/c-memory-management-risks-the-hidden-dangers#the-perils-of-c-common-memory-management-risks" class="hash-link" aria-label="Direct link to The Perils of C: Common Memory Management Risks" title="Direct link to The Perils of C: Common Memory Management Risks">​</a></h3>
<p><strong>1. Buffer Overflows: When Data Spills Over</strong></p>
<p>A buffer overflow occurs when a program attempts to write more data into a fixed-size buffer than it was allocated to hold. C, by design, doesn't perform automatic bounds checking. This lack of a safety net means if you write past the end of an array or buffer, you can overwrite adjacent data in memory, including critical program instructions or return addresses on the stack.</p>
<p>The consequences are severe: undefined behavior, program crashes, or, most dangerously, arbitrary code execution. A classic example is the <strong>Morris Worm of 1988</strong>. This early internet scourge exploited buffer overflows in common UNIX utilities like <code>Fingered</code> and <code>Sendmail</code> to inject malicious code, infecting an estimated 10% of the internet at the time. A simple conditional check on input size could have prevented this widespread chaos.</p>
<p><strong>2. Heartbleed: A Lesson in Missing Length Checks</strong></p>
<p>While a specific type of buffer overflow, the <strong>Heartbleed vulnerability (2014)</strong> in OpenSSL's <code>heartbeat</code> extension perfectly illustrates the danger of missing length validations. The server was designed to echo back a client's "heartbeat" message. The client would declare a certain message length and then send the data. The flaw? The server code didn't verify that the <em>actual</em> length of the received message matched the <em>declared</em> length.</p>
<p>Attackers could send a tiny message (e.g., "hello") but declare it as 64,000 bytes long. The server, trusting the declared length, would then read and return 64,000 bytes from its own memory, including the "hello" message <em>plus</em> an additional 63,995 bytes of whatever was immediately following the message in memory. This allowed attackers to passively leak sensitive data like private encryption keys, usernames, and passwords, impacting vast swathes of the internet.</p>
<p><strong>3. Use-After-Free: Accessing Ghost Memory</strong></p>
<p>This vulnerability arises when a program attempts to access a block of memory <em>after</em> it has been freed using <code>free()</code>. Once memory is freed, the operating system can reallocate it for other purposes. If a pointer still points to this now-freed (and potentially reallocated) memory, accessing it can lead to:</p>
<ul>
<li><strong>Crashes:</strong> If the memory has been reallocated and its contents changed, accessing it can cause the program to crash.</li>
<li><strong>Data Corruption:</strong> Writing to reallocated memory can corrupt other parts of the program or even other programs.</li>
<li><strong>Arbitrary Code Execution:</strong> An attacker might intentionally trigger a use-after-free, cause the memory to be reallocated with malicious data, and then exploit the old pointer to execute their own code.</li>
</ul>
<p>The <strong>Internet Explorer 8 vulnerability (2013)</strong> demonstrated this. It involved JavaScript deleting HTML elements, but a pointer to the freed object persisted. An attacker could then craft a malicious webpage that would trigger the use-after-free, leading to system compromise by simply visiting the site.</p>
<p><strong>4. Off-By-One Errors: The Tiny Miscalculation with Big Impact</strong></p>
<p>Off-by-one errors are subtle mistakes in calculation, often involving loop boundaries or array indexing. In C, a common manifestation is forgetting to account for the null-terminating character (<code>\0</code>) when allocating space for strings. For instance, if you need to store a 10-character string, you actually need 11 bytes (10 for characters + 1 for <code>\0</code>).</p>
<p>These seemingly minor errors can lead to buffer overflows (writing one byte past the allocated end) or other out-of-bounds accesses, causing unpredictable behavior or opening doors for exploitation.</p>
<p><strong>5. Double Free: Freeing What's Already Gone</strong></p>
<p>Calling <code>free()</code> twice on the same block of memory is a "double free." This leads to immediate undefined behavior and can seriously corrupt the internal data structures used by the memory allocator (like <code>malloc</code> and <code>free</code>).</p>
<p>The implications are dire:</p>
<ul>
<li><strong>Program Crash:</strong> The program might crash immediately due to memory corruption.</li>
<li><strong>Heap Corruption:</strong> The memory manager's internal state can become inconsistent, leading to unpredictable behavior later.</li>
<li><strong>Arbitrary Code Execution:</strong> A sophisticated attacker can often manipulate the heap structures through a double free to achieve arbitrary read/write primitives, ultimately leading to remote code execution. When your code enters undefined behavior territory, "all bets are off."</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion-the-unpredictable-nature-of-undefined-behavior">Conclusion: The Unpredictable Nature of Undefined Behavior<a href="https://hejoseph.com/dev/blog/c-memory-management-risks-the-hidden-dangers#conclusion-the-unpredictable-nature-of-undefined-behavior" class="hash-link" aria-label="Direct link to Conclusion: The Unpredictable Nature of Undefined Behavior" title="Direct link to Conclusion: The Unpredictable Nature of Undefined Behavior">​</a></h3>
<p>The common thread running through these memory management errors is "undefined behavior." When your C code exhibits undefined behavior, the compiler and runtime environment are free to do <em>anything</em>. Your program might appear to work, it might crash, or, most terrifyingly, it might create a subtle vulnerability that an attacker can meticulously exploit to gain control of your system.</p>
<p>C's power is undeniable, but it comes with a non-negotiable demand for meticulousness in memory management. The historical incidents highlighted here serve as stark reminders that even a single oversight in handling <code>malloc</code> and <code>free</code> can have devastating, real-world consequences. Secure C programming isn't just about writing correct code; it's about anticipating and preventing every possible way memory can be mismanaged.</p>]]></content:encoded>
            <category>C</category>
            <category>memory-management</category>
            <category>security</category>
            <category>programming</category>
            <category>buffer-overflow</category>
            <category>use-after-free</category>
            <category>software-engineering</category>
            <category>cybersecurity</category>
        </item>
        <item>
            <title><![CDATA[Why Did Facebook (Meta) Say "No" to Git? A Story of Scaling, Community, and Giant Monorepos]]></title>
            <link>https://hejoseph.com/dev/blog/why-facebook-meta-does-not-use-git</link>
            <guid>https://hejoseph.com/dev/blog/why-facebook-meta-does-not-use-git</guid>
            <pubDate>Wed, 06 Mar 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Why Did Facebook (Meta) Say "No" to Git? A Story of Scaling, Community, and Giant Monorepos]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-did-facebook-meta-say-no-to-git-a-story-of-scaling-community-and-giant-monorepos">Why Did Facebook (Meta) Say "No" to Git? A Story of Scaling, Community, and Giant Monorepos<a href="https://hejoseph.com/dev/blog/why-facebook-meta-does-not-use-git#why-did-facebook-meta-say-no-to-git-a-story-of-scaling-community-and-giant-monorepos" class="hash-link" aria-label="Direct link to Why Did Facebook (Meta) Say &quot;No&quot; to Git? A Story of Scaling, Community, and Giant Monorepos" title="Direct link to Why Did Facebook (Meta) Say &quot;No&quot; to Git? A Story of Scaling, Community, and Giant Monorepos">​</a></h2>
<p>In the world of software development, Git is ubiquitous. It's the default tool for millions of developers and projects, almost a given, "as common as water," as our source's author points out. It's perceived as the only viable solution for managing code. So imagine the surprise of discovering that Facebook (now Meta), one of the world's largest tech companies, does not use Git as its primary version control system for its immense monorepos.</p>
<p>This is a fascinating story that highlights engineering challenges on a colossal scale, the limits of popular tools, and the crucial importance of human factors in technological decisions. Let's delve into the reasons why Meta chose a different path.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-astonishing-absence-of-git-at-meta">The Astonishing Absence of Git at Meta<a href="https://hejoseph.com/dev/blog/why-facebook-meta-does-not-use-git#the-astonishing-absence-of-git-at-meta" class="hash-link" aria-label="Direct link to The Astonishing Absence of Git at Meta" title="Direct link to The Astonishing Absence of Git at Meta">​</a></h3>
<p>For many, the idea that Facebook doesn't run on Git is counter-intuitive. The author, whose personal experience with version control systems began with SVN before the explosion of Git, confesses his own surprise: "Throughout my life a git was common as water it was so common in fact that I assumed it was the only viable tool for creating and managing code changes". He recounts how the Facebook engineers he met were "deeply trained on material patterns and Facebook stack diffs workflow" rather than on Git.</p>
<p>Historically, even Google, whose engineering "predates git by over 5 years," uses its own internal system. But for Facebook, it was a more active and recent decision.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-myth-of-gits-complexity-and-why-that-wasnt-the-main-reason">The Myth of Git's Complexity (and why that wasn't the main reason)<a href="https://hejoseph.com/dev/blog/why-facebook-meta-does-not-use-git#the-myth-of-gits-complexity-and-why-that-wasnt-the-main-reason" class="hash-link" aria-label="Direct link to The Myth of Git's Complexity (and why that wasn't the main reason)" title="Direct link to The Myth of Git's Complexity (and why that wasn't the main reason)">​</a></h3>
<p>Before addressing the real reasons, it's worth noting that the perceived "difficulty" of Git was not the driving force behind this decision. The author himself wonders: "I've never understood this kind of commenting get is so confusing how is G confusing like what about git is confusing". He often attributes this confusion to a lack of fundamental learning, suggesting that "most of you have just never taking taken the two hours of time it takes to learn get well enough to not be confused by any of it."</p>
<p>No, the reason for Facebook's shift was far deeper and more technical.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-scaling-nightmare-in-2012-when-git-reached-its-limits">The Scaling Nightmare in 2012: When Git Reached Its Limits<a href="https://hejoseph.com/dev/blog/why-facebook-meta-does-not-use-git#the-scaling-nightmare-in-2012-when-git-reached-its-limits" class="hash-link" aria-label="Direct link to The Scaling Nightmare in 2012: When Git Reached Its Limits" title="Direct link to The Scaling Nightmare in 2012: When Git Reached Its Limits">​</a></h3>
<p>The real breaking point occurred around 2012. By then, Facebook's codebase was already "many times larger than even the Linux kernel" (which had 17 million lines and 44,000 files). With exponential growth, Git began to show significant signs of weakness for operations on such a gigantic monorepo.</p>
<p>The key bottleneck? The process of "statting" (checking the status) of all files. "G examines every file and naturally becomes slower and slower as the number of files increase." Basic Git operations, far from being "crippling slow," were slow enough to warrant a thorough investigation. Simulations were "horrifying," showing that simple Git commands could take "over 45 minutes to complete" as the codebase continued to grow. This was untenable for thousands of engineers.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-call-for-help-and-the-surprising-response-from-git-maintainers">The Call for Help and the Surprising Response from Git Maintainers<a href="https://hejoseph.com/dev/blog/why-facebook-meta-does-not-use-git#the-call-for-help-and-the-surprising-response-from-git-maintainers" class="hash-link" aria-label="Direct link to The Call for Help and the Surprising Response from Git Maintainers" title="Direct link to The Call for Help and the Surprising Response from Git Maintainers">​</a></h3>
<p>Faced with these challenges, the Facebook team did what many tech companies would have done: they contacted the Git maintainers. Their goal was to collaborate to extend Git and better support large monorepos.</p>
<p>However, the response was unexpected and, according to the author, "wasn't cooperative." The Git maintainers "pushed back on improving performance and instead recommended that Facebook shared the uh Shard their monor repo" (divide their monorepo into multiple repositories).</p>
<p>This suggestion, though technically possible, was a "non-starter" for Facebook. They had invested heavily in a monorepo workflow, and the complexity of such fragmentation would have been enormous. Even more surprisingly, Facebook expected their offer of "free open source labor by a major tech company is well received," an opportunity to improve a widely used open-source project. The lack of cooperation was a decisive factor.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="mercurial-the-unexpected-alternative-and-its-clean-architecture">Mercurial: The Unexpected Alternative and Its Clean Architecture<a href="https://hejoseph.com/dev/blog/why-facebook-meta-does-not-use-git#mercurial-the-unexpected-alternative-and-its-clean-architecture" class="hash-link" aria-label="Direct link to Mercurial: The Unexpected Alternative and Its Clean Architecture" title="Direct link to Mercurial: The Unexpected Alternative and Its Clean Architecture">​</a></h3>
<p>Faced with Git's limitations and the lack of support for massive monorepos, Facebook explored alternatives. In 2012, options were "scarce." Perforce was dismissed due to perceived architectural flaws. This is where Mercurial entered the scene.</p>
<p>Mercurial had performance "similar to git," but possessed a much cleaner architecture. While Git was a "complex web of bash and C code," Mercurial was "engineered in Python using object-oriented code patterns and was designed to be extensible." This extensibility was crucial.</p>
<p>The team decided to attend a Mercurial hackathon in Amsterdam. What they discovered was not just a flexible system, but also "a community of maintainers who were impressively welcoming to aggressive changes by the Facebook team." This was the perfect contrast to their previous experience.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-internal-migration-a-masterclass-in-change-management">The Internal Migration: A Masterclass in Change Management<a href="https://hejoseph.com/dev/blog/why-facebook-meta-does-not-use-git#the-internal-migration-a-masterclass-in-change-management" class="hash-link" aria-label="Direct link to The Internal Migration: A Masterclass in Change Management" title="Direct link to The Internal Migration: A Masterclass in Change Management">​</a></h3>
<p>Convincing the entire engineering organization to migrate from Git to Mercurial was an "intimidating" task. Engineers can be "extremely sensitive about tooling changes." Yet, what followed "sounds like a masterclass in internal Dev tools migrations."</p>
<p>The team methodically:</p>
<ol>
<li><strong>Socialized the idea:</strong> Communicated the necessity and benefits.</li>
<li><strong>Documented workflows:</strong> Ensured everyone knew how to use the new tool.</li>
<li><strong>Listened to concerns:</strong> Allowed developers to express their doubts.</li>
<li><strong>Made the definitive switch:</strong> Cut the cord with Git once the groundwork was laid.</li>
</ol>
<p>The success of this massive migration is also attributed, with a hint of irony, to the fact that few Facebook engineers knew Git in depth. As the author notes, "it's not even a big deal" to change tools if engineers aren't attached to specific Git subtleties.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-legacy-of-facebooks-decision-stack-diffs-and-an-improved-mercurial">The Legacy of Facebook's Decision: Stack Diffs and an Improved Mercurial<a href="https://hejoseph.com/dev/blog/why-facebook-meta-does-not-use-git#the-legacy-of-facebooks-decision-stack-diffs-and-an-improved-mercurial" class="hash-link" aria-label="Direct link to The Legacy of Facebook's Decision: Stack Diffs and an Improved Mercurial" title="Direct link to The Legacy of Facebook's Decision: Stack Diffs and an Improved Mercurial">​</a></h3>
<p>Facebook's decision was not without consequences for the open-source ecosystem:</p>
<ul>
<li><strong>Improved Mercurial:</strong> Facebook "contributed performance improvements to Mercurial making it the best option for large monor repos."</li>
<li><strong>"Stack Diffs":</strong> Building on Mercurial's concepts, Facebook created an innovative code review workflow called "stack diffs" (or stacked diffs). This "unlocking novel code review parall parallelization" and revolutionized their development process. Former Facebook engineers exported this workflow to other companies, creating a "small but vocal Cult of Stack diff Enthusiast," even inspiring the author to create tools like Graphite.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-human-factor-and-the-constant-evolution-of-technology">The Human Factor and the Constant Evolution of Technology<a href="https://hejoseph.com/dev/blog/why-facebook-meta-does-not-use-git#the-human-factor-and-the-constant-evolution-of-technology" class="hash-link" aria-label="Direct link to The Human Factor and the Constant Evolution of Technology" title="Direct link to The Human Factor and the Constant Evolution of Technology">​</a></h3>
<p>Ultimately, the story of Facebook and Git is a poignant reminder that "so many of History's key technical decisions are human driven not technology driven." The receptiveness of a community, the adaptability of a team, and the ability to collaborate can outweigh perceived technical advantages.</p>
<p>It's also crucial to note that the landscape has evolved. "A decade later GI has made significant improvements to support monor repos... today get now with some knowledge of how to do it operates well with really really large repos now." Git has progressed, and it's possible that it could now handle Facebook's needs.</p>
<p>Facebook's story is one of a company that had to adapt to explosive growth. Faced with the performance limitations of a dominant tool, and a community that was not ready to support its specific needs at the time, they made a pragmatic choice. It was not a rejection of Git in itself, but a response to a unique scaling problem, resolved with an innovative solution, and a testament to the power of human decisions in large-scale engineering.</p>]]></content:encoded>
            <category>Facebook</category>
            <category>meta</category>
            <category>git</category>
            <category>mercurial</category>
            <category>monorepo</category>
            <category>performance</category>
            <category>devops</category>
            <category>version-control</category>
        </item>
    </channel>
</rss>