"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[5789],{5192:e=>{e.exports=JSON.parse('{"tag":{"label":"dynamic configuration","permalink":"/dev/docs/tags/dynamic-configuration","allTagsPath":"/dev/docs/tags","count":2,"items":[{"id":"Python/Gemini/Api/chat-conversation","title":"Conversational AI","description":"This document outlines how to create and manage conversational sessions using the google.genai library in Python. It covers initializing chat sessions, sending messages, overriding parameters for single requests, and importantly, how to permanently update parameters like temperature and maxoutputtokens while preserving system_instruction and existing history.","permalink":"/dev/docs/Python/Gemini/Api/chat-conversation"},{"id":"Python/Gemini/Api/preserve-chat-config","title":"Preserve Chat Configuration Updates","description":"When working with the Gemini API\'s chat functionality, it\'s common to initialize a chat session with specific parameters such as temperature, maxoutputtokens, systeminstruction, and an initial history. A challenge arises when you later want to dynamically update only the temperature and maxoutputtokens without losing the previously set systeminstruction or the accumulated conversation history.","permalink":"/dev/docs/Python/Gemini/Api/preserve-chat-config"}],"unlisted":false}}')}}]);