"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[3727],{6905:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"Portfolio/Jsonamic/components/data-views","title":"Data View Components","description":"Overview","source":"@site/docs/Portfolio/Jsonamic/components/data-views.md","sourceDirName":"Portfolio/Jsonamic/components","slug":"/Portfolio/Jsonamic/components/data-views","permalink":"/dev/docs/Portfolio/Jsonamic/components/data-views","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Dynamic JSON Visualizer","permalink":"/dev/docs/Portfolio/Jsonamic/introduction"},"next":{"title":"User Interface Components","permalink":"/dev/docs/Portfolio/Jsonamic/components/user-interface"}}');var i=r(4848),l=r(8453);const t={},a="Data View Components",d={},o=[{value:"Overview",id:"overview",level:2},{value:"CardView Component",id:"cardview-component",level:2},{value:"Grid Layout and Responsiveness",id:"grid-layout-and-responsiveness",level:3},{value:"Card Structure",id:"card-structure",level:3},{value:"1. Image Display (Optional)",id:"1-image-display-optional",level:4},{value:"2. Header with Flags",id:"2-header-with-flags",level:4},{value:"3. Property Display with Expansion",id:"3-property-display-with-expansion",level:4},{value:"Recursive Object Rendering",id:"recursive-object-rendering",level:3},{value:"Selection System",id:"selection-system",level:3},{value:"TableView Component",id:"tableview-component",level:2},{value:"Table Structure and Sticky Headers",id:"table-structure-and-sticky-headers",level:3},{value:"Dynamic Column Generation",id:"dynamic-column-generation",level:3},{value:"Cell Rendering with Expansion",id:"cell-rendering-with-expansion",level:3},{value:"Nested Object Component",id:"nested-object-component",level:3},{value:"Value Rendering System",id:"value-rendering-system",level:2},{value:"Sorting Integration",id:"sorting-integration",level:2},{value:"Icon Configuration System",id:"icon-configuration-system",level:2},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Memoization",id:"memoization",level:3},{value:"Event Handling",id:"event-handling",level:3},{value:"Expansion State",id:"expansion-state",level:3},{value:"Responsive Design",id:"responsive-design",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"data-view-components",children:"Data View Components"})}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"The Dynamic JSON Visualizer provides two distinct ways to view and interact with JSON data: CardView and TableView. These components handle the core data presentation, allowing users to explore, sort, flag, and select JSON objects in different formats optimized for different use cases."}),"\n",(0,i.jsx)(n.h2,{id:"cardview-component",children:"CardView Component"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"CardView"})," component displays JSON objects as individual cards in a responsive grid layout. This view is ideal for exploring detailed object properties and handling complex nested data structures."]}),"\n",(0,i.jsx)(n.h3,{id:"grid-layout-and-responsiveness",children:"Grid Layout and Responsiveness"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">\r\n  {data.map((obj) => (\r\n    <div key={obj.__id} className="bg-white dark:bg-gray-800 rounded-lg shadow-md">\r\n      {/* Card content */}\r\n    </div>\r\n  ))}\r\n</div>\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Responsive grid system"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Mobile (default)"}),": Single column layout"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Medium screens (md)"}),": Two columns"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Large screens (lg)"}),": Three columns"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Consistent spacing"}),": 4-unit gap between cards"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"card-structure",children:"Card Structure"}),"\n",(0,i.jsx)(n.p,{children:"Each card contains several distinct sections:"}),"\n",(0,i.jsx)(n.h4,{id:"1-image-display-optional",children:"1. Image Display (Optional)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'{imageField && getValueByPath(obj, imageField) && (\r\n  <div className="aspect-video w-full overflow-hidden">\r\n    <img\r\n      src={String(getValueByPath(obj, imageField))}\r\n      alt="Card image"\r\n      className="w-full h-full object-cover"\r\n      onError={(e) => {\r\n        (e.target as HTMLImageElement).style.display = \'none\';\r\n      }}\r\n    />\r\n  </div>\r\n)}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Smart image handling"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Conditional display"})," - Only shows if an image field is configured and the object has that field"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Aspect ratio"})," - Maintains 16:9 aspect ratio (",(0,i.jsx)(n.code,{children:"aspect-video"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Error handling"})," - Hides broken images automatically"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Responsive sizing"})," - Images scale with card width"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"2-header-with-flags",children:"2. Header with Flags"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"<div className=\"p-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center\">\r\n  <div className=\"font-medium text-gray-700 dark:text-gray-300\">\r\n    Object {data.indexOf(obj) + 1}\r\n  </div>\r\n  <div className=\"flex gap-1\">\r\n    {flagTypes.map(flag => {\r\n      const IconComponent = flag.icon && availableIcons[flag.icon as keyof typeof availableIcons] \r\n        ? availableIcons[flag.icon as keyof typeof availableIcons] \r\n        : Flag;\r\n      \r\n      return (\r\n        <button\r\n          key={flag.id}\r\n          className={`p-1 rounded-full transition-colors ${\r\n            obj.__flags?.[flag.id] \r\n              ? 'text-white' \r\n              : 'text-gray-400 hover:text-gray-700'\r\n          }`}\r\n          style={{\r\n            backgroundColor: obj.__flags?.[flag.id] ? flag.color : 'transparent',\r\n          }}\r\n          onClick={(e) => {\r\n            e.stopPropagation();\r\n            handleFlagToggle(obj.__id || '', flag.id, !!obj.__flags?.[flag.id]);\r\n          }}\r\n        >\r\n          <IconComponent className=\"h-4 w-4\" />\r\n        </button>\r\n      );\r\n    })}\r\n  </div>\r\n</div>\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Flag system features"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Dynamic icons"})," - Uses configured icon or defaults to Flag icon"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Visual state"})," - Active flags show with their configured color background"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Interactive"})," - Click to toggle flag state"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event isolation"})," - ",(0,i.jsx)(n.code,{children:"stopPropagation()"})," prevents card selection when clicking flags"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"3-property-display-with-expansion",children:"3. Property Display with Expansion"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'{Object.entries(obj).map(([key, value]) => {\r\n  if (key.startsWith(\'__\') || !shouldDisplayField(key)) return null;\r\n  \r\n  const isExpandable = isExpandableObject(value);\r\n  const isExpanded = expandedKeys[key] || false;\r\n  \r\n  return (\r\n    <div key={key} className="border-b border-gray-100 last:border-0 pb-2 last:pb-0">\r\n      <div className="flex justify-between items-center">\r\n        <div className="font-medium text-gray-700">{key}</div>\r\n        {isExpandable && (\r\n          <button onClick={() => toggleExpand(key)}>\r\n            {isExpanded ? <ChevronUp /> : <ChevronDown />}\r\n          </button>\r\n        )}\r\n      </div>\r\n      \r\n      <div className="mt-1">\r\n        {isExpandable ? (\r\n          isExpanded ? (\r\n            <div className="ml-4 mt-2 border-l-2 border-gray-200 pl-2">\r\n              <RenderObjectProperties \r\n                obj={value as JSONObject} \r\n                parentPath={key}\r\n                expandedKeys={expandedKeys}\r\n                toggleExpand={toggleExpand}\r\n              />\r\n            </div>\r\n          ) : (\r\n            <div className="text-gray-500 text-sm italic">\r\n              {Object.keys(value as JSONObject).length} properties\r\n            </div>\r\n          )\r\n        ) : (\r\n          <div className="text-gray-800 break-all whitespace-pre-wrap">\r\n            {renderValue(value)}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n})}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Property display features"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Field filtering"})," - Skips internal fields (",(0,i.jsx)(n.code,{children:"__"})," prefix) and hidden display fields"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Expandable objects"})," - Nested objects can be expanded/collapsed"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Visual hierarchy"})," - Indented display with left border for nested content"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Property count"})," - Shows number of properties when collapsed"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Text wrapping"})," - Handles long text with proper word breaking"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"recursive-object-rendering",children:"Recursive Object Rendering"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"RenderObjectProperties"})," component handles nested object display:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const RenderObjectProperties: React.FC<RenderObjectPropertiesProps> = ({ \r\n  obj, \r\n  parentPath,\r\n  expandedKeys,\r\n  toggleExpand \r\n}) => {\r\n  return (\r\n    <div className="grid gap-2">\r\n      {Object.entries(obj).map(([key, value]) => {\r\n        const fullPath = parentPath ? `${parentPath}.${key}` : key;\r\n        const isExpandable = isExpandableObject(value);\r\n        const isExpanded = expandedKeys[fullPath] || false;\r\n        \r\n        return (\r\n          <div key={fullPath}>\r\n            {/* Recursive rendering logic */}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Recursive features"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Path tracking"})," - Builds dot-notation paths for nested properties"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Independent expansion"})," - Each nested level can be expanded/collapsed independently"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Unlimited depth"})," - Handles arbitrarily deep object nesting"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Visual consistency"})," - Same styling patterns at all nesting levels"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"selection-system",children:"Selection System"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const toggleSelection = (id: string) => {\r\n  if (selectedIds.includes(id)) {\r\n    onSelectionChange(selectedIds.filter(selectedId => selectedId !== id));\r\n  } else {\r\n    onSelectionChange([...selectedIds, id]);\r\n  }\r\n};\r\n\r\n<div \r\n  className={`transition-all hover:shadow-lg relative ${\r\n    selectedIds.includes(obj.__id || '') ? 'ring-2 ring-blue-500' : ''\r\n  }`}\r\n  onClick={() => obj.__id && toggleSelection(obj.__id)}\r\n>\r\n  <div className=\"absolute top-2 right-2 z-10\">\r\n    <input\r\n      type=\"checkbox\"\r\n      checked={selectedIds.includes(obj.__id || '')}\r\n      onChange={(e) => {\r\n        e.stopPropagation();\r\n        if(obj.__id) toggleSelection(obj.__id);\r\n      }}\r\n    />\r\n  </div>\r\n</div>\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Selection features"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Visual feedback"})," - Selected cards show blue ring border"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Multiple selection methods"})," - Click card or checkbox"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event handling"})," - Checkbox clicks don't trigger card selection"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"State management"})," - Selection state managed by parent component"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"tableview-component",children:"TableView Component"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"TableView"})," component displays JSON data in a spreadsheet-like format, ideal for comparing values across multiple objects and handling large datasets efficiently."]}),"\n",(0,i.jsx)(n.h3,{id:"table-structure-and-sticky-headers",children:"Table Structure and Sticky Headers"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'<div className="overflow-x-auto">\r\n  <table className="min-w-full border-collapse">\r\n    <thead>\r\n      <tr className="bg-gray-100 dark:bg-gray-800">\r\n        <th className="sticky left-0 bg-gray-100 dark:bg-gray-800 z-10">\r\n          <input type="checkbox" onChange={toggleAllSelection} />\r\n        </th>\r\n        <th className="sticky left-12 bg-gray-100 dark:bg-gray-800 z-10">\r\n          Actions\r\n        </th>\r\n        {allKeys.map(key => (\r\n          <th key={key}>\r\n            <button onClick={() => handleSort(key)}>\r\n              {key}\r\n              {getSortDirection(key) === \'asc\' && <ArrowUp />}\r\n              {getSortDirection(key) === \'desc\' && <ArrowDown />}\r\n              {getSortDirection(key) === null && <ArrowUpDown className="opacity-50" />}\r\n            </button>\r\n          </th>\r\n        ))}\r\n      </tr>\r\n    </thead>\r\n  </table>\r\n</div>\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Table features"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Horizontal scrolling"})," - Handles wide tables with many columns"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Sticky columns"})," - Selection and actions columns remain visible during scroll"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Sortable headers"})," - Click column headers to sort data"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Visual sort indicators"})," - Arrows show current sort direction"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Select all"})," - Master checkbox in header selects/deselects all rows"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"dynamic-column-generation",children:"Dynamic Column Generation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const allKeys = useMemo(() => {\r\n  return extractKeys(data).filter(key => !displayFields.includes(key));\r\n}, [data, displayFields]);\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Smart column management"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Automatic discovery"})," - Extracts all possible keys from the dataset"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Memoization"})," - Uses ",(0,i.jsx)(n.code,{children:"useMemo"})," to avoid recalculating on every render"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Field filtering"})," - Respects display field configuration"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Nested support"})," - Includes nested object properties with dot notation"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"cell-rendering-with-expansion",children:"Cell Rendering with Expansion"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'{allKeys.map(key => {\r\n  const value = getValueByPath(obj, key);\r\n  const isExpandable = isExpandableObject(value);\r\n  const cellId = `${obj.__id}-${key}`;\r\n  const isExpanded = expandedCells[cellId] || false;\r\n  \r\n  return (\r\n    <td key={key} className="px-4 py-3 border-t border-gray-100">\r\n      <div className="break-all whitespace-pre-wrap max-w-md">\r\n        {isExpandable ? (\r\n          <div>\r\n            <div className="flex items-center gap-1">\r\n              <button onClick={() => toggleExpand(obj.__id || \'\', key)}>\r\n                {isExpanded ? <ChevronUp /> : <ChevronDown />}\r\n              </button>\r\n              <span className="text-gray-600">\r\n                {Object.keys(value as JSONObject).length} properties\r\n              </span>\r\n            </div>\r\n            \r\n            {isExpanded && (\r\n              <div className="mt-2 border-l-2 border-gray-200 pl-2">\r\n                <NestedObject \r\n                  obj={value as JSONObject} \r\n                  expandedKeys={expandedCells}\r\n                  toggleExpand={(nestedKey) => {\r\n                    const nestedCellId = `${obj.__id}-${key}-${nestedKey}`;\r\n                    setExpandedCells(prev => ({\r\n                      ...prev,\r\n                      [nestedCellId]: !prev[nestedCellId]\r\n                    }));\r\n                  }}\r\n                  objId={obj.__id || \'\'}\r\n                  parentKey={key}\r\n                />\r\n              </div>\r\n            )}\r\n          </div>\r\n        ) : (\r\n          <div className="text-gray-800">\r\n            {renderValue(value)}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </td>\r\n  );\r\n})}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Cell features"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Path-based access"})," - Uses ",(0,i.jsx)(n.code,{children:"getValueByPath"})," for nested property access"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Individual expansion"})," - Each cell can be expanded independently"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Unique cell IDs"})," - Combines object ID and key for expansion tracking"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Constrained width"})," - ",(0,i.jsx)(n.code,{children:"max-w-md"})," prevents cells from becoming too wide"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Text handling"})," - Proper word breaking and whitespace preservation"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"nested-object-component",children:"Nested Object Component"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const NestedObject: React.FC<NestedObjectProps> = ({ \r\n  obj, \r\n  expandedKeys, \r\n  toggleExpand,\r\n  objId,\r\n  parentKey\r\n}) => {\r\n  return (\r\n    <div className="grid gap-2">\r\n      {Object.entries(obj).map(([key, value]) => {\r\n        const cellId = `${objId}-${parentKey}-${key}`;\r\n        const isExpandable = isExpandableObject(value);\r\n        const isExpanded = expandedKeys[cellId] || false;\r\n        \r\n        return (\r\n          <div key={cellId}>\r\n            {/* Nested object rendering */}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Nested object features"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Hierarchical IDs"})," - Builds unique IDs for nested expansion tracking"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Recursive rendering"})," - Handles unlimited nesting depth"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Independent state"})," - Each nested level maintains its own expansion state"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Visual hierarchy"})," - Consistent indentation and borders for nested content"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"value-rendering-system",children:"Value Rendering System"}),"\n",(0,i.jsxs)(n.p,{children:["Both components share a common ",(0,i.jsx)(n.code,{children:"renderValue"})," function for consistent data display:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const renderValue = (value: JSONValue): React.ReactNode => {\r\n  if (value === null) return <span className="text-gray-500">null</span>;\r\n  if (value === undefined) return <span className="text-gray-500">undefined</span>;\r\n  \r\n  if (typeof value === \'boolean\') {\r\n    return (\r\n      <span className={value ? \'text-green-600\' : \'text-red-600\'}>\r\n        {String(value)}\r\n      </span>\r\n    );\r\n  }\r\n  \r\n  if (typeof value === \'number\') {\r\n    return <span className="text-violet-600">{value}</span>;\r\n  }\r\n  \r\n  if (Array.isArray(value)) {\r\n    return (\r\n      <div className="text-gray-800">\r\n        {value.map((item, index) => (\r\n          <div key={index} className="flex items-center gap-1">\r\n            <span>{String(item)}</span>\r\n            {index < value.length - 1 && <span className="text-gray-400">,</span>}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  return String(value);\r\n};\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Type-specific rendering"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Null/undefined"})," - Gray italic text"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Booleans"})," - Green for true, red for false"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Numbers"})," - Purple/violet color"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Arrays"})," - Vertical list with comma separators"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Strings"})," - Default text color"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Objects"})," - Handled by expansion system, not rendered directly"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"sorting-integration",children:"Sorting Integration"}),"\n",(0,i.jsx)(n.p,{children:"Both components integrate with the global sort system:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const handleSort = (key: string) => {\r\n  if (sortConfig?.key === key) {\r\n    if (sortConfig.direction === 'asc') {\r\n      setSortConfig({ key, direction: 'desc' });\r\n    } else {\r\n      setSortConfig(null); // Clear sort\r\n    }\r\n  } else {\r\n    setSortConfig({ key, direction: 'asc' });\r\n  }\r\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Sort behavior"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"First click"})," - Sort ascending"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Second click"})," - Sort descending"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Third click"})," - Clear sort"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Different field"})," - Start with ascending sort"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"icon-configuration-system",children:"Icon Configuration System"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"iconConfig.ts"})," file centralizes icon management:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export const availableIcons = {\r\n  eye: Eye,\r\n  bell: Bell,\r\n  star: Star,\r\n  heart: Heart,\r\n  flag: Flag,\r\n  bookmark: Bookmark,\r\n  alertCircle: AlertCircle,\r\n  checkCircle: CheckCircle,\r\n  clock: Clock,\r\n  mail: Mail\r\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Icon system features"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Centralized imports"})," - All Lucide React icons imported in one place"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"String-based lookup"})," - Icons referenced by string keys in flag configuration"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fallback handling"})," - Defaults to Flag icon if specified icon not found"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type safety"})," - TypeScript ensures only valid icon keys are used"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,i.jsx)(n.h3,{id:"memoization",children:"Memoization"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Column calculation"})," - ",(0,i.jsx)(n.code,{children:"useMemo"})," for expensive key extraction"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Render optimization"})," - Prevents unnecessary recalculations"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"event-handling",children:"Event Handling"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event delegation"})," - Efficient handling of multiple interactive elements"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Propagation control"})," - ",(0,i.jsx)(n.code,{children:"stopPropagation()"})," prevents unwanted event bubbling"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"expansion-state",children:"Expansion State"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Granular tracking"})," - Individual expansion state for each expandable element"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Unique identifiers"})," - Prevents state conflicts between similar elements"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"responsive-design",children:"Responsive Design"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"CSS Grid"})," - Efficient responsive layouts"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Sticky positioning"})," - Maintains usability during scroll"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Overflow handling"})," - Graceful handling of wide content"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"These data view components provide flexible, performant ways to explore JSON data while maintaining consistent user experience patterns across different viewing modes."})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>a});var s=r(6540);const i={},l=s.createContext(i);function t(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);