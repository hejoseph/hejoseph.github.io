"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[3170],{3462:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"Portfolio/NoteApp/Database/models","title":"Database Models","description":"Overview","source":"@site/docs/Portfolio/NoteApp/Database/models.md","sourceDirName":"Portfolio/NoteApp/Database","slug":"/Portfolio/NoteApp/Database/models","permalink":"/dev/docs/Portfolio/NoteApp/Database/models","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"API Endpoints","permalink":"/dev/docs/Portfolio/NoteApp/Api/endpoints"},"next":{"title":"Containerization and Deployment","permalink":"/dev/docs/Portfolio/NoteApp/Deployment/containerization"}}');var t=s(4848),r=s(8453);const o={},l="Database Models",a={},d=[{value:"Overview",id:"overview",level:2},{value:"What is Mongoose?",id:"what-is-mongoose",level:2},{value:"Database Connection",id:"database-connection",level:2},{value:"User Model",id:"user-model",level:2},{value:"Schema Fields Explained",id:"schema-fields-explained",level:3},{value:"Key Characteristics",id:"key-characteristics",level:3},{value:"Usage in Application",id:"usage-in-application",level:3},{value:"Note Model",id:"note-model",level:2},{value:"Schema Fields Explained",id:"schema-fields-explained-1",level:3},{value:"Key Characteristics",id:"key-characteristics-1",level:3},{value:"Usage in Application",id:"usage-in-application-1",level:3},{value:"Data Relationships",id:"data-relationships",level:2},{value:"User to Notes Relationship",id:"user-to-notes-relationship",level:3},{value:"Data Isolation",id:"data-isolation",level:3},{value:"Database Operations",id:"database-operations",level:2},{value:"Common Query Patterns",id:"common-query-patterns",level:3},{value:"MongoDB Features Used",id:"mongodb-features-used",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Current Issues",id:"current-issues",level:3},{value:"Data Access Control",id:"data-access-control",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"database-models",children:"Database Models"})}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"The Notes App uses MongoDB as its database with Mongoose as the Object Document Mapper (ODM). Mongoose provides a schema-based solution to model application data, adding structure and validation to the flexible MongoDB documents."}),"\n",(0,t.jsx)(n.h2,{id:"what-is-mongoose",children:"What is Mongoose?"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Mongoose"})," is a JavaScript library that acts as a bridge between Node.js and MongoDB. It provides:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Schema definitions"})," - Structure for documents with data types and validation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Model creation"})," - JavaScript classes that represent collections in MongoDB"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Query building"})," - Methods to interact with the database"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Middleware"})," - Functions that run before or after certain operations"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"database-connection",children:"Database Connection"}),"\n",(0,t.jsxs)(n.p,{children:["The application connects to MongoDB using the connection string from ",(0,t.jsx)(n.code,{children:"config.json"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'const mongoose = require("mongoose");\r\nconst config = require("./config.json");\r\nconst db_url = config.connectionString;\r\nmongoose.connect(db_url);\n'})}),"\n",(0,t.jsx)(n.p,{children:"This establishes a connection to the MongoDB database when the server starts."}),"\n",(0,t.jsx)(n.h2,{id:"user-model",children:"User Model"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"File"}),": ",(0,t.jsx)(n.code,{children:"backend/models/user.model.js"})]}),"\n",(0,t.jsx)(n.p,{children:"The User model represents user accounts in the system."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const userSchema = new Schema({\r\n  fullName: {type: String},\r\n  email: {type: String},\r\n  password: {type: String},\r\n  createOn: {type: Date, default: new Date().getTime()},\r\n})\n"})}),"\n",(0,t.jsx)(n.h3,{id:"schema-fields-explained",children:"Schema Fields Explained"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"fullName"}),": Stores the user's display name as a string"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"email"}),": Stores the user's email address for login identification"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"password"}),": Stores the user's password (stored as plain text - security concern)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"createOn"}),": Timestamp of when the account was created, defaults to current time"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"key-characteristics",children:"Key Characteristics"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"No validation"}),": The schema doesn't enforce required fields or email format validation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Plain text passwords"}),": Passwords are stored without encryption (not recommended for production)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Simple structure"}),": Minimal fields for basic user management"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"usage-in-application",children:"Usage in Application"}),"\n",(0,t.jsx)(n.p,{children:"The User model is used for:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Account creation"})," (",(0,t.jsx)(n.code,{children:"/create-account"})," endpoint)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"User authentication"})," (",(0,t.jsx)(n.code,{children:"/login"})," endpoint)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"User information retrieval"})," (",(0,t.jsx)(n.code,{children:"/get-user"})," endpoint)"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"note-model",children:"Note Model"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"File"}),": ",(0,t.jsx)(n.code,{children:"backend/models/note.model.js"})]}),"\n",(0,t.jsx)(n.p,{children:"The Note model represents individual notes created by users."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const noteSchema = new Schema({\r\n  title: {type: String, required: true},\r\n  content: {type: String, required: true},\r\n  tags: {type: [String], default: []},\r\n  isPinned: {type: Boolean, default: false},\r\n  title: {type: String, required: true}, // Duplicate field\r\n  userId: {type: String, required : true},\r\n  createOn: {type: Date, default: new Date().getTime()},\r\n})\n"})}),"\n",(0,t.jsx)(n.h3,{id:"schema-fields-explained-1",children:"Schema Fields Explained"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"title"}),": The note's title (required field, appears twice due to error)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"content"}),": The main text content of the note (required)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"tags"}),": Array of string tags for categorization (defaults to empty array)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"isPinned"}),": Boolean flag to mark important notes (defaults to false)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"userId"}),": Links the note to its owner (required for data isolation)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"createOn"}),": Timestamp of note creation"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"key-characteristics-1",children:"Key Characteristics"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Required fields"}),": Title, content, and userId must be provided"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Default values"}),": Tags default to empty array, isPinned defaults to false"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"User association"}),": Each note belongs to a specific user via userId"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Schema error"}),": Title field is defined twice (line 4 and 8)"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"usage-in-application-1",children:"Usage in Application"}),"\n",(0,t.jsx)(n.p,{children:"The Note model supports all note operations:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Creating notes"})," (",(0,t.jsx)(n.code,{children:"/add-note"})," endpoint)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Editing notes"})," (",(0,t.jsx)(n.code,{children:"/edit-note/:noteId"})," endpoint)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Deleting notes"})," (",(0,t.jsx)(n.code,{children:"/delete-note/:noteId"})," endpoint)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Pinning/unpinning"})," (",(0,t.jsx)(n.code,{children:"/update-note-pinned/:noteId"})," endpoint)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Retrieving all notes"})," (",(0,t.jsx)(n.code,{children:"/get-all-notes"})," endpoint)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Searching notes"})," (",(0,t.jsx)(n.code,{children:"/search-notes"})," endpoint)"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"data-relationships",children:"Data Relationships"}),"\n",(0,t.jsx)(n.h3,{id:"user-to-notes-relationship",children:"User to Notes Relationship"}),"\n",(0,t.jsxs)(n.p,{children:["The application implements a ",(0,t.jsx)(n.strong,{children:"one-to-many"})," relationship:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"One User can have many Notes"}),"\n",(0,t.jsx)(n.li,{children:"Each Note belongs to exactly one User"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["This is achieved through the ",(0,t.jsx)(n.code,{children:"userId"})," field in the Note model, which stores the User's MongoDB ",(0,t.jsx)(n.code,{children:"_id"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// When creating a note\r\nconst note = new Note({\r\n  title,\r\n  content,\r\n  tags: tags || [],\r\n  userId: user._id,  // Links note to user\r\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"data-isolation",children:"Data Isolation"}),"\n",(0,t.jsxs)(n.p,{children:["User data is isolated by always filtering notes by ",(0,t.jsx)(n.code,{children:"userId"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Get user's notes only\r\nconst notes = await Note.find({ userId: user._id });\r\n\r\n// Edit only user's own notes\r\nconst note = await Note.findOne({ _id: noteId, userId: user._id });\n"})}),"\n",(0,t.jsx)(n.h2,{id:"database-operations",children:"Database Operations"}),"\n",(0,t.jsx)(n.h3,{id:"common-query-patterns",children:"Common Query Patterns"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Find by user"}),": ",(0,t.jsx)(n.code,{children:"Note.find({ userId: user._id })"}),"\r\n",(0,t.jsx)(n.strong,{children:"Sort by pinned status"}),": ",(0,t.jsx)(n.code,{children:".sort({ isPinned: -1 })"})," (pinned notes first)\r\n",(0,t.jsx)(n.strong,{children:"Search with regex"}),": ",(0,t.jsx)(n.code,{children:'{ title: { $regex: new RegExp(query, "i") } }'})," (case-insensitive)\r\n",(0,t.jsx)(n.strong,{children:"Find one specific note"}),": ",(0,t.jsx)(n.code,{children:"Note.findOne({ _id: noteId, userId: user._id })"})]}),"\n",(0,t.jsx)(n.h3,{id:"mongodb-features-used",children:"MongoDB Features Used"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Regular expressions"})," for search functionality"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Sorting"})," to prioritize pinned notes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Array fields"})," for tags storage"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Boolean fields"})," for pinned status"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Date fields"})," with default values"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,t.jsx)(n.h3,{id:"current-issues",children:"Current Issues"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Plain text passwords"}),": User passwords are stored without hashing"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"No input validation"}),": Schema lacks validation rules for email format"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"No field constraints"}),": Missing length limits or format requirements"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"data-access-control",children:"Data Access Control"}),"\n",(0,t.jsxs)(n.p,{children:["The application properly implements user data isolation by always including ",(0,t.jsx)(n.code,{children:"userId"})," in database queries, ensuring users can only access their own notes."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var i=s(6540);const t={},r=i.createContext(t);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);