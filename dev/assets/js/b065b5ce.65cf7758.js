"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[6641],{2993:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>d,default:()=>o,frontMatter:()=>l,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"QA-Testing/Test-Design-Coverage/equivalence-partitioning","title":"Test Case Design Technique: Equivalence Partitioning","description":"Overview","source":"@site/docs/QA-Testing/3-Test-Design-Coverage/1-equivalence-partitioning.md","sourceDirName":"QA-Testing/3-Test-Design-Coverage","slug":"/QA-Testing/Test-Design-Coverage/equivalence-partitioning","permalink":"/dev/docs/QA-Testing/Test-Design-Coverage/equivalence-partitioning","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Test Estimation Models: PERT, Use-Case Point, WBS","permalink":"/dev/docs/QA-Testing/Test-Strategy-Planning/test-estimation-models"},"next":{"title":"Test Case Design Technique: Boundary Value Analysis (BVA)","permalink":"/dev/docs/QA-Testing/Test-Design-Coverage/boundary-value-analysis"}}');var t=n(4848),r=n(8453);const l={},d="Test Case Design Technique: Equivalence Partitioning",c={},a=[{value:"Overview",id:"overview",level:2},{value:"Why Use Equivalence Partitioning?",id:"why-use-equivalence-partitioning",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"Simple Example: Age Input Field",id:"simple-example-age-input-field",level:2},{value:"Step 1: Identify Equivalence Classes",id:"step-1-identify-equivalence-classes",level:3},{value:"Step 2: Choose Test Inputs",id:"step-2-choose-test-inputs",level:3},{value:"Real-World Example: Password Length Validation",id:"real-world-example-password-length-validation",level:2},{value:"Combining with Other Techniques",id:"combining-with-other-techniques",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Summary",id:"summary",level:2}];function h(e){const s={blockquote:"blockquote",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"test-case-design-technique-equivalence-partitioning",children:"Test Case Design Technique: Equivalence Partitioning"})}),"\n",(0,t.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Equivalence Partitioning"})," (EP) is a ",(0,t.jsx)(s.strong,{children:"black-box test design technique"})," that divides input data into ",(0,t.jsx)(s.strong,{children:"partitions or classes"})," where the system is expected to behave similarly. By identifying these equivalence classes, testers can reduce the number of test cases while maintaining effective coverage."]}),"\n",(0,t.jsxs)(s.p,{children:["Instead of testing every possible input, EP helps choose ",(0,t.jsx)(s.strong,{children:"representative values"})," from each class, assuming if one value in the class works, the rest will too."]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"why-use-equivalence-partitioning",children:"Why Use Equivalence Partitioning?"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Reduces redundancy"})," in test cases"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Improves test efficiency"})," by covering more logic with fewer tests"]}),"\n",(0,t.jsxs)(s.li,{children:["Focuses on ",(0,t.jsx)(s.strong,{children:"valid and invalid input handling"})]}),"\n",(0,t.jsxs)(s.li,{children:["Enhances ",(0,t.jsx)(s.strong,{children:"clarity"})," in requirement-based testing"]}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsx)(s.li,{children:"Analyze input fields or parameters."}),"\n",(0,t.jsx)(s.li,{children:"Identify sets of valid and invalid data."}),"\n",(0,t.jsxs)(s.li,{children:["Group data into ",(0,t.jsx)(s.strong,{children:"equivalence classes"}),":","\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Valid classes"}),": Inputs that should be accepted"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Invalid classes"}),": Inputs that should be rejected"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(s.li,{children:"Select one representative value from each class to test."}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"simple-example-age-input-field",children:"Simple Example: Age Input Field"}),"\n",(0,t.jsxs)(s.p,{children:["Imagine a form that accepts ",(0,t.jsx)(s.strong,{children:"user age"})," between ",(0,t.jsx)(s.strong,{children:"18 and 65"})," inclusive."]}),"\n",(0,t.jsx)(s.h3,{id:"step-1-identify-equivalence-classes",children:"Step 1: Identify Equivalence Classes"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Class Type"}),(0,t.jsx)(s.th,{children:"Range"}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Valid"}),(0,t.jsx)(s.td,{children:"18 to 65"}),(0,t.jsx)(s.td,{children:"Acceptable age range"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Invalid"}),(0,t.jsx)(s.td,{children:"< 18"}),(0,t.jsx)(s.td,{children:"Too young"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Invalid"}),(0,t.jsx)(s.td,{children:"> 65"}),(0,t.jsx)(s.td,{children:"Too old"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Invalid"}),(0,t.jsx)(s.td,{children:"Non-numeric"}),(0,t.jsx)(s.td,{children:'e.g., "abc", "!@#"'})]})]})]}),"\n",(0,t.jsx)(s.h3,{id:"step-2-choose-test-inputs",children:"Step 2: Choose Test Inputs"}),"\n",(0,t.jsxs)(s.p,{children:["You only need to test ",(0,t.jsx)(s.strong,{children:"one representative"})," value from each class."]}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Class"}),(0,t.jsx)(s.th,{children:"Representative Value"}),(0,t.jsx)(s.th,{children:"Expected Result"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Valid"}),(0,t.jsx)(s.td,{children:"30"}),(0,t.jsx)(s.td,{children:"Accepted"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Invalid (<18)"}),(0,t.jsx)(s.td,{children:"17"}),(0,t.jsx)(s.td,{children:"Rejected - too young"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Invalid (>65)"}),(0,t.jsx)(s.td,{children:"70"}),(0,t.jsx)(s.td,{children:"Rejected - too old"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Invalid (text)"}),(0,t.jsx)(s.td,{children:'"abc"'}),(0,t.jsx)(s.td,{children:"Rejected - not a number"})]})]})]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"real-world-example-password-length-validation",children:"Real-World Example: Password Length Validation"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Requirement:"})," Password must be between ",(0,t.jsx)(s.strong,{children:"8 and 16 characters"}),"."]}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Class Type"}),(0,t.jsx)(s.th,{children:"Range"}),(0,t.jsx)(s.th,{children:"Example Value"}),(0,t.jsx)(s.th,{children:"Expected Result"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Valid"}),(0,t.jsx)(s.td,{children:"8\u201316 chars"}),(0,t.jsx)(s.td,{children:'"Password123"'}),(0,t.jsx)(s.td,{children:"Accepted"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Invalid"}),(0,t.jsx)(s.td,{children:"< 8 chars"}),(0,t.jsx)(s.td,{children:'"Pass1"'}),(0,t.jsx)(s.td,{children:"Rejected"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Invalid"}),(0,t.jsx)(s.td,{children:"> 16 chars"}),(0,t.jsx)(s.td,{children:'"VeryLongPassword!"'}),(0,t.jsx)(s.td,{children:"Rejected"})]})]})]}),"\n",(0,t.jsxs)(s.p,{children:["By selecting only ",(0,t.jsx)(s.strong,{children:"one value per class"}),", you ensure broad functional coverage with ",(0,t.jsx)(s.strong,{children:"minimal test cases"}),"."]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"combining-with-other-techniques",children:"Combining with Other Techniques"}),"\n",(0,t.jsx)(s.p,{children:"Equivalence Partitioning is often combined with:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Boundary Value Analysis (BVA)"})," for edge conditions"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Decision Table Testing"})," for complex rules"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"State Transition Testing"})," for dynamic systems"]}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Clearly define the ",(0,t.jsx)(s.strong,{children:"valid/invalid criteria"})," from requirements."]}),"\n",(0,t.jsxs)(s.li,{children:["Document each ",(0,t.jsx)(s.strong,{children:"equivalence class"})," and ",(0,t.jsx)(s.strong,{children:"rationale"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:["Cover ",(0,t.jsx)(s.strong,{children:"at least one"})," test per partition to ensure logic is verified."]}),"\n",(0,t.jsx)(s.li,{children:"Use EP early in test design to save effort later."}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"summary",children:"Summary"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Equivalence Partitioning"})," helps testers focus on the most meaningful test inputs by dividing data into logical groups. It reduces test suite size without compromising quality and is especially useful for ",(0,t.jsx)(s.strong,{children:"input validation"}),", ",(0,t.jsx)(s.strong,{children:"form fields"}),", and ",(0,t.jsx)(s.strong,{children:"API parameters"}),"."]}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:['"Don\u2019t test everything. Test smartly. Equivalence Partitioning is about ',(0,t.jsx)(s.em,{children:"maximum coverage with minimum effort"}),'."']}),"\n"]})]})}function o(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>d});var i=n(6540);const t={},r=i.createContext(t);function l(e){const s=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(r.Provider,{value:s},e.children)}}}]);