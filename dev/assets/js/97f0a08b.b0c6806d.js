"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[6360],{1026:e=>{e.exports=JSON.parse('{"permalink":"/dev/blog/why-facebook-meta-does-not-use-git","source":"@site/blog/2024-03-06-git-not-enough.md","title":"Why Did Facebook (Meta) Say \\"No\\" to Git? A Story of Scaling, Community, and Giant Monorepos","description":"Why Did Facebook (Meta) Say \\"No\\" to Git? A Story of Scaling, Community, and Giant Monorepos","date":"2024-03-06T00:00:00.000Z","tags":[{"inline":false,"label":"Facebook","permalink":"/dev/blog/tags/facebook","description":"Facebook tag description"},{"inline":true,"label":"meta","permalink":"/dev/blog/tags/meta"},{"inline":true,"label":"git","permalink":"/dev/blog/tags/git"},{"inline":true,"label":"mercurial","permalink":"/dev/blog/tags/mercurial"},{"inline":true,"label":"monorepo","permalink":"/dev/blog/tags/monorepo"},{"inline":true,"label":"performance","permalink":"/dev/blog/tags/performance"},{"inline":true,"label":"devops","permalink":"/dev/blog/tags/devops"},{"inline":true,"label":"version-control","permalink":"/dev/blog/tags/version-control"}],"readingTime":6.005,"hasTruncateMarker":true,"authors":[{"name":"Joseph HE","title":"Software Engineer","url":"https://hejoseph.com","page":{"permalink":"/dev/blog/authors/joseph"},"socials":{"github":"https://github.com/hejoseph"},"imageURL":"https://github.com/hejoseph.png","key":"joseph"}],"frontMatter":{"slug":"why-facebook-meta-does-not-use-git","title":"Why Did Facebook (Meta) Say \\"No\\" to Git? A Story of Scaling, Community, and Giant Monorepos","authors":["joseph"],"tags":["facebook","meta","git","mercurial","monorepo","performance","devops","version-control"]},"unlisted":false,"prevItem":{"title":"The Hidden Dangers of C - Unpacking Memory Management Risks","permalink":"/dev/blog/c-memory-management-risks-the-hidden-dangers"}}')},8281:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>n,toc:()=>c});var n=o(1026),i=o(4848),a=o(8453);const s={slug:"why-facebook-meta-does-not-use-git",title:'Why Did Facebook (Meta) Say "No" to Git? A Story of Scaling, Community, and Giant Monorepos',authors:["joseph"],tags:["facebook","meta","git","mercurial","monorepo","performance","devops","version-control"]},r=void 0,l={authorsImageUrls:[void 0]},c=[{value:"Why Did Facebook (Meta) Say &quot;No&quot; to Git? A Story of Scaling, Community, and Giant Monorepos",id:"why-did-facebook-meta-say-no-to-git-a-story-of-scaling-community-and-giant-monorepos",level:2},{value:"The Astonishing Absence of Git at Meta",id:"the-astonishing-absence-of-git-at-meta",level:3},{value:"The Myth of Git&#39;s Complexity (and why that wasn&#39;t the main reason)",id:"the-myth-of-gits-complexity-and-why-that-wasnt-the-main-reason",level:3},{value:"The Scaling Nightmare in 2012: When Git Reached Its Limits",id:"the-scaling-nightmare-in-2012-when-git-reached-its-limits",level:3},{value:"The Call for Help and the Surprising Response from Git Maintainers",id:"the-call-for-help-and-the-surprising-response-from-git-maintainers",level:3},{value:"Mercurial: The Unexpected Alternative and Its Clean Architecture",id:"mercurial-the-unexpected-alternative-and-its-clean-architecture",level:3},{value:"The Internal Migration: A Masterclass in Change Management",id:"the-internal-migration-a-masterclass-in-change-management",level:3},{value:"The Legacy of Facebook&#39;s Decision: Stack Diffs and an Improved Mercurial",id:"the-legacy-of-facebooks-decision-stack-diffs-and-an-improved-mercurial",level:3},{value:"The Human Factor and the Constant Evolution of Technology",id:"the-human-factor-and-the-constant-evolution-of-technology",level:3}];function h(e){const t={h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"why-did-facebook-meta-say-no-to-git-a-story-of-scaling-community-and-giant-monorepos",children:'Why Did Facebook (Meta) Say "No" to Git? A Story of Scaling, Community, and Giant Monorepos'}),"\n",(0,i.jsx)(t.p,{children:"In the world of software development, Git is ubiquitous. It's the default tool for millions of developers and projects, almost a given, \"as common as water,\" as our source's author points out. It's perceived as the only viable solution for managing code. So imagine the surprise of discovering that Facebook (now Meta), one of the world's largest tech companies, does not use Git as its primary version control system for its immense monorepos."}),"\n",(0,i.jsx)(t.p,{children:"This is a fascinating story that highlights engineering challenges on a colossal scale, the limits of popular tools, and the crucial importance of human factors in technological decisions. Let's delve into the reasons why Meta chose a different path."}),"\n",(0,i.jsx)(t.h3,{id:"the-astonishing-absence-of-git-at-meta",children:"The Astonishing Absence of Git at Meta"}),"\n",(0,i.jsx)(t.p,{children:'For many, the idea that Facebook doesn\'t run on Git is counter-intuitive. The author, whose personal experience with version control systems began with SVN before the explosion of Git, confesses his own surprise: "Throughout my life a git was common as water it was so common in fact that I assumed it was the only viable tool for creating and managing code changes". He recounts how the Facebook engineers he met were "deeply trained on material patterns and Facebook stack diffs workflow" rather than on Git.'}),"\n",(0,i.jsx)(t.p,{children:'Historically, even Google, whose engineering "predates git by over 5 years," uses its own internal system. But for Facebook, it was a more active and recent decision.'}),"\n",(0,i.jsx)(t.h3,{id:"the-myth-of-gits-complexity-and-why-that-wasnt-the-main-reason",children:"The Myth of Git's Complexity (and why that wasn't the main reason)"}),"\n",(0,i.jsx)(t.p,{children:'Before addressing the real reasons, it\'s worth noting that the perceived "difficulty" of Git was not the driving force behind this decision. The author himself wonders: "I\'ve never understood this kind of commenting get is so confusing how is G confusing like what about git is confusing". He often attributes this confusion to a lack of fundamental learning, suggesting that "most of you have just never taking taken the two hours of time it takes to learn get well enough to not be confused by any of it."'}),"\n",(0,i.jsx)(t.p,{children:"No, the reason for Facebook's shift was far deeper and more technical."}),"\n",(0,i.jsx)(t.h3,{id:"the-scaling-nightmare-in-2012-when-git-reached-its-limits",children:"The Scaling Nightmare in 2012: When Git Reached Its Limits"}),"\n",(0,i.jsx)(t.p,{children:'The real breaking point occurred around 2012. By then, Facebook\'s codebase was already "many times larger than even the Linux kernel" (which had 17 million lines and 44,000 files). With exponential growth, Git began to show significant signs of weakness for operations on such a gigantic monorepo.'}),"\n",(0,i.jsx)(t.p,{children:'The key bottleneck? The process of "statting" (checking the status) of all files. "G examines every file and naturally becomes slower and slower as the number of files increase." Basic Git operations, far from being "crippling slow," were slow enough to warrant a thorough investigation. Simulations were "horrifying," showing that simple Git commands could take "over 45 minutes to complete" as the codebase continued to grow. This was untenable for thousands of engineers.'}),"\n",(0,i.jsx)(t.h3,{id:"the-call-for-help-and-the-surprising-response-from-git-maintainers",children:"The Call for Help and the Surprising Response from Git Maintainers"}),"\n",(0,i.jsx)(t.p,{children:"Faced with these challenges, the Facebook team did what many tech companies would have done: they contacted the Git maintainers. Their goal was to collaborate to extend Git and better support large monorepos."}),"\n",(0,i.jsx)(t.p,{children:'However, the response was unexpected and, according to the author, "wasn\'t cooperative." The Git maintainers "pushed back on improving performance and instead recommended that Facebook shared the uh Shard their monor repo" (divide their monorepo into multiple repositories).'}),"\n",(0,i.jsx)(t.p,{children:'This suggestion, though technically possible, was a "non-starter" for Facebook. They had invested heavily in a monorepo workflow, and the complexity of such fragmentation would have been enormous. Even more surprisingly, Facebook expected their offer of "free open source labor by a major tech company is well received," an opportunity to improve a widely used open-source project. The lack of cooperation was a decisive factor.'}),"\n",(0,i.jsx)(t.h3,{id:"mercurial-the-unexpected-alternative-and-its-clean-architecture",children:"Mercurial: The Unexpected Alternative and Its Clean Architecture"}),"\n",(0,i.jsx)(t.p,{children:'Faced with Git\'s limitations and the lack of support for massive monorepos, Facebook explored alternatives. In 2012, options were "scarce." Perforce was dismissed due to perceived architectural flaws. This is where Mercurial entered the scene.'}),"\n",(0,i.jsx)(t.p,{children:'Mercurial had performance "similar to git," but possessed a much cleaner architecture. While Git was a "complex web of bash and C code," Mercurial was "engineered in Python using object-oriented code patterns and was designed to be extensible." This extensibility was crucial.'}),"\n",(0,i.jsx)(t.p,{children:'The team decided to attend a Mercurial hackathon in Amsterdam. What they discovered was not just a flexible system, but also "a community of maintainers who were impressively welcoming to aggressive changes by the Facebook team." This was the perfect contrast to their previous experience.'}),"\n",(0,i.jsx)(t.h3,{id:"the-internal-migration-a-masterclass-in-change-management",children:"The Internal Migration: A Masterclass in Change Management"}),"\n",(0,i.jsx)(t.p,{children:'Convincing the entire engineering organization to migrate from Git to Mercurial was an "intimidating" task. Engineers can be "extremely sensitive about tooling changes." Yet, what followed "sounds like a masterclass in internal Dev tools migrations."'}),"\n",(0,i.jsx)(t.p,{children:"The team methodically:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Socialized the idea:"})," Communicated the necessity and benefits."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Documented workflows:"})," Ensured everyone knew how to use the new tool."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Listened to concerns:"})," Allowed developers to express their doubts."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Made the definitive switch:"})," Cut the cord with Git once the groundwork was laid."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"The success of this massive migration is also attributed, with a hint of irony, to the fact that few Facebook engineers knew Git in depth. As the author notes, \"it's not even a big deal\" to change tools if engineers aren't attached to specific Git subtleties."}),"\n",(0,i.jsx)(t.h3,{id:"the-legacy-of-facebooks-decision-stack-diffs-and-an-improved-mercurial",children:"The Legacy of Facebook's Decision: Stack Diffs and an Improved Mercurial"}),"\n",(0,i.jsx)(t.p,{children:"Facebook's decision was not without consequences for the open-source ecosystem:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Improved Mercurial:"}),' Facebook "contributed performance improvements to Mercurial making it the best option for large monor repos."']}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:'"Stack Diffs":'}),' Building on Mercurial\'s concepts, Facebook created an innovative code review workflow called "stack diffs" (or stacked diffs). This "unlocking novel code review parall parallelization" and revolutionized their development process. Former Facebook engineers exported this workflow to other companies, creating a "small but vocal Cult of Stack diff Enthusiast," even inspiring the author to create tools like Graphite.']}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"the-human-factor-and-the-constant-evolution-of-technology",children:"The Human Factor and the Constant Evolution of Technology"}),"\n",(0,i.jsx)(t.p,{children:'Ultimately, the story of Facebook and Git is a poignant reminder that "so many of History\'s key technical decisions are human driven not technology driven." The receptiveness of a community, the adaptability of a team, and the ability to collaborate can outweigh perceived technical advantages.'}),"\n",(0,i.jsx)(t.p,{children:"It's also crucial to note that the landscape has evolved. \"A decade later GI has made significant improvements to support monor repos... today get now with some knowledge of how to do it operates well with really really large repos now.\" Git has progressed, and it's possible that it could now handle Facebook's needs."}),"\n",(0,i.jsx)(t.p,{children:"Facebook's story is one of a company that had to adapt to explosive growth. Faced with the performance limitations of a dominant tool, and a community that was not ready to support its specific needs at the time, they made a pragmatic choice. It was not a rejection of Git in itself, but a response to a unique scaling problem, resolved with an innovative solution, and a testament to the power of human decisions in large-scale engineering."})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>s,x:()=>r});var n=o(6540);const i={},a=n.createContext(i);function s(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);