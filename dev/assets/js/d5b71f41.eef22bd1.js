"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[7367],{37:e=>{e.exports=JSON.parse('{"tag":{"label":"api","permalink":"/dev/docs/tags/api","allTagsPath":"/dev/docs/tags","count":3,"items":[{"id":"Python/Openai/Api/openai-use-case","title":"OpenAI API Examples","description":"Here are concrete examples for the common use cases of the OpenAI API:","permalink":"/dev/docs/Python/Openai/Api/openai-use-case"},{"id":"Python/Openai/Api/openai-api-intro","title":"OpenAI API Uses","description":"The provided OpenAI API client structure reveals several common use cases for interacting with OpenAI\'s models:","permalink":"/dev/docs/Python/Openai/Api/openai-api-intro"},{"id":"Python/Openai/Api/open-api-code-examples","title":"OpenAI Chat Completion","description":"The most common use case for the OpenAI API in Python is generating chat completions. This involves sending a list of messages to a specified model and receiving a generated response. The API supports both synchronous (blocking) and asynchronous (non-blocking) calls, and responses can be received as a single object or streamed as chunks.","permalink":"/dev/docs/Python/Openai/Api/open-api-code-examples"}],"unlisted":false}}')}}]);