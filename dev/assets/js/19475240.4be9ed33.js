"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[2283],{5437:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"tech-related/Clean Code/clean-code-basics","title":"Clean Code Principles","description":"clean-code-representation.png","source":"@site/docs/tech-related/Clean Code/clean-code-basics.md","sourceDirName":"tech-related/Clean Code","slug":"/tech-related/Clean Code/clean-code-basics","permalink":"/dev/docs/tech-related/Clean Code/clean-code-basics","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"clean code","permalink":"/dev/docs/tags/clean-code"},{"inline":true,"label":"software craftsmanship","permalink":"/dev/docs/tags/software-craftsmanship"},{"inline":true,"label":"code quality","permalink":"/dev/docs/tags/code-quality"}],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Clean Code Principles","sidebar_position":1,"tags":["clean code","software craftsmanship","code quality"]},"sidebar":"tutorialSidebar","previous":{"title":"Token Counts in AI","permalink":"/dev/docs/tech-related/Chatbot/understand-models-token"},"next":{"title":"Hugging Face Overview","permalink":"/dev/docs/tech-related/Huggingface/huggingface-intro"}}');var i=s(4848),o=s(8453);const a={title:"Clean Code Principles",sidebar_position:1,tags:["clean code","software craftsmanship","code quality"]},r="Clean Code Principles",l={},d=[{value:"Key Themes and Essential Ideas",id:"key-themes-and-essential-ideas",level:2},{value:"1. Meaningful Names",id:"1-meaningful-names",level:3},{value:"2. Functions: Do One Thing",id:"2-functions-do-one-thing",level:3},{value:"3. Comments",id:"3-comments",level:3},{value:"4. Formatting",id:"4-formatting",level:3},{value:"5. Error Handling",id:"5-error-handling",level:3},{value:"6. Unit Testing",id:"6-unit-testing",level:3},{value:"7. Successive Refinement",id:"7-successive-refinement",level:3},{value:"8. JUnit Internals",id:"8-junit-internals",level:3},{value:"9. Heuristics and Code Smells",id:"9-heuristics-and-code-smells",level:3},{value:"10. Real Code Example",id:"10-real-code-example",level:3},{value:"Key Quotes",id:"key-quotes",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"clean-code-principles",children:"Clean Code Principles"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"clean-code-representation.png",src:s(9816).A+"",width:"512",height:"360"})}),"\n",(0,i.jsx)(n.p,{children:'The book "Clean Code" emphasizes the fundamental importance of writing clean and readable code for maintainability, scalability, and collaboration in software projects. Below is a structured summary of its main themes and essential ideas.'}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"key-themes-and-essential-ideas",children:"Key Themes and Essential Ideas"}),"\n",(0,i.jsx)(n.h3,{id:"1-meaningful-names",children:"1. Meaningful Names"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Avoid Mental Mapping:"})," Names should use terms from the problem or solution domain, so readers don't have to mentally translate them.","\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:'"Readers shouldn\u2019t have to mentally translate your names into other names they already know."'}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Avoid Single-Letter Names:"})," Except for very limited scopes (like loop counters), single-letter names should be avoided.","\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:'"There can be no worse reason for using the name c than because a and b were already taken."'}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Short vs. Long Names:"})," Shorter names are generally better if they are clear. Do not add unnecessary context.","\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:'"Shorter names are generally better than longer ones, so long as they are clear. Add no more context to a name than is necessary."'}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Clear Context:"})," Names should have explicit context, as shown in the refactoring of ",(0,i.jsx)(n.code,{children:"printGuessStatistics"})," to ",(0,i.jsx)(n.code,{children:"GuessStatisticsMessage"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-functions-do-one-thing",children:"2. Functions: Do One Thing"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Single Responsibility Principle:"})," Functions should do one thing and do it well. This is why functions should be short.","\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:'"They should usually be shorter than Listing 3-2! Indeed, Listing 3-2 should really be shortened to Listing 3-3."'}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Short Blocks and Indentation:"})," Blocks inside ",(0,i.jsx)(n.code,{children:"if"}),", ",(0,i.jsx)(n.code,{children:"else"}),", ",(0,i.jsx)(n.code,{children:"while"}),", etc., should ideally be one line, usually a function call, to improve readability.","\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:'"This implies that the blocks within if statements, else statements, while statements, and so on should be one line long. Probably that line should be a function call."'}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"3-comments",children:"3. Comments"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Avoid Bad Comments:"})," Comments that are redundant, misleading, or used to mask poorly written code should be avoided.","\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:'"Don\u2019t Use a Comment When You Can Use a Function or a Variable"'}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Redundancy:"})," Avoid comments that simply repeat what the code already expresses or are obvious (e.g., Javadocs on simple getters/setters)."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"4-formatting",children:"4. Formatting"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Horizontal Alignment and Density:"})," Use horizontal whitespace to associate related elements and separate unrelated ones. Surround assignment operators with whitespace for clarity.","\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:'"I surrounded the assignment operators with white space to accentuate them."'}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Operator Precedence:"})," Formatting can help make equations more readable by reflecting operator precedence."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Indentation:"})," Never break indentation rules, even for short statements. Proper indentation is crucial for readability and avoiding subtle errors.","\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:'"Whenever I have succumbed to this temptation, I have almost always gone back and put the indentation back in."'}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Silent Scopes:"})," Loops with empty bodies should be formatted to make the semicolon visible and avoid subtle bugs."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"5-error-handling",children:"5. Error Handling"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Prefer Exceptions Over Return Codes:"})," Use exceptions instead of error codes to keep code clean and separate error handling from normal flow.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Example: Throwing ",(0,i.jsx)(n.code,{children:"InvalidArgumentException"})," for null arguments in ",(0,i.jsx)(n.code,{children:"MetricsCalculator.xProjection"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"6-unit-testing",children:"6. Unit Testing"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Test-Driven Development (TDD):"})," TDD is fundamental for writing clean code. Well-written tests reveal general rules and help identify missing cases.","\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:'"Stated like this, you can see that there is a general rule hiding amidst the miscellaneous tests. When you increment the month, the date can be no greater than the last day of the month."'}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Useful Tests:"})," Tests should expose the underlying rules of the code and guide further development."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"7-successive-refinement",children:"7. Successive Refinement"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Incremental Process:"})," Writing clean code is an iterative process of successive refinements. Start with a draft and refactor in small steps to improve structure and readability.","\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:'"I hope your initial reaction to this mass of code is \u201cI\u2019m certainly glad he didn\u2019t leave it like that!\u201d"'}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"TDD Guides Refactoring:"})," TDD helps keep code functional and guides the refactoring process.","\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:'"To avoid this, I use the discipline of Test-Driven Development (TDD)."'}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"8-junit-internals",children:"8. JUnit Internals"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Example of Clean Code:"})," The analysis of JUnit's ",(0,i.jsx)(n.code,{children:"ComparisonCompactor"})," class demonstrates how even relatively clean code can be improved further."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Continuous Improvement:"}),' Always strive to leave the code a little better than you found it ("the Boy Scout Rule").',"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:'"But no module is immune from improvement, and each of us has the responsibility to leave the code a little better than we found it."'}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"9-heuristics-and-code-smells",children:"9. Heuristics and Code Smells"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Clear Names:"})," Names are crucial for readability.","\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:'"Names in software are 90 percent of what make software readable."'}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Avoid Encodings:"})," Names should not be cluttered with type or scope information (e.g., ",(0,i.jsx)(n.code,{children:"m_"}),", ",(0,i.jsx)(n.code,{children:"f_"}),").","\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:'"Names should not be encoded with type or scope information."'}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Single Responsibility Functions:"})," Functions should not have multiple sections performing different operations. Break them into smaller functions.","\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:'"It is often tempting to create functions that have multiple sections that perform a series of operations. Functions of this kind do more than one thing, and should be converted into many smaller functions, each of which does one thing."'}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Separation of Abstraction Levels:"})," Code should separate different abstraction levels, as shown in the refactoring of the ",(0,i.jsx)(n.code,{children:"render()"})," function for the HTML ",(0,i.jsx)(n.code,{children:"hr"})," tag."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"10-real-code-example",children:"10. Real Code Example"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"SerialDate Code Analysis:"})," The appendices present the original and refactored versions of the ",(0,i.jsx)(n.code,{children:"SerialDate"})," code, demonstrating practical application of clean code principles."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Test-Driven Refactoring:"})," Associated tests validate changes during refactoring."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Introduction of New Classes:"})," Refactoring introduces new classes (e.g., ",(0,i.jsx)(n.code,{children:"DayDate"}),", ",(0,i.jsx)(n.code,{children:"Month"}),", ",(0,i.jsx)(n.code,{children:"Day"}),", ",(0,i.jsx)(n.code,{children:"DateInterval"}),", ",(0,i.jsx)(n.code,{children:"DateUtil"}),") to better organize code and respect single responsibility."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"key-quotes",children:"Key Quotes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'"Readers shouldn\u2019t have to mentally translate your names into other names they already know."'}),"\n",(0,i.jsx)(n.li,{children:'"There can be no worse reason for using the name c than because a and b were already taken."'}),"\n",(0,i.jsx)(n.li,{children:'"Shorter names are generally better than longer ones, so long as they are clear. Add no more context to a name than is necessary."'}),"\n",(0,i.jsx)(n.li,{children:'"Don\u2019t Use a Comment When You Can Use a Function or a Variable"'}),"\n",(0,i.jsx)(n.li,{children:'"Whenever I have succumbed to this temptation, I have almost always gone back and put the indentation back in."'}),"\n",(0,i.jsx)(n.li,{children:'"I hope your initial reaction to this mass of code is \u201cI\u2019m certainly glad he didn\u2019t leave it like that!\u201d"'}),"\n",(0,i.jsx)(n.li,{children:'"To avoid this, I use the discipline of Test-Driven Development (TDD)."'}),"\n",(0,i.jsx)(n.li,{children:'"Stated like this, you can see that there is a general rule hiding amidst the miscellaneous tests. When you increment the month, the date can be no greater than the last day of the month."'}),"\n",(0,i.jsx)(n.li,{children:'"But no module is immune from improvement, and each of us has the responsibility to leave the code a little better than we found it."'}),"\n",(0,i.jsx)(n.li,{children:'"Names in software are 90 percent of what make software readable."'}),"\n",(0,i.jsx)(n.li,{children:'"Names should not be encoded with type or scope information."'}),"\n",(0,i.jsx)(n.li,{children:'"It is often tempting to create functions that have multiple sections that perform a series of operations. Functions of this kind do more than one thing, and should be converted into many smaller functions, each of which does one thing."'}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsxs)(n.p,{children:['The excerpts from "Clean Code" highlight the crucial importance of writing clean code as a foundation of professional software development. The book presents a set of principles and practices\u2014from meaningful naming and concise functions to effective commenting, formatting, error handling, and unit testing. The main idea is that clean code is easier to read, understand, maintain, and extend, leading to better team productivity and higher software quality. Real-world refactoring examples, such as the ',(0,i.jsx)(n.code,{children:"SerialDate"})," code, demonstrate the practical application of these principles and the iterative process of continuous code improvement."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>r});var t=s(6540);const i={},o=t.createContext(i);function a(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(o.Provider,{value:n},e.children)}},9816:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/clean-code-representation-0887e99ada29800b1759fba302597c26.png"}}]);