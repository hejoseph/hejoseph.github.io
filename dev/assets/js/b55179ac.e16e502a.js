"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[6306],{8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>r});var t=i(6540);const s={},a=t.createContext(s);function o(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(a.Provider,{value:n},e.children)}},9545:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Portfolio/Jsonamic/introduction","title":"Dynamic JSON Visualizer","description":"Overview","source":"@site/docs/Portfolio/Jsonamic/01-introduction.md","sourceDirName":"Portfolio/Jsonamic","slug":"/Portfolio/Jsonamic/introduction","permalink":"/dev/docs/Portfolio/Jsonamic/introduction","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Score Logging Implementation Guide","permalink":"/dev/docs/Portfolio/CodeTyper/Feature/SCORE_LOGGING_IMPLEMENTATION"},"next":{"title":"Data View Components","permalink":"/dev/docs/Portfolio/Jsonamic/components/data-views"}}');var s=i(4848),a=i(8453);const o={},r="Dynamic JSON Visualizer",l={},c=[{value:"Overview",id:"overview",level:2},{value:"What This Application Does",id:"what-this-application-does",level:2},{value:"Technology Stack",id:"technology-stack",level:2},{value:"Project Architecture",id:"project-architecture",level:2},{value:"Key Concepts",id:"key-concepts",level:2},{value:"JSON Objects",id:"json-objects",level:3},{value:"Flags",id:"flags",level:3},{value:"View Modes",id:"view-modes",level:3},{value:"Data Persistence",id:"data-persistence",level:3},{value:"How It Works",id:"how-it-works",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"dynamic-json-visualizer",children:"Dynamic JSON Visualizer"})}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"The Dynamic JSON Visualizer is a React-based web application that allows users to upload, visualize, search, and manage JSON data in an interactive interface. Built with TypeScript and modern web technologies, it provides both card and table views for exploring JSON datasets with advanced filtering, flagging, and persistence capabilities."}),"\n",(0,s.jsx)(n.h2,{id:"what-this-application-does",children:"What This Application Does"}),"\n",(0,s.jsx)(n.p,{children:"The JSON Visualizer transforms raw JSON data into an interactive, user-friendly interface where you can:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Upload JSON files"})," and automatically parse them into manageable data objects"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Switch between views"})," - card view for detailed object inspection or table view for spreadsheet-like data analysis"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Search and filter"})," data using text search or regular expressions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Flag and categorize"})," items with custom colored flags for organization"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Persist data"})," locally using IndexedDB for offline access and session continuity"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Configure display"})," by selecting which fields to show and how to present them"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"technology-stack",children:"Technology Stack"}),"\n",(0,s.jsx)(n.p,{children:"This is a modern React application built with:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"React 18"})," - The core UI framework using functional components and hooks"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"TypeScript"})," - Provides type safety and better development experience"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Vite"})," - Fast build tool and development server"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Tailwind CSS"})," - Utility-first CSS framework for styling"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"IndexedDB"})," - Browser-based database for local data persistence"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Lucide React"})," - Icon library for UI elements"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"project-architecture",children:"Project Architecture"}),"\n",(0,s.jsx)(n.p,{children:"The application follows a modular React architecture with clear separation of concerns:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"src/\r\n\u251c\u2500\u2500 components/          # Reusable UI components\r\n\u251c\u2500\u2500 contexts/           # React Context for state management\r\n\u251c\u2500\u2500 types/              # TypeScript type definitions\r\n\u251c\u2500\u2500 utils/              # Helper functions and utilities\r\n\u251c\u2500\u2500 App.tsx             # Main application component\r\n\u2514\u2500\u2500 main.tsx            # Application entry point\n"})}),"\n",(0,s.jsx)(n.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,s.jsx)(n.h3,{id:"json-objects",children:"JSON Objects"}),"\n",(0,s.jsxs)(n.p,{children:['The application treats each item in your JSON data as a "JSON Object" - a structured piece of data that can contain any valid JSON values (strings, numbers, booleans, arrays, or nested objects). Each object gets a unique identifier (',(0,s.jsx)(n.code,{children:"__id"}),") for tracking and management."]}),"\n",(0,s.jsx)(n.h3,{id:"flags",children:"Flags"}),"\n",(0,s.jsx)(n.p,{children:'Flags are custom labels you can attach to JSON objects for categorization. Each flag has a name, color, and icon, allowing you to visually organize your data. For example, you might create flags like "Important" (red), "Reviewed" (green), or "Needs Attention" (yellow).'}),"\n",(0,s.jsx)(n.h3,{id:"view-modes",children:"View Modes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Card View"}),": Displays each JSON object as an individual card, ideal for detailed inspection of complex nested data"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Table View"}),": Shows data in a spreadsheet-like format, perfect for comparing values across multiple objects"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"data-persistence",children:"Data Persistence"}),"\n",(0,s.jsx)(n.p,{children:"The application uses IndexedDB (a browser database) to store your data locally. This means your uploaded JSON data, custom flags, and configuration settings persist between browser sessions without requiring a server."}),"\n",(0,s.jsx)(n.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Data Loading"}),": When you upload a JSON file, the application parses it and assigns unique IDs to each object"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"State Management"}),": React Context manages the application state, including data, search filters, and view preferences"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Real-time Filtering"}),": As you type in the search bar, the displayed data updates immediately using client-side filtering"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Local Storage"}),": All changes (flags, configurations, data modifications) are automatically saved to IndexedDB"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Responsive UI"}),": The interface adapts to different screen sizes and supports both light and dark themes"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This application is particularly useful for developers, data analysts, or anyone who needs to explore and organize JSON datasets in a visual, interactive way."})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);