"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[7338],{4816:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"QA-Testing/Test-Design-Coverage/test-coverage-types","title":"Types of Test Coverage: Requirement, Code, and Risk Coverage","description":"In software testing, test coverage measures how much of the system is tested. It\'s a metric that helps QA teams assess the effectiveness, completeness, and focus of the testing effort. Three essential types of test coverage are:","source":"@site/docs/QA-Testing/3-Test-Design-Coverage/6-test-coverage-types.md","sourceDirName":"QA-Testing/3-Test-Design-Coverage","slug":"/QA-Testing/Test-Design-Coverage/test-coverage-types","permalink":"/dev/docs/QA-Testing/Test-Design-Coverage/test-coverage-types","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Test Case Design Technique: Pairwise Testing","permalink":"/dev/docs/QA-Testing/Test-Design-Coverage/pairwise-testing"},"next":{"title":"Mapping Test Cases to Requirements/User Stories","permalink":"/dev/docs/QA-Testing/Test-Design-Coverage/map-test-case-user-story"}}');var r=t(4848),i=t(8453);const o={},l="Types of Test Coverage: Requirement, Code, and Risk Coverage",a={},d=[{value:"1. Requirement Coverage",id:"1-requirement-coverage",level:2},{value:"What It Is:",id:"what-it-is",level:3},{value:"Why It Matters:",id:"why-it-matters",level:3},{value:"How It&#39;s Measured:",id:"how-its-measured",level:3},{value:"Tools:",id:"tools",level:3},{value:"Example Use Case:",id:"example-use-case",level:3},{value:"2. Code Coverage",id:"2-code-coverage",level:2},{value:"What It Is:",id:"what-it-is-1",level:3},{value:"Types of Code Coverage:",id:"types-of-code-coverage",level:3},{value:"How It&#39;s Measured:",id:"how-its-measured-1",level:3},{value:"Tools:",id:"tools-1",level:3},{value:"Example Use Case:",id:"example-use-case-1",level:3},{value:"3. Risk Coverage",id:"3-risk-coverage",level:2},{value:"What It Is:",id:"what-it-is-2",level:3},{value:"Why It Matters:",id:"why-it-matters-1",level:3},{value:"How It\u2019s Assessed:",id:"how-its-assessed",level:3},{value:"Tools:",id:"tools-2",level:3},{value:"Example Use Case:",id:"example-use-case-2",level:3},{value:"Comparison Table",id:"comparison-table",level:2},{value:"Summary",id:"summary",level:2}];function c(e){const s={blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"types-of-test-coverage-requirement-code-and-risk-coverage",children:"Types of Test Coverage: Requirement, Code, and Risk Coverage"})}),"\n",(0,r.jsxs)(s.p,{children:["In software testing, ",(0,r.jsx)(s.strong,{children:"test coverage"})," measures how much of the system is tested. It's a metric that helps QA teams assess the ",(0,r.jsx)(s.strong,{children:"effectiveness"}),", ",(0,r.jsx)(s.strong,{children:"completeness"}),", and ",(0,r.jsx)(s.strong,{children:"focus"})," of the testing effort. Three essential types of test coverage are:"]}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.strong,{children:"Requirement Coverage"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.strong,{children:"Code Coverage"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.strong,{children:"Risk Coverage"})}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"1-requirement-coverage",children:"1. Requirement Coverage"}),"\n",(0,r.jsx)(s.h3,{id:"what-it-is",children:"What It Is:"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Requirement coverage"})," ensures that ",(0,r.jsx)(s.strong,{children:"all functional and non-functional requirements"})," are tested by at least one test case. It maps ",(0,r.jsx)(s.strong,{children:"test cases to requirements"})," to confirm that each customer/user need is validated."]}),"\n",(0,r.jsx)(s.h3,{id:"why-it-matters",children:"Why It Matters:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Ensures ",(0,r.jsx)(s.strong,{children:"traceability"})," from requirements to tests"]}),"\n",(0,r.jsxs)(s.li,{children:["Identifies ",(0,r.jsx)(s.strong,{children:"unimplemented or untested requirements"})]}),"\n",(0,r.jsxs)(s.li,{children:["Reduces the risk of ",(0,r.jsx)(s.strong,{children:"missed functionalities"})]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"how-its-measured",children:"How It's Measured:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["% of requirements linked to test cases",(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.code,{children:"Requirement Coverage = (Number of requirements with at least one test case / Total number of requirements) \xd7 100"})]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"tools",children:"Tools:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Test management tools like ",(0,r.jsx)(s.strong,{children:"Jira + Xray"}),", ",(0,r.jsx)(s.strong,{children:"TestRail"}),", ",(0,r.jsx)(s.strong,{children:"qTest"}),", ",(0,r.jsx)(s.strong,{children:"Zephyr"}),", ",(0,r.jsx)(s.strong,{children:"ALM/Quality Center"})]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"example-use-case",children:"Example Use Case:"}),"\n",(0,r.jsx)(s.p,{children:"In a banking app, if there\u2019s a requirement:"}),"\n",(0,r.jsxs)(s.blockquote,{children:["\n",(0,r.jsx)(s.p,{children:"\u201cUsers must be able to transfer funds between accounts.\u201d"}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"You must have at least one test case (manual or automated) that validates this feature. If no test exists for it, the coverage is incomplete."}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"2-code-coverage",children:"2. Code Coverage"}),"\n",(0,r.jsx)(s.h3,{id:"what-it-is-1",children:"What It Is:"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Code coverage"})," refers to how much of the ",(0,r.jsx)(s.strong,{children:"application\u2019s source code"})," is exercised by the tests (typically ",(0,r.jsx)(s.strong,{children:"unit tests"}),"). It helps developers and QA engineers measure the ",(0,r.jsx)(s.strong,{children:"depth"})," of testing on the implementation level."]}),"\n",(0,r.jsx)(s.h3,{id:"types-of-code-coverage",children:"Types of Code Coverage:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Statement Coverage"}),": Every line of code is executed at least once"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Branch Coverage"}),": All ",(0,r.jsx)(s.code,{children:"if"}),"/",(0,r.jsx)(s.code,{children:"else"}),", ",(0,r.jsx)(s.code,{children:"switch"}),", and other decision points are tested"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Condition Coverage"}),": Each boolean sub-expression is tested for both ",(0,r.jsx)(s.code,{children:"true"})," and ",(0,r.jsx)(s.code,{children:"false"})]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Path Coverage"}),": All possible execution paths are tested (most thorough, hardest to achieve)"]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"how-its-measured-1",children:"How It's Measured:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.code,{children:"Code Coverage = (Number of lines/branches/paths executed by tests / Total number in the codebase) \xd7 100"})}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"tools-1",children:"Tools:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"JaCoCo"}),", ",(0,r.jsx)(s.strong,{children:"Cobertura"}),", ",(0,r.jsx)(s.strong,{children:"Istanbul (JavaScript)"}),", ",(0,r.jsx)(s.strong,{children:"Coverage.py (Python)"}),", ",(0,r.jsx)(s.strong,{children:"Visual Studio Code Coverage"}),", etc."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"example-use-case-1",children:"Example Use Case:"}),"\n",(0,r.jsxs)(s.p,{children:["If a login module has 100 lines of code and your unit tests execute 85 lines during testing, you have ",(0,r.jsx)(s.strong,{children:"85% statement coverage"}),". If key branches (e.g., invalid login, empty fields) are untested, that will show in ",(0,r.jsx)(s.strong,{children:"branch coverage"})," metrics."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"3-risk-coverage",children:"3. Risk Coverage"}),"\n",(0,r.jsx)(s.h3,{id:"what-it-is-2",children:"What It Is:"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Risk coverage"})," is about ensuring that ",(0,r.jsx)(s.strong,{children:"high-risk areas"})," of the application receive the ",(0,r.jsx)(s.strong,{children:"most attention"})," during testing. It ties the level of testing to the ",(0,r.jsx)(s.strong,{children:"potential impact and likelihood of failure"}),"."]}),"\n",(0,r.jsx)(s.h3,{id:"why-it-matters-1",children:"Why It Matters:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Helps prioritize testing when ",(0,r.jsx)(s.strong,{children:"time or resources are limited"})]}),"\n",(0,r.jsxs)(s.li,{children:["Focuses effort on what matters most to ",(0,r.jsx)(s.strong,{children:"business and end-users"})]}),"\n",(0,r.jsxs)(s.li,{children:["Useful in ",(0,r.jsx)(s.strong,{children:"risk-based testing strategies"})]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"how-its-assessed",children:"How It\u2019s Assessed:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Risks are identified and ranked based on:","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Impact"})," (business criticality)"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Probability"})," (likelihood of failure)"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["Tests are then ",(0,r.jsx)(s.strong,{children:"mapped and weighted"})," according to risk level"]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"tools-2",children:"Tools:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Risk assessment matrices (often done manually or in spreadsheets)"}),"\n",(0,r.jsxs)(s.li,{children:["Test management tools that support ",(0,r.jsx)(s.strong,{children:"risk prioritization"})," (e.g., ",(0,r.jsx)(s.strong,{children:"qTest"}),", ",(0,r.jsx)(s.strong,{children:"PractiTest"}),")"]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"example-use-case-2",children:"Example Use Case:"}),"\n",(0,r.jsx)(s.p,{children:"In a healthcare application:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Patient data encryption"})," is a high-risk item \u2192 must have thorough testing (functional, security, performance)"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Theme color preference"})," is low-risk \u2192 may have minimal testing"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"Risk-based test planning ensures the former is not under-tested due to time constraints."}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"comparison-table",children:"Comparison Table"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Coverage Type"}),(0,r.jsx)(s.th,{children:"Focus"}),(0,r.jsx)(s.th,{children:"Who Uses It"}),(0,r.jsx)(s.th,{children:"Key Benefit"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Requirement"}),(0,r.jsx)(s.td,{children:"User/business needs"}),(0,r.jsx)(s.td,{children:"QA, BA, PO"}),(0,r.jsx)(s.td,{children:"Validates functional completeness"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Code"}),(0,r.jsx)(s.td,{children:"Source code paths"}),(0,r.jsx)(s.td,{children:"Dev, QA"}),(0,r.jsx)(s.td,{children:"Measures unit/implementation testing"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Risk"}),(0,r.jsx)(s.td,{children:"Business risk areas"}),(0,r.jsx)(s.td,{children:"QA, Stakeholders"}),(0,r.jsx)(s.td,{children:"Ensures critical areas are tested"})]})]})]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsx)(s.p,{children:"Each type of coverage plays a vital role in delivering a high-quality product:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Requirement Coverage"}),": Ensures user needs are not forgotten"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Code Coverage"}),": Ensures code has been thoroughly unit tested"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Risk Coverage"}),": Ensures effort is focused where failure hurts most"]}),"\n"]}),"\n",(0,r.jsxs)(s.blockquote,{children:["\n",(0,r.jsx)(s.p,{children:"\u201cComprehensive QA means covering not just what the system does, but how it\u2019s built and where it could break.\u201d"}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["Combining these coverage strategies leads to ",(0,r.jsx)(s.strong,{children:"smarter"}),", ",(0,r.jsx)(s.strong,{children:"more efficient"}),", and ",(0,r.jsx)(s.strong,{children:"risk-aware"})," testing."]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>o,x:()=>l});var n=t(6540);const r={},i=n.createContext(r);function o(e){const s=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(i.Provider,{value:s},e.children)}}}]);