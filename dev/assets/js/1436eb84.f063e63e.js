"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[6718],{2693:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"Portfolio/MovieList/database/mongodb-configuration","title":"MongoDB Database Configuration","description":"Overview","source":"@site/docs/Portfolio/MovieList/database/mongodb-configuration.md","sourceDirName":"Portfolio/MovieList/database","slug":"/Portfolio/MovieList/database/mongodb-configuration","permalink":"/dev/docs/Portfolio/MovieList/database/mongodb-configuration","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"spring-boot-backend","permalink":"/dev/docs/Portfolio/MovieList/api/spring-boot-backend"},"next":{"title":"Docker Deployment Configuration","permalink":"/dev/docs/Portfolio/MovieList/deployment/docker-setup"}}');var o=i(4848),a=i(8453);const s={},r="MongoDB Database Configuration",l={},d=[{value:"Overview",id:"overview",level:2},{value:"Database Setup",id:"database-setup",level:2},{value:"Container Configuration",id:"container-configuration",level:3},{value:"Automatic Database Initialization",id:"automatic-database-initialization",level:3},{value:"Database Structure",id:"database-structure",level:2},{value:"Database Name",id:"database-name",level:3},{value:"Connection Configuration",id:"connection-configuration",level:3},{value:"Local Development (application-local.properties)",id:"local-development-application-localproperties",level:4},{value:"Production (application-prod.properties)",id:"production-application-prodproperties",level:4},{value:"Data Initialization Process",id:"data-initialization-process",level:2},{value:"1. Initialization Script (init-mongo.js)",id:"1-initialization-script-init-mongojs",level:3},{value:"2. Movie Data Structure (data.json)",id:"2-movie-data-structure-datajson",level:3},{value:"Data Persistence",id:"data-persistence",level:2},{value:"Development Mode",id:"development-mode",level:3},{value:"Enabling Persistence",id:"enabling-persistence",level:3},{value:"Database Operations",id:"database-operations",level:2},{value:"Benefits of This Setup",id:"benefits-of-this-setup",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"mongodb-database-configuration",children:"MongoDB Database Configuration"})}),"\n",(0,o.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsx)(n.p,{children:"The Movie List Application uses MongoDB as its primary database to store movie information and user reviews. MongoDB is a NoSQL document database that stores data in flexible, JSON-like documents called BSON (Binary JSON)."}),"\n",(0,o.jsx)(n.h2,{id:"database-setup",children:"Database Setup"}),"\n",(0,o.jsx)(n.h3,{id:"container-configuration",children:"Container Configuration"}),"\n",(0,o.jsxs)(n.p,{children:["The MongoDB database runs in a Docker container named ",(0,o.jsx)(n.code,{children:"mongo-local"})," using the official MongoDB image:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'mongo-local:\r\n  image: mongo:latest\r\n  container_name: mongo-local\r\n  ports:\r\n    - "27017:27017"\r\n  volumes:\r\n    - ./mongo-init:/docker-entrypoint-initdb.d\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Key Configuration Details:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Image"}),": ",(0,o.jsx)(n.code,{children:"mongo:latest"})," - Uses the most recent stable MongoDB version"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Port"}),": 27017 (MongoDB's default port) is exposed to the host"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Initialization"}),": The ",(0,o.jsx)(n.code,{children:"mongo-init"})," folder is mounted to ",(0,o.jsx)(n.code,{children:"/docker-entrypoint-initdb.d"})]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"automatic-database-initialization",children:"Automatic Database Initialization"}),"\n",(0,o.jsxs)(n.p,{children:["MongoDB automatically executes any scripts placed in ",(0,o.jsx)(n.code,{children:"/docker-entrypoint-initdb.d"})," when the container starts for the first time. This project uses this feature to populate the database with initial movie data."]}),"\n",(0,o.jsx)(n.h2,{id:"database-structure",children:"Database Structure"}),"\n",(0,o.jsx)(n.h3,{id:"database-name",children:"Database Name"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Database"}),": ",(0,o.jsx)(n.code,{children:"movie-api-db"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Collection"}),": ",(0,o.jsx)(n.code,{children:"movies"})," (stores all movie documents)"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"connection-configuration",children:"Connection Configuration"}),"\n",(0,o.jsx)(n.p,{children:"The Spring Boot application connects to MongoDB using different configurations based on the environment:"}),"\n",(0,o.jsx)(n.h4,{id:"local-development-application-localproperties",children:"Local Development (application-local.properties)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-properties",children:"spring.data.mongodb.host=mongo-local\r\nspring.data.mongodb.port=27017\r\nspring.data.mongodb.database=movie-api-db\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"host=mongo-local"}),': Connects to the Docker container named "mongo-local"']}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"port=27017"}),": Uses MongoDB's standard port"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"database=movie-api-db"}),": Specifies the database name"]}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"production-application-prodproperties",children:"Production (application-prod.properties)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-properties",children:"# Commented out - would use MongoDB Atlas or other cloud service\r\n# spring.data.mongodb.uri=mongodb+srv://user:password@cluster\n"})}),"\n",(0,o.jsx)(n.h2,{id:"data-initialization-process",children:"Data Initialization Process"}),"\n",(0,o.jsx)(n.h3,{id:"1-initialization-script-init-mongojs",children:"1. Initialization Script (init-mongo.js)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"const fs = require('fs');\r\nconst path = require('path');\r\n\r\n// Read the movie data from JSON file\r\nconst dataPath = path.join('/docker-entrypoint-initdb.d', 'data.json');\r\nconst data = JSON.parse(fs.readFileSync(dataPath, 'utf8'));\r\n\r\n// Connect to the database\r\nconst db = connect('mongodb://localhost:27017/movie-api-db');\r\n\r\n// Insert all movie data into the movies collection\r\ndb.movies.insertMany(data);\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"How it works:"})}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"File Reading"}),": Reads movie data from ",(0,o.jsx)(n.code,{children:"data.json"})," file"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Database Connection"}),": Connects to the ",(0,o.jsx)(n.code,{children:"movie-api-db"})," database"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Data Insertion"}),": Uses ",(0,o.jsx)(n.code,{children:"insertMany()"})," to add all movies to the ",(0,o.jsx)(n.code,{children:"movies"})," collection"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"2-movie-data-structure-datajson",children:"2. Movie Data Structure (data.json)"}),"\n",(0,o.jsx)(n.p,{children:"Each movie document contains the following fields:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\r\n  "imdbId": "tt3915174",\r\n  "title": "Puss in Boots: The Last Wish",\r\n  "releaseDate": "2022-12-21",\r\n  "trailerLink": "https://www.youtube.com/watch?v=tHb7WlgyaUc",\r\n  "genres": ["Animation", "Action", "Adventure", "Comedy", "Family"],\r\n  "poster": "https://image.tmdb.org/t/p/w500/1NqwE6LP9IEdOZ57NCT51ftHtWT.jpg",\r\n  "backdrops": [\r\n    "https://image.tmdb.org/t/p/original/r9PkFnRUIthgBp2JZZzD380MWZy.jpg",\r\n    // ... more backdrop URLs\r\n  ]\r\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Field Descriptions:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"imdbId"}),": Unique identifier from IMDb (Internet Movie Database)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"title"}),": Movie title"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"releaseDate"}),": When the movie was released (YYYY-MM-DD format)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"trailerLink"}),": YouTube URL for the movie trailer"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"genres"}),": Array of genre categories"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"poster"}),": URL to the movie poster image"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"backdrops"}),": Array of background image URLs for the movie"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"data-persistence",children:"Data Persistence"}),"\n",(0,o.jsx)(n.h3,{id:"development-mode",children:"Development Mode"}),"\n",(0,o.jsxs)(n.p,{children:["By default, data is ",(0,o.jsx)(n.strong,{children:"not persisted"})," between container restarts. When you stop and restart the containers, the database is reinitialized with the original data."]}),"\n",(0,o.jsx)(n.h3,{id:"enabling-persistence",children:"Enabling Persistence"}),"\n",(0,o.jsxs)(n.p,{children:["To persist data between restarts, uncomment the volume configuration in ",(0,o.jsx)(n.code,{children:"docker-compose.yml"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"volumes:\r\n  - mongo-local-data:/data/db\n"})}),"\n",(0,o.jsx)(n.p,{children:"This creates a named Docker volume that survives container restarts."}),"\n",(0,o.jsx)(n.h2,{id:"database-operations",children:"Database Operations"}),"\n",(0,o.jsx)(n.p,{children:"The Spring Boot application interacts with MongoDB through:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Spring Data MongoDB"}),": Provides repository pattern for database operations"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Automatic Mapping"}),": Converts between Java objects and MongoDB documents"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Query Methods"}),": Allows finding movies by various criteria (title, genre, etc.)"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"benefits-of-this-setup",children:"Benefits of This Setup"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Quick Development"}),": Database is ready with sample data immediately"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Consistency"}),": Every developer gets the same initial dataset"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Flexibility"}),": NoSQL structure allows easy schema changes"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Scalability"}),": MongoDB can handle large amounts of movie and review data"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Docker Integration"}),": Database runs consistently across different environments"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>r});var t=i(6540);const o={},a=t.createContext(o);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);