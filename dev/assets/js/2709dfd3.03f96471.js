"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[398],{1924:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"Portfolio/MovieList/deployment/docker-setup","title":"Docker Deployment Configuration","description":"Overview","source":"@site/docs/Portfolio/MovieList/deployment/docker-setup.md","sourceDirName":"Portfolio/MovieList/deployment","slug":"/Portfolio/MovieList/deployment/docker-setup","permalink":"/dev/docs/Portfolio/MovieList/deployment/docker-setup","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"MongoDB Database Configuration","permalink":"/dev/docs/Portfolio/MovieList/database/mongodb-configuration"},"next":{"title":"Dockerfile Configuration Details","permalink":"/dev/docs/Portfolio/MovieList/deployment/dockerfile-details"}}');var s=i(4848),r=i(8453);const l={},t="Docker Deployment Configuration",c={},d=[{value:"Overview",id:"overview",level:2},{value:"Docker Compose Configuration",id:"docker-compose-configuration",level:2},{value:"Main Configuration (docker-compose.yml)",id:"main-configuration-docker-composeyml",level:3},{value:"Service Breakdown",id:"service-breakdown",level:2},{value:"1. Frontend Service (movie-list-front)",id:"1-frontend-service-movie-list-front",level:3},{value:"2. Backend Service (movie-api)",id:"2-backend-service-movie-api",level:3},{value:"3. Database Service (mongo-local)",id:"3-database-service-mongo-local",level:3},{value:"Container Dependencies",id:"container-dependencies",level:2},{value:"Port Configuration",id:"port-configuration",level:2},{value:"Volume Configuration",id:"volume-configuration",level:2},{value:"Database Initialization",id:"database-initialization",level:3},{value:"Optional Data Persistence",id:"optional-data-persistence",level:3},{value:"Build Process",id:"build-process",level:2},{value:"Development Build",id:"development-build",level:3},{value:"Production Considerations",id:"production-considerations",level:3},{value:"Network Communication",id:"network-communication",level:2},{value:"Internal Docker Network",id:"internal-docker-network",level:3},{value:"External Access",id:"external-access",level:3},{value:"Common Commands",id:"common-commands",level:2},{value:"Start All Services",id:"start-all-services",level:3},{value:"Start in Background",id:"start-in-background",level:3},{value:"Stop All Services",id:"stop-all-services",level:3},{value:"View Logs",id:"view-logs",level:3},{value:"Rebuild Specific Service",id:"rebuild-specific-service",level:3},{value:"Benefits of This Docker Setup",id:"benefits-of-this-docker-setup",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Debugging Commands",id:"debugging-commands",level:3}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"docker-deployment-configuration",children:"Docker Deployment Configuration"})}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"The Movie List Application uses Docker and Docker Compose to containerize all components, ensuring consistent deployment across different environments. This setup includes three main services: the React frontend, Spring Boot backend, and MongoDB database."}),"\n",(0,s.jsx)(n.h2,{id:"docker-compose-configuration",children:"Docker Compose Configuration"}),"\n",(0,s.jsx)(n.h3,{id:"main-configuration-docker-composeyml",children:"Main Configuration (docker-compose.yml)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'version: \'3.8\'\r\n\r\nservices:\r\n  movie-list-front:\r\n    container_name: movie-list-front\r\n    build:\r\n      context: ./movie-list-front\r\n      dockerfile: Dockerfile\r\n    ports:\r\n      - "3000:80"\r\n    depends_on:\r\n      - movie-api\r\n\r\n  mongo-local:\r\n    image: mongo:latest\r\n    container_name: mongo-local\r\n    ports:\r\n      - "27017:27017"\r\n    volumes:\r\n      - ./mongo-init:/docker-entrypoint-initdb.d\r\n\r\n  movie-api:\r\n    image: movie-api:latest\r\n    build: ./movie-api\r\n    container_name: movie-api\r\n    environment:\r\n      - SPRING_PROFILES_ACTIVE=local\r\n    ports:\r\n      - "8080:8080"\r\n    depends_on:\r\n      - mongo-local\n'})}),"\n",(0,s.jsx)(n.h2,{id:"service-breakdown",children:"Service Breakdown"}),"\n",(0,s.jsx)(n.h3,{id:"1-frontend-service-movie-list-front",children:"1. Frontend Service (movie-list-front)"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Configuration Details:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Container Name"}),": ",(0,s.jsx)(n.code,{children:"movie-list-front"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Build Context"}),": ",(0,s.jsx)(n.code,{children:"./movie-list-front"})," directory"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Port Mapping"}),": Host port 3000 \u2192 Container port 80"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Dependencies"}),": Waits for ",(0,s.jsx)(n.code,{children:"movie-api"})," to start"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Key Features:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Uses custom Dockerfile for React application"}),"\n",(0,s.jsx)(n.li,{children:"Exposes the application on port 3000 for local development"}),"\n",(0,s.jsx)(n.li,{children:"Depends on backend API being available"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"2-backend-service-movie-api",children:"2. Backend Service (movie-api)"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Configuration Details:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Container Name"}),": ",(0,s.jsx)(n.code,{children:"movie-api"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Image Name"}),": ",(0,s.jsx)(n.code,{children:"movie-api:latest"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Build Context"}),": ",(0,s.jsx)(n.code,{children:"./movie-api"})," directory"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Port Mapping"}),": Host port 8080 \u2192 Container port 8080"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Environment"}),": ",(0,s.jsx)(n.code,{children:"SPRING_PROFILES_ACTIVE=local"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Dependencies"}),": Waits for ",(0,s.jsx)(n.code,{children:"mongo-local"})," to start"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Environment Variables:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"SPRING_PROFILES_ACTIVE=local"}),": Tells Spring Boot to use local configuration","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Uses ",(0,s.jsx)(n.code,{children:"application-local.properties"})," for database connection"]}),"\n",(0,s.jsxs)(n.li,{children:["Connects to MongoDB container named ",(0,s.jsx)(n.code,{children:"mongo-local"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"3-database-service-mongo-local",children:"3. Database Service (mongo-local)"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Configuration Details:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Container Name"}),": ",(0,s.jsx)(n.code,{children:"mongo-local"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Image"}),": ",(0,s.jsx)(n.code,{children:"mongo:latest"})," (official MongoDB image)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Port Mapping"}),": Host port 27017 \u2192 Container port 27017"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Volume Mount"}),": ",(0,s.jsx)(n.code,{children:"./mongo-init:/docker-entrypoint-initdb.d"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Initialization Process:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["MongoDB automatically executes scripts in ",(0,s.jsx)(n.code,{children:"/docker-entrypoint-initdb.d"})]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"mongo-init"})," folder contains initialization scripts and data"]}),"\n",(0,s.jsx)(n.li,{children:"Database is populated with movie data on first startup"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"container-dependencies",children:"Container Dependencies"}),"\n",(0,s.jsx)(n.p,{children:"The services start in a specific order due to dependency configuration:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"1. mongo-local (starts first)\r\n2. movie-api (waits for mongo-local)\r\n3. movie-list-front (waits for movie-api)\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Why Dependencies Matter:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Database First"}),": MongoDB must be ready before the API tries to connect"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"API Before Frontend"}),": Frontend needs the API endpoints to be available"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Health Checks"}),": Docker Compose ensures dependent services are running"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"port-configuration",children:"Port Configuration"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Service"}),(0,s.jsx)(n.th,{children:"Host Port"}),(0,s.jsx)(n.th,{children:"Container Port"}),(0,s.jsx)(n.th,{children:"Purpose"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Frontend"}),(0,s.jsx)(n.td,{children:"3000"}),(0,s.jsx)(n.td,{children:"80"}),(0,s.jsx)(n.td,{children:"React application access"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Backend"}),(0,s.jsx)(n.td,{children:"8080"}),(0,s.jsx)(n.td,{children:"8080"}),(0,s.jsx)(n.td,{children:"Spring Boot API endpoints"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Database"}),(0,s.jsx)(n.td,{children:"27017"}),(0,s.jsx)(n.td,{children:"27017"}),(0,s.jsx)(n.td,{children:"MongoDB connection"})]})]})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Port Mapping Explanation:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Host Port"}),": Port accessible from your local machine"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Container Port"}),": Port the service listens on inside the container"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Frontend"}),": Maps to port 80 (standard HTTP) inside container, exposed as 3000 externally"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"volume-configuration",children:"Volume Configuration"}),"\n",(0,s.jsx)(n.h3,{id:"database-initialization",children:"Database Initialization"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"volumes:\r\n  - ./mongo-init:/docker-entrypoint-initdb.d\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Mounts local ",(0,s.jsx)(n.code,{children:"mongo-init"})," folder into MongoDB container"]}),"\n",(0,s.jsxs)(n.li,{children:["Contains ",(0,s.jsx)(n.code,{children:"init-mongo.js"})," script and ",(0,s.jsx)(n.code,{children:"data.json"})," file"]}),"\n",(0,s.jsx)(n.li,{children:"Automatically populates database with movie data"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"optional-data-persistence",children:"Optional Data Persistence"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# Commented out by default\r\n# volumes:\r\n#   - mongo-local-data:/data/db\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"When Enabled"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Creates a named Docker volume for MongoDB data"}),"\n",(0,s.jsx)(n.li,{children:"Data survives container restarts and rebuilds"}),"\n",(0,s.jsx)(n.li,{children:"Useful for development when you want to keep database changes"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"build-process",children:"Build Process"}),"\n",(0,s.jsx)(n.h3,{id:"development-build",children:"Development Build"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker-compose up --build\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"What Happens:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Builds Custom Images"}),": Creates Docker images for frontend and backend"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Pulls Base Images"}),": Downloads MongoDB image if not present"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Creates Network"}),": Sets up internal Docker network for service communication"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Starts Services"}),": Launches all containers in dependency order"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Initializes Database"}),": Runs MongoDB initialization scripts"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"production-considerations",children:"Production Considerations"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Environment Variables"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Production would use ",(0,s.jsx)(n.code,{children:"SPRING_PROFILES_ACTIVE=prod"})]}),"\n",(0,s.jsx)(n.li,{children:"Would connect to external MongoDB service (like MongoDB Atlas)"}),"\n",(0,s.jsx)(n.li,{children:"Frontend would be built with production optimizations"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Security"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Remove development headers and CORS configurations"}),"\n",(0,s.jsx)(n.li,{children:"Use environment-specific database credentials"}),"\n",(0,s.jsx)(n.li,{children:"Implement proper authentication and authorization"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"network-communication",children:"Network Communication"}),"\n",(0,s.jsx)(n.h3,{id:"internal-docker-network",children:"Internal Docker Network"}),"\n",(0,s.jsx)(n.p,{children:"Docker Compose automatically creates a network where services can communicate using container names:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Frontend \u2192 Backend"}),": ",(0,s.jsx)(n.code,{children:"http://movie-api:8080"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Backend \u2192 Database"}),": ",(0,s.jsx)(n.code,{children:"mongodb://mongo-local:27017"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"external-access",children:"External Access"}),"\n",(0,s.jsx)(n.p,{children:"From your local machine:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Frontend"}),": ",(0,s.jsx)(n.code,{children:"http://localhost:3000"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Backend API"}),": ",(0,s.jsx)(n.code,{children:"http://localhost:8080"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Database"}),": ",(0,s.jsx)(n.code,{children:"mongodb://localhost:27017"})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"common-commands",children:"Common Commands"}),"\n",(0,s.jsx)(n.h3,{id:"start-all-services",children:"Start All Services"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker-compose up --build\n"})}),"\n",(0,s.jsx)(n.h3,{id:"start-in-background",children:"Start in Background"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker-compose up -d --build\n"})}),"\n",(0,s.jsx)(n.h3,{id:"stop-all-services",children:"Stop All Services"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker-compose down\n"})}),"\n",(0,s.jsx)(n.h3,{id:"view-logs",children:"View Logs"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker-compose logs [service-name]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"rebuild-specific-service",children:"Rebuild Specific Service"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker-compose build [service-name]\n"})}),"\n",(0,s.jsx)(n.h2,{id:"benefits-of-this-docker-setup",children:"Benefits of This Docker Setup"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Consistency"}),": Same environment across development, testing, and production"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Isolation"}),": Each service runs in its own container"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Easy Setup"}),": Single command starts entire application stack"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Scalability"}),": Services can be scaled independently"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Development Speed"}),": No need to install dependencies locally"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Version Control"}),": Infrastructure configuration is code-managed"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Clean Environment"}),": Easy to reset to fresh state"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Port Conflicts"}),": Ensure ports 3000, 8080, and 27017 are available"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Build Failures"}),": Check Dockerfile syntax and dependencies"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Database Connection"}),": Verify MongoDB is fully started before API"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CORS Issues"}),": Ensure frontend and backend can communicate"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"debugging-commands",children:"Debugging Commands"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Check running containers\r\ndocker ps\r\n\r\n# View container logs\r\ndocker logs [container-name]\r\n\r\n# Execute commands in container\r\ndocker exec -it [container-name] /bin/bash\r\n\r\n# Check network connectivity\r\ndocker network ls\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>t});var o=i(6540);const s={},r=o.createContext(s);function l(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);