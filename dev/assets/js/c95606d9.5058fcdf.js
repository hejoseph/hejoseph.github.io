"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[5969],{8052:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"Portfolio/Jsonamic/types/data-structures","title":"Data Structures and Types","description":"Overview","source":"@site/docs/Portfolio/Jsonamic/types/data-structures.md","sourceDirName":"Portfolio/Jsonamic/types","slug":"/Portfolio/Jsonamic/types/data-structures","permalink":"/dev/docs/Portfolio/Jsonamic/types/data-structures","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Dynamic JSON Visualizer - Complete Documentation Summary","permalink":"/dev/docs/Portfolio/Jsonamic/summary"},"next":{"title":"JSON Processing Utilities","permalink":"/dev/docs/Portfolio/Jsonamic/utils/json-processing"}}');var r=i(4848),t=i(8453);const l={},a="Data Structures and Types",o={},d=[{value:"Overview",id:"overview",level:2},{value:"Core Data Types",id:"core-data-types",level:2},{value:"JSONValue",id:"jsonvalue",level:3},{value:"JSONObject",id:"jsonobject",level:3},{value:"User Interface Types",id:"user-interface-types",level:2},{value:"ViewMode",id:"viewmode",level:3},{value:"SortConfig",id:"sortconfig",level:3},{value:"Customization Types",id:"customization-types",level:2},{value:"FlagType",id:"flagtype",level:3},{value:"AppConfig",id:"appconfig",level:3},{value:"Context Type",id:"context-type",level:2},{value:"DataContextType",id:"datacontexttype",level:3},{value:"Type Safety Benefits",id:"type-safety-benefits",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"data-structures-and-types",children:"Data Structures and Types"})}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"The Dynamic JSON Visualizer uses TypeScript to define clear data structures that ensure type safety throughout the application. This document explains the core types that define how data is structured, stored, and manipulated."}),"\n",(0,r.jsx)(n.h2,{id:"core-data-types",children:"Core Data Types"}),"\n",(0,r.jsx)(n.h3,{id:"jsonvalue",children:"JSONValue"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export type JSONValue = \r\n  | string\r\n  | number\r\n  | boolean\r\n  | null\r\n  | JSONValue[]\r\n  | { [key: string]: JSONValue };\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"JSONValue"})," represents any valid JSON data type. This is a ",(0,r.jsx)(n.strong,{children:"union type"})," (indicated by the ",(0,r.jsx)(n.code,{children:"|"})," symbols) that can be:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A string like ",(0,r.jsx)(n.code,{children:'"hello"'})]}),"\n",(0,r.jsxs)(n.li,{children:["A number like ",(0,r.jsx)(n.code,{children:"42"})," or ",(0,r.jsx)(n.code,{children:"3.14"})]}),"\n",(0,r.jsxs)(n.li,{children:["A boolean ",(0,r.jsx)(n.code,{children:"true"})," or ",(0,r.jsx)(n.code,{children:"false"})]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"null"})}),"\n",(0,r.jsxs)(n.li,{children:["An array of other JSONValues like ",(0,r.jsx)(n.code,{children:'[1, "text", true]'})]}),"\n",(0,r.jsxs)(n.li,{children:["An object with string keys and JSONValue values like ",(0,r.jsx)(n.code,{children:'{"name": "John", "age": 30}'})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This recursive definition allows for deeply nested JSON structures of any complexity."}),"\n",(0,r.jsx)(n.h3,{id:"jsonobject",children:"JSONObject"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export type JSONObject = {\r\n  [key: string]: JSONValue;\r\n  __id?: string;\r\n  __flags?: Record<string, boolean>;\r\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"JSONObject"})," extends a basic JSON object with special application-specific fields:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"[key: string]: JSONValue"})})," - Can contain any number of properties with string keys and JSONValue values"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"__id?: string"})})," - Optional unique identifier added by the application (the ",(0,r.jsx)(n.code,{children:"?"})," means optional)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"__flags?: Record<string, boolean>"})})," - Optional object storing flag states as key-value pairs"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\r\n  "name": "John Doe",\r\n  "age": 30,\r\n  "active": true,\r\n  "__id": "abc123",\r\n  "__flags": {\r\n    "important": true,\r\n    "reviewed": false\r\n  }\r\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The double underscore prefix (",(0,r.jsx)(n.code,{children:"__"}),") indicates these are internal application fields, not part of the original JSON data."]}),"\n",(0,r.jsx)(n.h2,{id:"user-interface-types",children:"User Interface Types"}),"\n",(0,r.jsx)(n.h3,{id:"viewmode",children:"ViewMode"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export type ViewMode = 'card' | 'table';\n"})}),"\n",(0,r.jsxs)(n.p,{children:["A simple ",(0,r.jsx)(n.strong,{children:"string literal type"})," that restricts the view mode to exactly two options:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"'card'"})," - Display data as individual cards"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"'table'"})," - Display data in a table format"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"sortconfig",children:"SortConfig"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export type SortConfig = {\r\n  key: string;\r\n  direction: 'asc' | 'desc';\r\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"Defines how data should be sorted:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"key"})}),' - The field name to sort by (e.g., "name", "age")']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"direction"})})," - Either ascending (",(0,r.jsx)(n.code,{children:"'asc'"}),") or descending (",(0,r.jsx)(n.code,{children:"'desc'"}),")"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"customization-types",children:"Customization Types"}),"\n",(0,r.jsx)(n.h3,{id:"flagtype",children:"FlagType"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export type FlagType = {\r\n  id: string;\r\n  name: string;\r\n  color: string;\r\n  icon: string;\r\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"Defines a custom flag that users can create to categorize their data:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"id"})})," - Unique identifier for the flag type"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"name"})}),' - Display name (e.g., "Important", "Needs Review")']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"color"})})," - CSS color value for visual representation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"icon"})})," - Icon identifier from the Lucide icon library"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\r\n  "id": "flag_001",\r\n  "name": "High Priority",\r\n  "color": "#ef4444",\r\n  "icon": "AlertTriangle"\r\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"appconfig",children:"AppConfig"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export type AppConfig = {\r\n  uniqueFields: string[];\r\n  imageField: string | null;\r\n  displayFields: string[];\r\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"Stores user preferences for how data should be displayed:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"uniqueFields"})})," - Array of field names that should be treated as unique identifiers"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"imageField"})})," - Field name containing image URLs, or ",(0,r.jsx)(n.code,{children:"null"})," if none"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"displayFields"})})," - Array of field names to show in the interface"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"context-type",children:"Context Type"}),"\n",(0,r.jsx)(n.h3,{id:"datacontexttype",children:"DataContextType"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export type DataContextType = {\r\n  // Data state\r\n  data: JSONObject[];\r\n  originalData: JSONObject[];\r\n  loading: boolean;\r\n  \r\n  // UI state\r\n  flagTypes: FlagType[];\r\n  viewMode: ViewMode;\r\n  searchTerm: string;\r\n  isRegexSearch: boolean;\r\n  sortConfig: SortConfig | null;\r\n  \r\n  // Configuration\r\n  uniqueFields: string[];\r\n  imageField: string | null;\r\n  displayFields: string[];\r\n  \r\n  // Functions (methods)\r\n  loadJsonData: (jsonData: JSONObject[], fields?: string[]) => Promise<{ newCount: number, updatedCount: number } | undefined>;\r\n  clearAllData: () => Promise<void>;\r\n  deleteObjects: (ids: string[]) => Promise<void>;\r\n  updateFlag: (id: string, flagId: string, value: boolean) => Promise<void>;\r\n  setViewMode: (mode: ViewMode) => void;\r\n  setIsRegexSearch: (isRegex: boolean) => void;\r\n  setSortConfig: (config: SortConfig | null) => void;\r\n  addFlagType: (name: string, color: string, icon: string) => Promise<void>;\r\n  removeFlagType: (id: string) => Promise<void>;\r\n  setUniqueFields: (fields: string[]) => Promise<void>;\r\n  setImageField: (field: string | null) => Promise<void>;\r\n  setDisplayFields: (fields: string[]) => Promise<void>;\r\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This is the ",(0,r.jsx)(n.strong,{children:"interface"})," for the React Context that manages all application state. It's divided into three categories:"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Data State:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Current filtered/sorted data and original unmodified data"}),"\n",(0,r.jsx)(n.li,{children:"Loading status for async operations"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"UI State:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Current view mode, search settings, and sort configuration"}),"\n",(0,r.jsx)(n.li,{children:"Available flag types for categorization"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Configuration:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"User preferences for data display and field handling"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Functions:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Methods for data manipulation (loading, deleting, flagging)"}),"\n",(0,r.jsx)(n.li,{children:"Methods for updating UI state and configuration"}),"\n",(0,r.jsxs)(n.li,{children:["All data operations return ",(0,r.jsx)(n.code,{children:"Promise"})," objects since they involve IndexedDB operations"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"type-safety-benefits",children:"Type Safety Benefits"}),"\n",(0,r.jsx)(n.p,{children:"These TypeScript types provide several advantages:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Compile-time checking"})," - Errors are caught before the code runs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"IntelliSense support"})," - IDEs can provide autocomplete and suggestions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Documentation"})," - Types serve as inline documentation of expected data shapes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Refactoring safety"})," - Changes to types automatically highlight areas that need updates"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The type system ensures that data flows correctly between components and that the application handles JSON data consistently throughout its lifecycle."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>a});var s=i(6540);const r={},t=s.createContext(r);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);