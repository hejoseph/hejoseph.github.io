"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[5597],{2034:e=>{e.exports=JSON.parse('{"tag":{"label":"design-patterns","permalink":"/dev/docs/tags/design-patterns","allTagsPath":"/dev/docs/tags","count":1,"items":[{"id":"Python/Chatbot/chat-with-different-ai-api","title":"Extensible AI Chat Structure","description":"For an extensible chat application where users can choose different AI models (e.g., Gemini, OpenAI, and more in the future), a structured approach using Abstract Base Classes (ABCs) and the Factory Pattern is highly effective. This allows you to define a common interface for all AI providers and easily plug in new ones without modifying existing core logic.","permalink":"/dev/docs/Python/Chatbot/chat-with-different-ai-api"}],"unlisted":false}}')}}]);