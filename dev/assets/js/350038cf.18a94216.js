"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[2801],{5559:e=>{e.exports=JSON.parse('{"tag":{"label":"chat","permalink":"/dev/docs/tags/chat","allTagsPath":"/dev/docs/tags","count":2,"items":[{"id":"Python/Gemini/Api/chat-conversation","title":"Conversational AI","description":"This document outlines how to create and manage conversational sessions using the google.genai library in Python. It covers initializing chat sessions, sending messages, overriding parameters for single requests, and importantly, how to permanently update parameters like temperature and maxoutputtokens while preserving system_instruction and existing history.","permalink":"/dev/docs/Python/Gemini/Api/chat-conversation"},{"id":"Python/Openai/Api/open-api-code-examples","title":"OpenAI Chat Completion","description":"The most common use case for the OpenAI API in Python is generating chat completions. This involves sending a list of messages to a specified model and receiving a generated response. The API supports both synchronous (blocking) and asynchronous (non-blocking) calls, and responses can be received as a single object or streamed as chunks.","permalink":"/dev/docs/Python/Openai/Api/open-api-code-examples"}],"unlisted":false}}')}}]);