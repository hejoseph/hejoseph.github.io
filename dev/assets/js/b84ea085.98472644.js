"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[9226],{451:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/java-garbage-collector-e1e3eaa9e945227a76536b5afa40f26f.png"},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>a});var i=s(6540);const l={},r=i.createContext(l);function t(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),i.createElement(r.Provider,{value:n},e.children)}},9124:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"java/garbage-collector","title":"Garbage Collection","description":"java-garbage-collector.png","source":"@site/docs/java/garbage-collector.md","sourceDirName":"java","slug":"/java/garbage-collector","permalink":"/dev/docs/java/garbage-collector","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"java","permalink":"/dev/docs/tags/java"},{"inline":true,"label":"optimization","permalink":"/dev/docs/tags/optimization"},{"inline":true,"label":"garbage collection","permalink":"/dev/docs/tags/garbage-collection"}],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Garbage Collection","sidebar_position":1,"tags":["java","optimization","garbage collection"]},"sidebar":"tutorialSidebar","previous":{"title":"Java","permalink":"/dev/docs/category/java"},"next":{"title":"Java OOP Principles","permalink":"/dev/docs/java/java-oop-principles"}}');var l=s(4848),r=s(8453);const t={title:"Garbage Collection",sidebar_position:1,tags:["java","optimization","garbage collection"]},a="Garbage Collection (GC) in the JVM \u2013 Optimization and Configuration",d={},c=[{value:"Objective",id:"objective",level:2},{value:"What is Garbage Collection?",id:"what-is-garbage-collection",level:2},{value:"Why It Matters for Performance",id:"why-it-matters-for-performance",level:2},{value:"Types of Garbage Collectors",id:"types-of-garbage-collectors",level:2},{value:"How to Choose the Right GC",id:"how-to-choose-the-right-gc",level:2},{value:"JVM Configuration Examples",id:"jvm-configuration-examples",level:2},{value:"G1 GC (Balanced)",id:"g1-gc-balanced",level:3},{value:"ZGC (Ultra-low latency)",id:"zgc-ultra-low-latency",level:3},{value:"Recommended Monitoring Tools",id:"recommended-monitoring-tools",level:2},{value:"Common Mistakes to Avoid",id:"common-mistakes-to-avoid",level:2},{value:"Business Use Case Example",id:"business-use-case-example",level:2},{value:"Case: Online PDF Generation System",id:"case-online-pdf-generation-system",level:3},{value:"Further Reading",id:"further-reading",level:2},{value:"Summary",id:"summary",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"garbage-collection-gc-in-the-jvm--optimization-and-configuration",children:"Garbage Collection (GC) in the JVM \u2013 Optimization and Configuration"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.img,{alt:"java-garbage-collector.png",src:s(451).A+"",width:"512",height:"360"})}),"\n",(0,l.jsx)(n.h2,{id:"objective",children:"Objective"}),"\n",(0,l.jsx)(n.p,{children:"Reduce GC (Garbage Collection) pauses in Java applications by choosing the right garbage collector (G1, ZGC, Shenandoah) and configuring the JVM to balance latency, throughput, and memory usage."}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"what-is-garbage-collection",children:"What is Garbage Collection?"}),"\n",(0,l.jsx)(n.p,{children:"The Garbage Collector in the JVM:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Identifies unused (unreferenced) objects"}),"\n",(0,l.jsx)(n.li,{children:"Frees up memory they occupy"}),"\n",(0,l.jsxs)(n.li,{children:["Can introduce ",(0,l.jsx)(n.strong,{children:"pause times"})," if misconfigured, affecting performance"]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"why-it-matters-for-performance",children:"Why It Matters for Performance"}),"\n",(0,l.jsx)(n.p,{children:"In systems such as:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Real-time applications (games, finance)"}),"\n",(0,l.jsx)(n.li,{children:"High-throughput systems (web apps, microservices)"}),"\n",(0,l.jsx)(n.li,{children:"Low-latency systems (Kafka, databases, event processing)"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"A poorly configured GC can:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:'Trigger long "stop-the-world" pauses'}),"\n",(0,l.jsx)(n.li,{children:"Cause CPU spikes"}),"\n",(0,l.jsx)(n.li,{children:"Degrade user experience and system responsiveness"}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"types-of-garbage-collectors",children:"Types of Garbage Collectors"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Collector"}),(0,l.jsx)(n.th,{children:"Since"}),(0,l.jsx)(n.th,{children:"Advantages"}),(0,l.jsx)(n.th,{children:"Disadvantages"}),(0,l.jsx)(n.th,{children:"When to Use"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Serial GC"}),(0,l.jsx)(n.td,{children:"Java 1.2"}),(0,l.jsx)(n.td,{children:"Simple"}),(0,l.jsx)(n.td,{children:"Long pauses"}),(0,l.jsx)(n.td,{children:"Small apps, development"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Parallel GC"}),(0,l.jsx)(n.td,{children:"Java 1.4"}),(0,l.jsx)(n.td,{children:"High throughput"}),(0,l.jsx)(n.td,{children:"Long pauses"}),(0,l.jsx)(n.td,{children:"Batch jobs, throughput-focused apps"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"G1 GC"}),(0,l.jsx)(n.td,{children:"Java 9"}),(0,l.jsx)(n.td,{children:"Predictable pauses, balanced"}),(0,l.jsx)(n.td,{children:"Not ultra-low latency"}),(0,l.jsx)(n.td,{children:"Web servers, general purpose"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"ZGC"}),(0,l.jsx)(n.td,{children:"Java 11+"}),(0,l.jsxs)(n.td,{children:["Ultra-low latency (",(0,l.jsx)(n.code,{children:"<10 ms"}),")"]}),(0,l.jsx)(n.td,{children:"Less tuning flexibility"}),(0,l.jsx)(n.td,{children:"Low-latency systems (finance, APIs)"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Shenandoah"}),(0,l.jsx)(n.td,{children:"Java 12+"}),(0,l.jsx)(n.td,{children:"Similar to ZGC, low latency"}),(0,l.jsx)(n.td,{children:"Less portable (Red Hat)"}),(0,l.jsx)(n.td,{children:"Real-time, low-latency apps"})]})]})]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"how-to-choose-the-right-gc",children:"How to Choose the Right GC"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Goal"}),(0,l.jsx)(n.th,{children:"Recommended Collector"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Balanced performance"}),(0,l.jsx)(n.td,{children:"G1 GC"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsxs)(n.td,{children:["Ultra-low latency (",(0,l.jsx)(n.code,{children:"<10ms"}),")"]}),(0,l.jsx)(n.td,{children:"ZGC or Shenandoah"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Max throughput (batch)"}),(0,l.jsx)(n.td,{children:"Parallel GC"})]})]})]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"jvm-configuration-examples",children:"JVM Configuration Examples"}),"\n",(0,l.jsx)(n.h3,{id:"g1-gc-balanced",children:"G1 GC (Balanced)"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"-XX:+UseG1GC\r\n-XX:MaxGCPauseMillis=200\r\n-XX:InitiatingHeapOccupancyPercent=45\r\n-XX:+ParallelRefProcEnabled\r\n-Xms2g -Xmx4g\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"MaxGCPauseMillis"}),": Target max pause duration"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"InitiatingHeapOccupancyPercent"}),": Threshold to trigger GC"]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"zgc-ultra-low-latency",children:"ZGC (Ultra-low latency)"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"-XX:+UseZGC\r\n-Xmx4g -Xms4g\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Suitable for very low-latency needs"}),"\n",(0,l.jsx)(n.li,{children:"No tuning required"}),"\n",(0,l.jsx)(n.li,{children:"Requires Java 11+"}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"recommended-monitoring-tools",children:"Recommended Monitoring Tools"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Tool"}),(0,l.jsx)(n.th,{children:"Purpose"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"JVisualVM / JConsole"}),(0,l.jsx)(n.td,{children:"View GC events and memory usage live"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsxs)(n.td,{children:["GC Logs (",(0,l.jsx)(n.code,{children:"-Xlog:gc*"}),")"]}),(0,l.jsx)(n.td,{children:"Detailed analysis of GC behavior"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Java Flight Recorder"}),(0,l.jsx)(n.td,{children:"Low-overhead JVM profiling"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Prometheus + Grafana"}),(0,l.jsx)(n.td,{children:"Real-time JVM metrics visualization"})]})]})]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"common-mistakes-to-avoid",children:"Common Mistakes to Avoid"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Mistake"}),(0,l.jsx)(n.th,{children:"Consequence"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Ignoring GC logs"}),(0,l.jsx)(n.td,{children:"Cannot analyze or debug GC behavior"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Using wrong GC for the workload"}),(0,l.jsx)(n.td,{children:"Unnecessary long pauses"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Incorrect heap sizing"}),(0,l.jsx)(n.td,{children:"Too small \u2192 frequent GC; too big \u2192 longer scans"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Excessive object allocation"}),(0,l.jsx)(n.td,{children:"GC overload (especially young gen)"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsxs)(n.td,{children:["Using ",(0,l.jsx)(n.code,{children:"finalize()"})]}),(0,l.jsx)(n.td,{children:"Slows down GC, discouraged in modern Java"})]})]})]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"business-use-case-example",children:"Business Use Case Example"}),"\n",(0,l.jsx)(n.h3,{id:"case-online-pdf-generation-system",children:"Case: Online PDF Generation System"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Problem: Generates many temporary objects (~100 MB per document)"}),"\n",(0,l.jsx)(n.li,{children:"Effect: Frequent GC, noticeable user delays"}),"\n",(0,l.jsxs)(n.li,{children:["Solution:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Switched to G1 GC"}),"\n",(0,l.jsxs)(n.li,{children:["Configured ",(0,l.jsx)(n.code,{children:"-XX:MaxGCPauseMillis=150"})]}),"\n",(0,l.jsx)(n.li,{children:"Reused memory buffers to avoid GC pressure"}),"\n",(0,l.jsx)(n.li,{children:"Set up Prometheus + Grafana for JVM monitoring"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://openjdk.org/jeps/333",children:"JEP 333: ZGC"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://openjdk.org/jeps/318",children:"JEP 318: Epsilon GC (no-op GC for testing)"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/index.html",children:"Oracle JVM GC Tuning Guide"})}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"GC is critical to Java application performance and reliability"}),"\n",(0,l.jsx)(n.li,{children:"Choose the collector that matches your latency or throughput needs"}),"\n",(0,l.jsx)(n.li,{children:"G1 is a solid general-purpose collector"}),"\n",(0,l.jsx)(n.li,{children:"ZGC and Shenandoah are best for latency-sensitive systems"}),"\n",(0,l.jsx)(n.li,{children:"Always monitor GC behavior in production and test under load"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(o,{...e})}):o(e)}}}]);