"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[2461],{6438:e=>{e.exports=JSON.parse('{"tag":{"label":"inheritance","permalink":"/dev/docs/tags/inheritance","allTagsPath":"/dev/docs/tags","count":1,"items":[{"id":"java/Core/OOP/composition-inheritance","title":"Composition Over Inheritance","description":"\\"Composition over Inheritance\\" (also known as \\"favor composition over inheritance\\") is a design principle in object-oriented programming that suggests that classes should achieve new functionality by composing objects of existing classes (i.e., by containing instances of other classes) rather than by inheriting from them. This principle promotes greater flexibility, reduced coupling, and better code reusability.","permalink":"/dev/docs/java/Core/OOP/composition-inheritance"}],"unlisted":false}}')}}]);