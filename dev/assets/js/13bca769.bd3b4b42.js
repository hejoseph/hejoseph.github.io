"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[5597],{2034:e=>{e.exports=JSON.parse('{"tag":{"label":"design patterns","permalink":"/dev/docs/tags/design-patterns","allTagsPath":"/dev/docs/tags","count":3,"items":[{"id":"java/Core/OOP/composition-inheritance","title":"Composition Over Inheritance","description":"\\"Composition over Inheritance\\" (also known as \\"favor composition over inheritance\\") is a design principle in object-oriented programming that suggests that classes should achieve new functionality by composing objects of existing classes (i.e., by containing instances of other classes) rather than by inheriting from them. This principle promotes greater flexibility, reduced coupling, and better code reusability.","permalink":"/dev/docs/java/Core/OOP/composition-inheritance"},{"id":"Python/Chatbot/chat-with-different-ai-api","title":"Extensible AI Chat Structure","description":"For an extensible chat application where users can choose different AI models (e.g., Gemini, OpenAI, and more in the future), a structured approach using Abstract Base Classes (ABCs) and the Factory Pattern is highly effective. This allows you to define a common interface for all AI providers and easily plug in new ones without modifying existing core logic.","permalink":"/dev/docs/Python/Chatbot/chat-with-different-ai-api"},{"id":"java/Core/OOP/solid-principles","title":"SOLID Principles","description":"The SOLID principles are a set of five design principles in object-oriented programming intended to make software designs more understandable, flexible, and maintainable. They were promoted by Robert C. Martin (Uncle Bob) and are widely considered best practices for writing clean, robust, and scalable code.","permalink":"/dev/docs/java/Core/OOP/solid-principles"}],"unlisted":false}}')}}]);