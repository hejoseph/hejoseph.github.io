"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[7987],{1990:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Portfolio/Jsonamic/contexts/state-management","title":"State Management System","description":"Overview","source":"@site/docs/Portfolio/Jsonamic/contexts/state-management.md","sourceDirName":"Portfolio/Jsonamic/contexts","slug":"/Portfolio/Jsonamic/contexts/state-management","permalink":"/dev/docs/Portfolio/Jsonamic/contexts/state-management","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"User Interface Components","permalink":"/dev/docs/Portfolio/Jsonamic/components/user-interface"},"next":{"title":"IndexedDB Persistence Layer","permalink":"/dev/docs/Portfolio/Jsonamic/database/indexeddb-persistence"}}');var a=t(4848),r=t(8453);const i={},l="State Management System",o={},c=[{value:"Overview",id:"overview",level:2},{value:"Architecture",id:"architecture",level:2},{value:"Context Creation (<code>context.ts</code>)",id:"context-creation-contextts",level:2},{value:"Custom Hook (<code>useData.ts</code>)",id:"custom-hook-usedatats",level:2},{value:"State Provider (<code>DataContext.tsx</code>)",id:"state-provider-datacontexttsx",level:2},{value:"State Variables",id:"state-variables",level:3},{value:"Initialization Effect",id:"initialization-effect",level:3},{value:"Data Filtering and Sorting Effect",id:"data-filtering-and-sorting-effect",level:3},{value:"State Management Functions",id:"state-management-functions",level:2},{value:"Data Operations",id:"data-operations",level:3},{value:"Flag Management",id:"flag-management",level:3},{value:"Key Design Patterns",id:"key-design-patterns",level:2},{value:"Optimistic Updates vs Database Sync",id:"optimistic-updates-vs-database-sync",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Loading State Management",id:"loading-state-management",level:3},{value:"Usage in Components",id:"usage-in-components",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"state-management-system",children:"State Management System"})}),"\n",(0,a.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsx)(n.p,{children:"The Dynamic JSON Visualizer uses React Context to manage application state centrally. This system provides a single source of truth for all data, UI settings, and user preferences, making them accessible to any component in the application without prop drilling."}),"\n",(0,a.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,a.jsx)(n.p,{children:"The state management consists of three key files:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"context.ts"})})," - Creates the React Context"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"DataContext.tsx"})})," - Implements the Context Provider with state logic"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"useData.ts"})})," - Custom hook for consuming the context"]}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"context-creation-contextts",children:["Context Creation (",(0,a.jsx)(n.code,{children:"context.ts"}),")"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import { createContext } from 'react';\r\nimport type { DataContextType } from '../types';\r\n\r\nexport const DataContext = createContext<DataContextType | undefined>(undefined);\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This creates a React Context with TypeScript typing. The context can either contain a ",(0,a.jsx)(n.code,{children:"DataContextType"})," object or be ",(0,a.jsx)(n.code,{children:"undefined"})," (when used outside a provider)."]}),"\n",(0,a.jsxs)(n.h2,{id:"custom-hook-usedatats",children:["Custom Hook (",(0,a.jsx)(n.code,{children:"useData.ts"}),")"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"export const useData = (): DataContextType => {\r\n  const context = useContext(DataContext);\r\n  if (context === undefined) {\r\n    throw new Error('useData must be used within a DataProvider');\r\n  }\r\n  return context;\r\n};\n"})}),"\n",(0,a.jsx)(n.p,{children:"This custom hook provides a safe way to access the context:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Error checking"}),": Throws an error if used outside the DataProvider"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Type safety"}),": Returns the properly typed context value"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Convenience"}),": Components can simply call ",(0,a.jsx)(n.code,{children:"useData()"})," instead of ",(0,a.jsx)(n.code,{children:"useContext(DataContext)"})]}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"state-provider-datacontexttsx",children:["State Provider (",(0,a.jsx)(n.code,{children:"DataContext.tsx"}),")"]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"DataProvider"})," component manages all application state using React hooks and provides it to child components."]}),"\n",(0,a.jsx)(n.h3,{id:"state-variables",children:"State Variables"}),"\n",(0,a.jsxs)(n.p,{children:["The provider maintains several pieces of state using ",(0,a.jsx)(n.code,{children:"useState"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const [originalData, setOriginalData] = useState<JSONObject[]>([]);\r\nconst [data, setData] = useState<JSONObject[]>([]);\r\nconst [loading, setLoading] = useState(true);\r\nconst [flagTypes, setFlagTypes] = useState<FlagType[]>([]);\r\nconst [viewMode, setViewMode] = useState<ViewMode>('card');\r\nconst [searchTerm, setSearchTerm] = useState('');\r\nconst [isRegexSearch, setIsRegexSearch] = useState(false);\r\nconst [sortConfig, setSortConfig] = useState<SortConfig | null>(null);\r\nconst [uniqueFields, setUniqueFields] = useState<string[]>([]);\r\nconst [imageField, setImageField] = useState<string | null>(null);\r\nconst [displayFields, setDisplayFields] = useState<string[]>([]);\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Data State:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"originalData"})," - The unfiltered, unsorted source data from the database"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"data"})," - The currently displayed data (filtered and sorted)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"loading"})," - Boolean indicating if async operations are in progress"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"UI State:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"viewMode"})," - Current view ('card' or 'table')"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"searchTerm"})," - Current search query"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"isRegexSearch"})," - Whether to treat search as regular expression"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"sortConfig"})," - Current sort field and direction"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Configuration State:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"flagTypes"})," - Available flag types for categorization"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"uniqueFields"})," - Fields that should be treated as unique identifiers"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"imageField"})," - Field containing image URLs"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"displayFields"})," - Fields to show in the interface"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"initialization-effect",children:"Initialization Effect"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"useEffect(() => {\r\n  const init = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await initDB();\r\n      const storedObjects = await getAllJsonObjects();\r\n      const storedFlagTypes = await getAllFlagTypes();\r\n      const config = await getAppConfig();\r\n      \r\n      setOriginalData(storedObjects);\r\n      setData(storedObjects);\r\n      setFlagTypes(storedFlagTypes);\r\n      setUniqueFields(config.uniqueFields);\r\n      setImageField(config.imageField);\r\n      setDisplayFields(config.displayFields);\r\n    } catch (error) {\r\n      console.error('Failed to initialize the database:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  init();\r\n}, []);\n"})}),"\n",(0,a.jsx)(n.p,{children:"This effect runs once when the component mounts and:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Initializes IndexedDB"})," - Sets up the local database"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Loads stored data"})," - Retrieves previously saved JSON objects"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Loads configuration"})," - Restores user preferences and flag types"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Updates state"})," - Populates all state variables with loaded data"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Handles errors"})," - Logs any initialization failures"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Manages loading"})," - Sets loading to false when complete"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"data-filtering-and-sorting-effect",children:"Data Filtering and Sorting Effect"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"useEffect(() => {\r\n  let filteredData = originalData;\r\n  \r\n  if (searchTerm) {\r\n    filteredData = filterData(filteredData, searchTerm, isRegexSearch);\r\n  }\r\n  \r\n  if (sortConfig) {\r\n    filteredData = sortData(filteredData, sortConfig.key, sortConfig.direction);\r\n  }\r\n  \r\n  setData(filteredData);\r\n}, [originalData, searchTerm, isRegexSearch, sortConfig]);\n"})}),"\n",(0,a.jsx)(n.p,{children:"This effect automatically updates the displayed data whenever:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"The original data changes (new uploads, deletions)"}),"\n",(0,a.jsx)(n.li,{children:"The search term changes"}),"\n",(0,a.jsx)(n.li,{children:"The search mode changes (text vs regex)"}),"\n",(0,a.jsx)(n.li,{children:"The sort configuration changes"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["The effect applies transformations in order: ",(0,a.jsx)(n.strong,{children:"filter first, then sort"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"state-management-functions",children:"State Management Functions"}),"\n",(0,a.jsx)(n.p,{children:"The provider implements several functions for data manipulation:"}),"\n",(0,a.jsx)(n.h3,{id:"data-operations",children:"Data Operations"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"loadJsonData"})})," - Uploads new JSON data:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const loadJsonData = async (jsonData: JSONObject[], fields?: string[]) => {\r\n  setLoading(true);\r\n  try {\r\n    const result = await storeJsonObjects(jsonData, fields ?? uniqueFields);\r\n    const updatedData = await getAllJsonObjects();\r\n    setOriginalData(updatedData);\r\n    return result;\r\n  } finally {\r\n    setLoading(false);\r\n  }\r\n};\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"deleteObjects"})})," - Removes selected objects:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const deleteObjects = async (ids: string[]) => {\r\n  setLoading(true);\r\n  try {\r\n    await deleteObjectsFromDb(ids);\r\n    const updatedData = await getAllJsonObjects();\r\n    setOriginalData(updatedData);\r\n    toast.success(`Successfully deleted ${ids.length} objects`);\r\n  } finally {\r\n    setLoading(false);\r\n  }\r\n};\n"})}),"\n",(0,a.jsx)(n.h3,{id:"flag-management",children:"Flag Management"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"updateFlag"})})," - Toggles flags on individual objects:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const updateFlag = async (id: string, flagId: string, value: boolean) => {\r\n  setLoading(true);\r\n  try {\r\n    await updateObjectFlag(id, flagId, value);\r\n    const updatedData = await getAllJsonObjects();\r\n    setOriginalData(updatedData);\r\n  } finally {\r\n    setLoading(false);\r\n  }\r\n};\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"addFlagType"})})," - Creates new flag types:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const addFlagType = async (name: string, color: string, icon: string) => {\r\n  try {\r\n    const newFlag = await addFlagTypeToDb(name, color, icon);\r\n    setFlagTypes(prev => [...prev, newFlag]);\r\n  } catch (error) {\r\n    console.error('Failed to add flag type:', error);\r\n  }\r\n};\n"})}),"\n",(0,a.jsx)(n.h2,{id:"key-design-patterns",children:"Key Design Patterns"}),"\n",(0,a.jsx)(n.h3,{id:"optimistic-updates-vs-database-sync",children:"Optimistic Updates vs Database Sync"}),"\n",(0,a.jsx)(n.p,{children:"The state management uses two different update patterns:"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Database Sync Pattern"})," (for data operations):"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"await updateObjectFlag(id, flagId, value);\r\nconst updatedData = await getAllJsonObjects();\r\nsetOriginalData(updatedData);\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Updates the database first"}),"\n",(0,a.jsx)(n.li,{children:"Reloads all data from database"}),"\n",(0,a.jsx)(n.li,{children:"Ensures consistency but slower"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Optimistic Update Pattern"})," (for flag types):"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const newFlag = await addFlagTypeToDb(name, color, icon);\r\nsetFlagTypes(prev => [...prev, newFlag]);\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Updates local state immediately"}),"\n",(0,a.jsx)(n.li,{children:"Faster user experience"}),"\n",(0,a.jsx)(n.li,{children:"Used for operations less likely to fail"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,a.jsx)(n.p,{children:"All async operations include try-catch blocks:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"try {\r\n  // Database operation\r\n} catch (error) {\r\n  console.error('Operation failed:', error);\r\n  toast.error('User-friendly error message');\r\n} finally {\r\n  setLoading(false);\r\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"loading-state-management",children:"Loading State Management"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"loading"})," state is consistently managed:"]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["Set to ",(0,a.jsx)(n.code,{children:"true"})," before async operations"]}),"\n",(0,a.jsxs)(n.li,{children:["Set to ",(0,a.jsx)(n.code,{children:"false"})," in ",(0,a.jsx)(n.code,{children:"finally"})," blocks (ensures it's always reset)"]}),"\n",(0,a.jsx)(n.li,{children:"Used by UI components to show loading indicators"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"usage-in-components",children:"Usage in Components"}),"\n",(0,a.jsx)(n.p,{children:"Components access the state using the custom hook:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import { useData } from '../contexts/useData';\r\n\r\nconst MyComponent = () => {\r\n  const { data, loading, searchTerm, setSearchTerm } = useData();\r\n  \r\n  if (loading) return <div>Loading...</div>;\r\n  \r\n  return (\r\n    <div>\r\n      <input \r\n        value={searchTerm} \r\n        onChange={(e) => setSearchTerm(e.target.value)} \r\n      />\r\n      {data.map(item => <div key={item.__id}>{/* render item */}</div>)}\r\n    </div>\r\n  );\r\n};\n"})}),"\n",(0,a.jsx)(n.p,{children:"This pattern provides:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Type safety"})," - All properties are properly typed"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Reactivity"})," - Components re-render when state changes"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Centralization"})," - All state logic is in one place"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Testability"})," - State logic can be tested independently"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var s=t(6540);const a={},r=s.createContext(a);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);