"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[7874],{7587:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Git/git-tags","title":"git-tags","description":"What are Git Tags?","source":"@site/docs/Git/git-tags.md","sourceDirName":"Git","slug":"/Git/git-tags","permalink":"/dev/docs/Git/git-tags","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Git Flow Usage","permalink":"/dev/docs/Git/gitflow-real-usecase"},"next":{"title":"GitHub rate limit","permalink":"/dev/docs/Git/github-ai"}}');var a=t(4848),s=t(8453);const r={},o=void 0,l={},c=[{value:"What are Git Tags?",id:"what-are-git-tags",level:2},{value:"Why Do We Use Git Tags?",id:"why-do-we-use-git-tags",level:2},{value:"When Do We Use Git Tags?",id:"when-do-we-use-git-tags",level:2},{value:"How Do We Use Git Tags?",id:"how-do-we-use-git-tags",level:2},{value:"1. Listing Tags",id:"1-listing-tags",level:3},{value:"2. Creating Tags",id:"2-creating-tags",level:3},{value:"a. Creating a Lightweight Tag (Current Commit):",id:"a-creating-a-lightweight-tag-current-commit",level:4},{value:"b. Creating an Annotated Tag (Current Commit - <strong>Recommended</strong>):",id:"b-creating-an-annotated-tag-current-commit---recommended",level:4},{value:"c. Creating an Annotated Tag for a Past Commit:",id:"c-creating-an-annotated-tag-for-a-past-commit",level:4},{value:"d. Creating a GPG-Signed Tag (Annotated and Secure):",id:"d-creating-a-gpg-signed-tag-annotated-and-secure",level:4},{value:"3. Viewing Tag Details",id:"3-viewing-tag-details",level:3},{value:"4. Pushing Tags to a Remote Repository",id:"4-pushing-tags-to-a-remote-repository",level:3},{value:"a. Push a single tag:",id:"a-push-a-single-tag",level:4},{value:"b. Push all local tags:",id:"b-push-all-local-tags",level:4},{value:"5. Checking Out a Tag",id:"5-checking-out-a-tag",level:3},{value:"6. Deleting Tags",id:"6-deleting-tags",level:3},{value:"a. Deleting a Local Tag:",id:"a-deleting-a-local-tag",level:4},{value:"b. Deleting a Remote Tag:",id:"b-deleting-a-remote-tag",level:4},{value:"Best Practices for Git Tags",id:"best-practices-for-git-tags",level:2}];function d(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"what-are-git-tags",children:"What are Git Tags?"}),"\n",(0,a.jsxs)(n.p,{children:["At its core, a Git tag is ",(0,a.jsx)(n.strong,{children:"a permanent, unchangeable pointer to a specific commit in your repository's history."})," Think of it like a ",(0,a.jsx)(n.strong,{children:"bookmark"})," or a ",(0,a.jsx)(n.strong,{children:"milestone marker"}),". Unlike branches, which are designed to move and evolve, tags are static. Once created, a tag always refers to the exact same commit unless you explicitly delete and re-create it."]}),"\n",(0,a.jsx)(n.p,{children:"There are two main types of tags:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Lightweight Tags:"})," These are just a pointer to a commit. They're like a branch that never moves. They simply store the commit SHA-1."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Annotated Tags:"})," These are more robust. They are full Git objects (like commits or blobs) and contain a tagger name, email, date, and a tagging message. They can also be GPG-signed for verification. Annotated tags are generally preferred for marking releases."]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"why-do-we-use-git-tags",children:"Why Do We Use Git Tags?"}),"\n",(0,a.jsxs)(n.p,{children:['The "why" boils down to ',(0,a.jsx)(n.strong,{children:"immutability, reliability, and clear communication"})," for significant points in your project's history."]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Permanent Release Markers:"})," This is by far the most common and important use case. When you release a new version of your software (e.g., ",(0,a.jsx)(n.code,{children:"v1.0.0"}),", ",(0,a.jsx)(n.code,{children:"v2.1-beta"}),"), you want a permanent reference to the exact code that was shipped."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Reliability:"})," You can always go back and precisely identify the code that corresponds to a given release version."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Traceability:"})," If a bug is reported in ",(0,a.jsx)(n.code,{children:"v1.2.3"}),", you can ",(0,a.jsx)(n.code,{children:"git checkout v1.2.3"})," and inspect the code, compile it, or even hotfix it from that exact state."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Consistency:"})," Everyone on the team (and automated systems) refers to the same, unambiguous point in history."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Semantic Versioning (SemVer):"})," Tags perfectly align with SemVer (",(0,a.jsx)(n.code,{children:"MAJOR.MINOR.PATCH"}),"). A tag like ",(0,a.jsx)(n.code,{children:"v3.0.0"})," clearly communicates a major, breaking change, while ",(0,a.jsx)(n.code,{children:"v3.0.1"})," indicates a patch fix."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"CI/CD Integration:"})," Many Continuous Integration/Continuous Deployment (CI/CD) pipelines can be configured to trigger specific actions (like building a release artifact, deploying to production, or archiving) when a new tag is pushed to the remote repository."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Auditing and Compliance:"})," For regulated industries or internal audits, tags provide a crucial record of code states at specific points in time, making it easier to demonstrate compliance."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Milestone Markers:"}),' While releases are the primary use, you might use tags to mark other significant project milestones, like "FeatureX_Complete" or "Pre-QA-Build." (Though releases are generally more formal).']}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"when-do-we-use-git-tags",children:"When Do We Use Git Tags?"}),"\n",(0,a.jsx)(n.p,{children:"The timing for using tags is usually tied to significant events in your project's lifecycle:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Upon Software Release:"})," This is the ",(0,a.jsx)(n.em,{children:"most crucial"})," time. After you've merged your release branch back into your main development branch (e.g., ",(0,a.jsx)(n.code,{children:"main"})," or ",(0,a.jsx)(n.code,{children:"master"}),") and confirmed everything is stable and ready, you create a tag for that specific commit."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Example:"})," After merging your ",(0,a.jsx)(n.code,{children:"release/v1.0"})," branch into ",(0,a.jsx)(n.code,{children:"main"}),", you'd tag the ",(0,a.jsx)(n.code,{children:"main"})," HEAD with ",(0,a.jsx)(n.code,{children:"v1.0.0"}),"."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"After a Critical Hotfix:"})," If you've pushed a hotfix directly to production (or a critical environment), you'd typically tag that specific hotfix commit to denote the exact version of the fix."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Example:"})," A bug in ",(0,a.jsx)(n.code,{children:"v1.0.0"})," leads to a quick fix. You tag the fix commit as ",(0,a.jsx)(n.code,{children:"v1.0.1"}),"."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Beta or Release Candidates:"})," You might tag pre-release versions (e.g., ",(0,a.jsx)(n.code,{children:"v2.0.0-beta.1"}),", ",(0,a.jsx)(n.code,{children:"v2.0.0-rc.1"}),") to identify specific builds sent out for testing before the final stable release."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Before Major Refactoring/Breaking Changes:"}),' Sometimes, it\'s useful to tag the last stable version before embarking on a huge, potentially disruptive refactor. This gives you an easy rollback point to the "old way."']}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"For Internal Snapshots (Less Common):"})," While branches are better for ongoing development, a tag can occasionally be used to mark a specific, important internal snapshot of the code that you want to preserve ",(0,a.jsx)(n.em,{children:"immutably"}),"."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"how-do-we-use-git-tags",children:"How Do We Use Git Tags?"}),"\n",(0,a.jsx)(n.p,{children:"Here are the essential Git commands for working with tags:"}),"\n",(0,a.jsx)(n.h3,{id:"1-listing-tags",children:"1. Listing Tags"}),"\n",(0,a.jsx)(n.p,{children:"To see all the tags in your repository:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"git tag\n"})}),"\n",(0,a.jsx)(n.p,{children:"To search for tags matching a pattern:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'git tag -l "v1.*"\n'})}),"\n",(0,a.jsx)(n.h3,{id:"2-creating-tags",children:"2. Creating Tags"}),"\n",(0,a.jsxs)(n.p,{children:["You can tag the current commit (HEAD) or a specific past commit. Always prefer ",(0,a.jsx)(n.strong,{children:"annotated tags"})," for releases."]}),"\n",(0,a.jsx)(n.h4,{id:"a-creating-a-lightweight-tag-current-commit",children:"a. Creating a Lightweight Tag (Current Commit):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"git tag v1.0-lw\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"(Only use this for temporary, local bookmarks, not for official releases.)"})}),"\n",(0,a.jsxs)(n.h4,{id:"b-creating-an-annotated-tag-current-commit---recommended",children:["b. Creating an Annotated Tag (Current Commit - ",(0,a.jsx)(n.strong,{children:"Recommended"}),"):"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'git tag -a v1.0.0 -m "Release version 1.0.0"\n'})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"-a"})," specifies an annotated tag."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"-m"})," provides the tag message. If you omit ",(0,a.jsx)(n.code,{children:"-m"}),", Git will open your editor for the message."]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"c-creating-an-annotated-tag-for-a-past-commit",children:"c. Creating an Annotated Tag for a Past Commit:"}),"\n",(0,a.jsxs)(n.p,{children:["You need the SHA-1 of the commit you want to tag. You can find this using ",(0,a.jsx)(n.code,{children:"git log --oneline"})," or ",(0,a.jsx)(n.code,{children:"git log"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'git log --oneline\r\n# Example output:\r\n# a1b2c3d (HEAD -> main) Latest feature work\r\n# e4f5g6h Release version 0.9.0\r\n# ...\r\n\r\ngit tag -a v0.9.0 -m "Initial public release" e4f5g6h\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsxs)(n.em,{children:["(Replace ",(0,a.jsx)(n.code,{children:"e4f5g6h"})," with the actual commit SHA-1.)"]})}),"\n",(0,a.jsx)(n.h4,{id:"d-creating-a-gpg-signed-tag-annotated-and-secure",children:"d. Creating a GPG-Signed Tag (Annotated and Secure):"}),"\n",(0,a.jsx)(n.p,{children:"If you have GPG set up, you can sign your tags for added security and verification."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'git tag -s v1.0.0 -m "Signed release of version 1.0.0"\n'})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"-s"})," creates a GPG-signed annotated tag."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"3-viewing-tag-details",children:"3. Viewing Tag Details"}),"\n",(0,a.jsx)(n.p,{children:"To see the details of an annotated tag (including its message, tagger, and the commit it points to):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"git show v1.0.0\n"})}),"\n",(0,a.jsx)(n.h3,{id:"4-pushing-tags-to-a-remote-repository",children:"4. Pushing Tags to a Remote Repository"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Important:"})," Tags are ",(0,a.jsx)(n.em,{children:"not"})," pushed to the remote repository by default when you ",(0,a.jsx)(n.code,{children:"git push"}),". You must explicitly push them."]}),"\n",(0,a.jsx)(n.h4,{id:"a-push-a-single-tag",children:"a. Push a single tag:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"git push origin v1.0.0\n"})}),"\n",(0,a.jsx)(n.h4,{id:"b-push-all-local-tags",children:"b. Push all local tags:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"git push origin --tags\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"(Use this if you've created multiple tags locally and want to push them all at once.)"})}),"\n",(0,a.jsx)(n.h3,{id:"5-checking-out-a-tag",children:"5. Checking Out a Tag"}),"\n",(0,a.jsxs)(n.p,{children:["When you check out a tag, you enter a ",(0,a.jsx)(n.strong,{children:"detached HEAD"})," state. This means you are directly on a commit, not on a branch. You can view the files, compile the code, etc., but any new commits you make will not be part of any branch unless you explicitly create one."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"git checkout v1.0.0\n"})}),"\n",(0,a.jsx)(n.p,{children:"To start development from a tagged version (e.g., to create a hotfix branch):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"git checkout -b hotfix/v1.0.1 v1.0.0\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This creates a new branch named ",(0,a.jsx)(n.code,{children:"hotfix/v1.0.1"})," starting from the commit that ",(0,a.jsx)(n.code,{children:"v1.0.0"})," points to, and then switches you to that new branch."]}),"\n",(0,a.jsx)(n.h3,{id:"6-deleting-tags",children:"6. Deleting Tags"}),"\n",(0,a.jsx)(n.h4,{id:"a-deleting-a-local-tag",children:"a. Deleting a Local Tag:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"git tag -d v1.0.0\n"})}),"\n",(0,a.jsx)(n.h4,{id:"b-deleting-a-remote-tag",children:"b. Deleting a Remote Tag:"}),"\n",(0,a.jsx)(n.p,{children:"After deleting the local tag, you need to push the deletion to the remote repository."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"git push origin :refs/tags/v1.0.0\r\n# OR (simpler syntax)\r\ngit push origin --delete v1.0.0\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"best-practices-for-git-tags",children:"Best Practices for Git Tags"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Always use Annotated Tags for Releases:"})," They provide valuable metadata and immutability guarantees."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Follow Semantic Versioning:"})," Use tags like ",(0,a.jsx)(n.code,{children:"vMAJOR.MINOR.PATCH"})," (e.g., ",(0,a.jsx)(n.code,{children:"v1.2.3"}),"). The ",(0,a.jsx)(n.code,{children:"v"})," prefix is a common convention, but not strictly required by Git."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Push Tags Promptly:"})," After creating a release tag locally, push it to your remote repository immediately so others can see and use it."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Do Not Move or Re-tag:"})," Once a tag (especially a release tag) is created and pushed, it should be considered sacred. Moving or re-tagging it can cause confusion and break systems that rely on its stability. If you need to make a correction, create a new tag with an incremented version number (e.g., ",(0,a.jsx)(n.code,{children:"v1.0.1"})," instead of ",(0,a.jsx)(n.code,{children:"v1.0.0"})," again)."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Keep Tag Messages Clear:"})," For annotated tags, use descriptive messages that explain the purpose of the tag."]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.p,{children:"By understanding and utilizing Git tags effectively, you bring a higher level of discipline, clarity, and reliability to your software development lifecycle. They are an indispensable tool for managing releases and navigating your project's history."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var i=t(6540);const a={},s=i.createContext(a);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);