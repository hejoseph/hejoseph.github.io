"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[3308],{1931:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"Portfolio/NoteApp/Deployment/containerization","title":"Containerization and Deployment","description":"Overview","source":"@site/docs/Portfolio/NoteApp/Deployment/containerization.md","sourceDirName":"Portfolio/NoteApp/Deployment","slug":"/Portfolio/NoteApp/Deployment/containerization","permalink":"/dev/docs/Portfolio/NoteApp/Deployment/containerization","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Database Models","permalink":"/dev/docs/Portfolio/NoteApp/Database/models"},"next":{"title":"Authentication Pages","permalink":"/dev/docs/Portfolio/NoteApp/Frontend/authentication-pages"}}');var s=i(4848),o=i(8453);const l={},t="Containerization and Deployment",c={},d=[{value:"Overview",id:"overview",level:2},{value:"What is Containerization?",id:"what-is-containerization",level:2},{value:"Docker Architecture",id:"docker-architecture",level:2},{value:"Docker Compose Configuration",id:"docker-compose-configuration",level:2},{value:"Configuration Breakdown",id:"configuration-breakdown",level:3},{value:"Version Declaration",id:"version-declaration",level:4},{value:"Frontend Service",id:"frontend-service",level:4},{value:"Database Service",id:"database-service",level:4},{value:"Backend Service",id:"backend-service",level:4},{value:"Backend Dockerfile",id:"backend-dockerfile",level:2},{value:"Dockerfile Instructions Explained",id:"dockerfile-instructions-explained",level:3},{value:"Base Image",id:"base-image",level:4},{value:"Working Directory",id:"working-directory",level:4},{value:"Dependency Installation",id:"dependency-installation",level:4},{value:"Source Code Copy",id:"source-code-copy",level:4},{value:"Port Exposure",id:"port-exposure",level:4},{value:"Startup Command",id:"startup-command",level:4},{value:"Frontend Dockerfile",id:"frontend-dockerfile",level:2},{value:"Frontend-Specific Configuration",id:"frontend-specific-configuration",level:3},{value:"Multi-stage Build Setup",id:"multi-stage-build-setup",level:4},{value:"Development Server Command",id:"development-server-command",level:4},{value:"Build Tools Configuration",id:"build-tools-configuration",level:2},{value:"Vite Configuration",id:"vite-configuration",level:3},{value:"Tailwind CSS Configuration",id:"tailwind-css-configuration",level:3},{value:"PostCSS Configuration",id:"postcss-configuration",level:3},{value:"Container Networking",id:"container-networking",level:2},{value:"Service Communication",id:"service-communication",level:3},{value:"Port Mapping",id:"port-mapping",level:3},{value:"Deployment Workflow",id:"deployment-workflow",level:2},{value:"Development Deployment",id:"development-deployment",level:3},{value:"Container Lifecycle",id:"container-lifecycle",level:3},{value:"Benefits of This Architecture",id:"benefits-of-this-architecture",level:2},{value:"Development Benefits",id:"development-benefits",level:3},{value:"Production Benefits",id:"production-benefits",level:3},{value:"Operational Benefits",id:"operational-benefits",level:3},{value:"Connection to Other Components",id:"connection-to-other-components",level:2},{value:"Application Architecture",id:"application-architecture",level:3},{value:"Configuration Management",id:"configuration-management",level:3}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"containerization-and-deployment",children:"Containerization and Deployment"})}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"The Notes App uses Docker containerization to package and deploy the application components. This approach ensures consistent environments across development, testing, and production while simplifying deployment and scaling."}),"\n",(0,s.jsx)(n.h2,{id:"what-is-containerization",children:"What is Containerization?"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Containerization"})," is a method of packaging applications that:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Encapsulates applications"})," with their dependencies and runtime environment"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Ensures consistency"})," across different deployment environments"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Simplifies deployment"})," by providing portable, self-contained units"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Enables scalability"})," through orchestration tools"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Isolates applications"})," from the host system and other containers"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"docker-architecture",children:"Docker Architecture"}),"\n",(0,s.jsxs)(n.p,{children:["The Notes App uses a ",(0,s.jsx)(n.strong,{children:"multi-container architecture"})," with three main services:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Frontend Container"}),": React application served by Vite development server"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Backend Container"}),": Node.js API server with Express.js"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Database Container"}),": MongoDB database for data persistence"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"docker-compose-configuration",children:"Docker Compose Configuration"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"File"}),": ",(0,s.jsx)(n.code,{children:"docker-compose.yml"})]}),"\n",(0,s.jsx)(n.p,{children:"Docker Compose orchestrates multiple containers and defines their relationships."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'version: \'3.8\'\r\n\r\nservices:\r\n  notes-front-app:\r\n    container_name: notes-front-app\r\n    build:\r\n      context: ./frontend/notes-app\r\n      dockerfile: Dockerfile\r\n    ports:\r\n      - "5173:5173"\r\n    depends_on:\r\n      - notes-api\r\n\r\n  mongo-local:\r\n    image: mongo:latest\r\n    container_name: mongo-local\r\n    ports:\r\n      - "27017:27017"\r\n\r\n  notes-api:\r\n    image: notes-api\r\n    build: ./backend/\r\n    container_name: notes-api\r\n    ports:\r\n      - "8000:8000"\r\n    depends_on:\r\n      - mongo-local\n'})}),"\n",(0,s.jsx)(n.h3,{id:"configuration-breakdown",children:"Configuration Breakdown"}),"\n",(0,s.jsx)(n.h4,{id:"version-declaration",children:"Version Declaration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"version: '3.8'\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Compose file version"}),": Specifies Docker Compose file format version"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Feature compatibility"}),": Version 3.8 supports modern Docker features"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"frontend-service",children:"Frontend Service"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'notes-front-app:\r\n  container_name: notes-front-app\r\n  build:\r\n    context: ./frontend/notes-app\r\n    dockerfile: Dockerfile\r\n  ports:\r\n    - "5173:5173"\r\n  depends_on:\r\n    - notes-api\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Service Configuration"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"container_name"})}),": Sets a custom name for the container"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"build.context"})}),": Specifies the build directory containing source code"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"build.dockerfile"})}),": Points to the Dockerfile for building the image"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"ports"})}),": Maps host port 5173 to container port 5173"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"depends_on"})}),": Ensures the API service starts before the frontend"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"database-service",children:"Database Service"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'mongo-local:\r\n  image: mongo:latest\r\n  container_name: mongo-local\r\n  ports:\r\n    - "27017:27017"\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Database Configuration"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"image"})}),": Uses the official MongoDB Docker image"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:[(0,s.jsx)(n.code,{children:"latest"})," tag"]}),": Always pulls the most recent MongoDB version"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Port mapping"}),": Exposes MongoDB on standard port 27017"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"backend-service",children:"Backend Service"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'notes-api:\r\n  image: notes-api\r\n  build: ./backend/\r\n  container_name: notes-api\r\n  ports:\r\n    - "8000:8000"\r\n  depends_on:\r\n    - mongo-local\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"API Configuration"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"build"})}),": Builds custom image from backend directory"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Port mapping"}),": Exposes API on port 8000"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Database dependency"}),": Waits for MongoDB to start first"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"backend-dockerfile",children:"Backend Dockerfile"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"File"}),": ",(0,s.jsx)(n.code,{children:"backend/Dockerfile"})]}),"\n",(0,s.jsx)(n.p,{children:"Defines how to build the backend API container."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dockerfile",children:'# Use Node.js image as the base image\r\nFROM node:18-alpine\r\n\r\n# Set working directory\r\nWORKDIR /app\r\n\r\n# Copy package.json and package-lock.json to the working directory\r\nCOPY package*.json ./\r\n\r\n# Install dependencies\r\nRUN npm install\r\n\r\n# Copy the rest of the backend API code to the working directory\r\nCOPY . .\r\n\r\n# Expose the port that the backend API will be running on\r\nEXPOSE 8000\r\n\r\n# Start the backend API\r\nCMD ["npm", "start"]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"dockerfile-instructions-explained",children:"Dockerfile Instructions Explained"}),"\n",(0,s.jsx)(n.h4,{id:"base-image",children:"Base Image"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dockerfile",children:"FROM node:18-alpine\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"FROM"})}),": Specifies the base image to build upon"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"node:18-alpine"})}),": Official Node.js version 18 on Alpine Linux"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Alpine Linux"}),": Lightweight Linux distribution, smaller image size"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"working-directory",children:"Working Directory"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dockerfile",children:"WORKDIR /app\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"WORKDIR"})}),": Sets the working directory inside the container"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Path consistency"}),": All subsequent commands run from ",(0,s.jsx)(n.code,{children:"/app"})]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"dependency-installation",children:"Dependency Installation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dockerfile",children:"COPY package*.json ./\r\nRUN npm install\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"COPY package*.json"})}),": Copies package.json and package-lock.json"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Wildcard pattern"}),": ",(0,s.jsx)(n.code,{children:"*"})," matches both package.json and package-lock.json"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"RUN npm install"})}),": Installs Node.js dependencies"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Layer optimization"}),": Dependencies installed before copying source code"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"source-code-copy",children:"Source Code Copy"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dockerfile",children:"COPY . .\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"COPY . ."})}),": Copies all remaining files from build context"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Efficient layering"}),": Source changes don't invalidate dependency layer"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"port-exposure",children:"Port Exposure"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dockerfile",children:"EXPOSE 8000\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"EXPOSE"})}),": Documents which port the container listens on"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Metadata only"}),": Doesn't actually publish the port (done in docker-compose)"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"startup-command",children:"Startup Command"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dockerfile",children:'CMD ["npm", "start"]\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"CMD"})}),": Defines the default command to run when container starts"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Array syntax"}),": Preferred format for command specification"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"npm start"}),": Runs the start script defined in package.json"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"frontend-dockerfile",children:"Frontend Dockerfile"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"File"}),": ",(0,s.jsx)(n.code,{children:"frontend/notes-app/Dockerfile"})]}),"\n",(0,s.jsx)(n.p,{children:"Defines how to build the frontend React container."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dockerfile",children:'# Use Node.js official image as the base image\r\nFROM node:18-alpine AS build\r\n\r\n# Set working directory inside the container\r\nWORKDIR /app\r\n\r\n# Copy package.json and package-lock.json to the working directory\r\nCOPY package*.json ./\r\n\r\n# Install dependencies\r\nRUN npm install\r\n\r\n# Copy the rest of the application code to the working directory\r\nCOPY . .\r\n\r\n# Expose the port the app will run on\r\nEXPOSE 5173\r\n\r\n# Command to start the development server\r\nCMD ["npm", "run", "dev", "--", "--host"]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"frontend-specific-configuration",children:"Frontend-Specific Configuration"}),"\n",(0,s.jsx)(n.h4,{id:"multi-stage-build-setup",children:"Multi-stage Build Setup"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dockerfile",children:"FROM node:18-alpine AS build\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"AS build"})}),": Names this stage for potential multi-stage builds"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Development setup"}),": Currently configured for development mode"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"development-server-command",children:"Development Server Command"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dockerfile",children:'CMD ["npm", "run", "dev", "--", "--host"]\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"npm run dev"})}),": Starts Vite development server"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:[(0,s.jsx)(n.code,{children:"--host"})," flag"]}),": Allows external connections to the container"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Development mode"}),": Enables hot reloading and development features"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"build-tools-configuration",children:"Build Tools Configuration"}),"\n",(0,s.jsx)(n.h3,{id:"vite-configuration",children:"Vite Configuration"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"File"}),": ",(0,s.jsx)(n.code,{children:"frontend/notes-app/vite.config.js"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { defineConfig } from 'vite'\r\nimport react from '@vitejs/plugin-react'\r\n\r\nexport default defineConfig({\r\n  plugins: [react()],\r\n})\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Vite Features"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Fast development server"}),": Hot module replacement for quick development"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"React plugin"}),": Enables JSX transformation and React features"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Modern build tool"}),": Optimized for modern JavaScript development"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"tailwind-css-configuration",children:"Tailwind CSS Configuration"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"File"}),": ",(0,s.jsx)(n.code,{children:"frontend/notes-app/tailwind.config.js"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"export default {\r\n  content: ['./index.html','./src/**/*.{js,ts,jsx,tsx}',],\r\n  theme: {\r\n    extend: {\r\n      colors: {\r\n        primary: \"#2B85FF\",\r\n        secondary: \"#EF863E\"\r\n      }\r\n    },\r\n  },\r\n  plugins: [],\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Configuration Details"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"content"})}),": Specifies files to scan for CSS classes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"theme.extend.colors"})}),": Defines custom color palette"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Purging"}),": Only includes CSS for classes actually used in the application"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"postcss-configuration",children:"PostCSS Configuration"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"File"}),": ",(0,s.jsx)(n.code,{children:"frontend/notes-app/postcss.config.js"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"export default {\r\n  plugins: {\r\n    tailwindcss: {},\r\n    autoprefixer: {},\r\n  },\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"PostCSS Plugins"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"tailwindcss"})}),": Processes Tailwind CSS directives"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"autoprefixer"})}),": Adds vendor prefixes for browser compatibility"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"container-networking",children:"Container Networking"}),"\n",(0,s.jsx)(n.h3,{id:"service-communication",children:"Service Communication"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Internal Network"}),": Docker Compose creates a default network for service communication"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'# Backend connects to database using service name\r\nconnectionString: "mongodb://mongo-local:27017/"\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Service Discovery"}),": Containers can reach each other using service names"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Frontend \u2192 Backend"}),": ",(0,s.jsx)(n.code,{children:"http://notes-api:8000"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Backend \u2192 Database"}),": ",(0,s.jsx)(n.code,{children:"mongodb://mongo-local:27017"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"port-mapping",children:"Port Mapping"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Host to Container Mapping"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Frontend"}),": ",(0,s.jsx)(n.code,{children:"localhost:5173"})," \u2192 ",(0,s.jsx)(n.code,{children:"notes-front-app:5173"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Backend"}),": ",(0,s.jsx)(n.code,{children:"localhost:8000"})," \u2192 ",(0,s.jsx)(n.code,{children:"notes-api:8000"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Database"}),": ",(0,s.jsx)(n.code,{children:"localhost:27017"})," \u2192 ",(0,s.jsx)(n.code,{children:"mongo-local:27017"})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"deployment-workflow",children:"Deployment Workflow"}),"\n",(0,s.jsx)(n.h3,{id:"development-deployment",children:"Development Deployment"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Build and Start"}),": ",(0,s.jsx)(n.code,{children:"docker-compose up --build"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Service Startup Order"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"MongoDB container starts first"}),"\n",(0,s.jsx)(n.li,{children:"Backend API starts after database"}),"\n",(0,s.jsx)(n.li,{children:"Frontend starts after backend API"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Access Points"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Frontend: ",(0,s.jsx)(n.a,{href:"http://localhost:5173",children:"http://localhost:5173"})]}),"\n",(0,s.jsxs)(n.li,{children:["Backend API: ",(0,s.jsx)(n.a,{href:"http://localhost:8000",children:"http://localhost:8000"})]}),"\n",(0,s.jsx)(n.li,{children:"Database: localhost:27017"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"container-lifecycle",children:"Container Lifecycle"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Startup Sequence"}),":"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Image Building"}),": Docker builds custom images for frontend and backend"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Network Creation"}),": Docker Compose creates internal network"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Container Startup"}),": Containers start in dependency order"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Service Registration"}),": Services become available on internal network"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Shutdown Process"}),":"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Graceful Shutdown"}),": ",(0,s.jsx)(n.code,{children:"docker-compose down"})," stops all containers"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Network Cleanup"}),": Removes the created network"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Container Removal"}),": Removes stopped containers (images remain)"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"benefits-of-this-architecture",children:"Benefits of This Architecture"}),"\n",(0,s.jsx)(n.h3,{id:"development-benefits",children:"Development Benefits"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Consistent Environment"}),": Same setup across all developer machines"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Easy Setup"}),": Single command starts entire application stack"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Isolation"}),": No conflicts with other projects or system dependencies"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Hot Reloading"}),": Development servers support live code updates"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"production-benefits",children:"Production Benefits"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Scalability"}),": Individual services can be scaled independently"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Portability"}),": Containers run consistently across different environments"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Resource Efficiency"}),": Containers share host OS kernel"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Service Isolation"}),": Failures in one service don't affect others"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"operational-benefits",children:"Operational Benefits"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Simple Deployment"}),": Single command deploys entire application"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Version Control"}),": Infrastructure defined as code"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Rollback Capability"}),": Easy to revert to previous versions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Monitoring"}),": Container logs and metrics available through Docker tools"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"connection-to-other-components",children:"Connection to Other Components"}),"\n",(0,s.jsx)(n.h3,{id:"application-architecture",children:"Application Architecture"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Frontend Container"}),": Serves React application and static assets"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Backend Container"}),": Runs Express.js API and handles business logic"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Database Container"}),": Provides MongoDB data persistence"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"configuration-management",children:"Configuration Management"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Environment Variables"}),": Managed through Docker Compose"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Build Context"}),": Source code and dependencies packaged in images"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Network Configuration"}),": Service discovery and communication handled automatically"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>t});var r=i(6540);const s={},o=r.createContext(s);function l(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);