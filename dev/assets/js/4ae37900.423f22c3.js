"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[450],{278:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>h,frontMatter:()=>d,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"Portfolio/PreviewMd/app","title":"App Component","description":"The App component is the root component of the application. It sets up the main layout and state management for the editor.","source":"@site/docs/Portfolio/PreviewMd/app.md","sourceDirName":"Portfolio/PreviewMd","slug":"/Portfolio/PreviewMd/app","permalink":"/dev/docs/Portfolio/PreviewMd/app","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/dev/docs/Portfolio/PreviewMd/introduction"},"next":{"title":"Editor Component","permalink":"/dev/docs/Portfolio/PreviewMd/editor"}}');var r=o(4848),i=o(8453);const d={},a="App Component",s={},l=[{value:"Structure",id:"structure",level:2},{value:"State Management",id:"state-management",level:2},{value:"Code Breakdown",id:"code-breakdown",level:2},{value:"<code>initialMarkdown</code>",id:"initialmarkdown",level:3},{value:"<code>useState</code>",id:"usestate",level:3},{value:"Layout",id:"layout",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"app-component",children:"App Component"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"App"})," component is the root component of the application. It sets up the main layout and state management for the editor."]}),"\n",(0,r.jsx)(n.h2,{id:"structure",children:"Structure"}),"\n",(0,r.jsx)(n.p,{children:"The component is divided into three main sections:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Toolbar:"})," A ",(0,r.jsx)(n.code,{children:"Toolbar"})," component that provides controls for the editor, such as toggling the minimap and word wrap, and saving the documentation."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Editor:"})," An ",(0,r.jsx)(n.code,{children:"Editor"})," component where the user can write Markdown."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Preview:"})," A ",(0,r.jsx)(n.code,{children:"Preview"})," component that displays the rendered HTML of the Markdown from the editor."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"state-management",children:"State Management"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"App"})," component manages the following state:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"markdown"}),": The current Markdown content of the editor."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"minimapEnabled"}),": A boolean to control the visibility of the minimap in the editor."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"wordWrapEnabled"}),": A boolean to control word wrapping in the editor."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["These state variables are passed down as props to the ",(0,r.jsx)(n.code,{children:"Toolbar"}),", ",(0,r.jsx)(n.code,{children:"Editor"}),", and ",(0,r.jsx)(n.code,{children:"Preview"})," components."]}),"\n",(0,r.jsx)(n.h2,{id:"code-breakdown",children:"Code Breakdown"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { useState } from 'react';\nimport Editor from './components/Editor';\nimport Preview from './components/Preview';\nimport Toolbar from './components/Toolbar';\nimport { Toaster } from 'sonner';\n\n// Initial markdown content for demonstration\nconst initialMarkdown = `# Welcome to the Markdown Editor\n...`;\n\nfunction App() {\n  const [markdown, setMarkdown] = useState(initialMarkdown);\n  const [minimapEnabled, setMinimapEnabled] = useState(true);\n  const [wordWrapEnabled, setWordWrapEnabled] = useState(true);\n\n  return (\n    <div className=\"flex h-screen flex-col bg-white dark:bg-zinc-950 text-zinc-900 dark:text-zinc-50\">\n      <Toolbar\n        minimapEnabled={minimapEnabled}\n        setMinimapEnabled={setMinimapEnabled}\n        wordWrapEnabled={wordWrapEnabled}\n        setWordWrapEnabled={setWordWrapEnabled}\n        markdown={markdown}\n        setMarkdown={setMarkdown}\n      />\n      <div className=\"flex flex-1 overflow-hidden\">\n        <div className=\"w-1/2 border-r border-zinc-200 dark:border-zinc-800\">\n          <Editor\n            value={markdown}\n            onChange={setMarkdown}\n            minimapEnabled={minimapEnabled}\n            wordWrapEnabled={wordWrapEnabled}\n          />\n        </div>\n        <div className=\"w-1/2 overflow-auto bg-white dark:bg-zinc-950\">\n          <Preview markdown={markdown} />\n        </div>\n      </div>\n      <Toaster position=\"bottom-right\" />\n    </div>\n  );\n}\n\nexport default App;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"initialmarkdown",children:(0,r.jsx)(n.code,{children:"initialMarkdown"})}),"\n",(0,r.jsx)(n.p,{children:"A string constant that provides the initial Markdown content when the application loads. This is useful for demonstrating the editor's features to new users."}),"\n",(0,r.jsx)(n.h3,{id:"usestate",children:(0,r.jsx)(n.code,{children:"useState"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"useState"})," hook from React is used to manage the state of the application."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"markdown"}),": Stores the Markdown text. It is initialized with ",(0,r.jsx)(n.code,{children:"initialMarkdown"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"minimapEnabled"}),": A boolean state to show or hide the editor's minimap. Default is ",(0,r.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"wordWrapEnabled"}),": A boolean state to enable or disable word wrapping in the editor. Default is ",(0,r.jsx)(n.code,{children:"true"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"layout",children:"Layout"}),"\n",(0,r.jsxs)(n.p,{children:["The main layout is a flex container that fills the entire screen (",(0,r.jsx)(n.code,{children:"h-screen"}),"). The ",(0,r.jsx)(n.code,{children:"Toolbar"})," is at the top, and the editor and preview panes are arranged horizontally below it. The ",(0,r.jsx)(n.code,{children:"Toaster"})," component from the ",(0,r.jsx)(n.code,{children:"sonner"})," library is used to display notifications."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>d,x:()=>a});var t=o(6540);const r={},i=t.createContext(r);function d(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);