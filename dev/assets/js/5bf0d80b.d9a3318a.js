"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[9926],{6529:(s,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>d,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"react/tailwind/integrate-tailwind-docusaurus","title":"Tailwind with docusaurus","description":"Step 1: Install Tailwind CSS and its dependencies","source":"@site/docs/react/tailwind/integrate-tailwind-docusaurus.md","sourceDirName":"react/tailwind","slug":"/react/tailwind/integrate-tailwind-docusaurus","permalink":"/dev/docs/react/tailwind/integrate-tailwind-docusaurus","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"tailwindcss","permalink":"/dev/docs/tags/tailwindcss"}],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Tailwind with docusaurus","sidebar_position":2,"tags":["tailwindcss"]},"sidebar":"tutorialSidebar","previous":{"title":"Intro Tailwind CSS","permalink":"/dev/docs/react/tailwind/tailwindcss"},"next":{"title":"Tech Related","permalink":"/dev/docs/category/tech-related"}}');var t=n(4848),l=n(8453);const r={title:"Tailwind with docusaurus",sidebar_position:2,tags:["tailwindcss"]},d="Integrating Tailwind CSS with Docusaurus",c={},a=[{value:"Step 1: Install Tailwind CSS and its dependencies",id:"step-1-install-tailwind-css-and-its-dependencies",level:2},{value:"Step 2: Configure Tailwind CSS",id:"step-2-configure-tailwind-css",level:2},{value:"Step 3: Create PostCSS configuration",id:"step-3-create-postcss-configuration",level:2},{value:"Step 4: Add Tailwind directives",id:"step-4-add-tailwind-directives",level:2},{value:"Step 5: Update Docusaurus configuration",id:"step-5-update-docusaurus-configuration",level:2},{value:"Step 6: Purge unused styles (Optional)",id:"step-6-purge-unused-styles-optional",level:2},{value:"Step 7: Using Tailwind in components",id:"step-7-using-tailwind-in-components",level:2},{value:"Important Notes",id:"important-notes",level:2}];function o(s){const e={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...s.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"integrating-tailwind-css-with-docusaurus",children:"Integrating Tailwind CSS with Docusaurus"})}),"\n",(0,t.jsx)(e.h2,{id:"step-1-install-tailwind-css-and-its-dependencies",children:"Step 1: Install Tailwind CSS and its dependencies"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"npm install -D tailwindcss postcss autoprefixer\r\nnpx tailwindcss init\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Why this is needed:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"tailwindcss"}),": The core Tailwind CSS library that generates utility classes"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"postcss"}),": Required for processing Tailwind's CSS (Tailwind is a PostCSS plugin)"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"autoprefixer"}),": Adds vendor prefixes to CSS rules for better browser compatibility"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"npx tailwindcss init"}),": Creates a default configuration file (",(0,t.jsx)(e.code,{children:"tailwind.config.js"}),") to customize Tailwind"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"step-2-configure-tailwind-css",children:"Step 2: Configure Tailwind CSS"}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"tailwind.config.js"})," file tells Tailwind where to look for class usage:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"content: [\r\n  './src/**/*.{js,jsx,ts,tsx}',\r\n  './docs/**/*.{md,mdx}',\r\n  './blog/**/*.{md,mdx}',\r\n  './static/**/*.html',\r\n  './docusaurus.config.js',\r\n]\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Why this matters:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Tailwind scans these files to find class names it needs to generate"}),"\n",(0,t.jsx)(e.li,{children:"Without proper content paths, your utility classes won't work"}),"\n",(0,t.jsx)(e.li,{children:"We include JS/TS files, MD/MDX docs, and HTML files to cover all Docusaurus content"}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"step-3-create-postcss-configuration",children:"Step 3: Create PostCSS configuration"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:"postcss.config.js"})," sets up the CSS processing pipeline:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"module.exports = {\r\n  plugins: {\r\n    tailwindcss: {},\r\n    autoprefixer: {},\r\n  },\r\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Why this is necessary:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"PostCSS needs to know which plugins to use"}),"\n",(0,t.jsx)(e.li,{children:"The order matters: Tailwind runs first, then autoprefixer"}),"\n",(0,t.jsx)(e.li,{children:"Docusaurus already uses PostCSS internally, this just extends it"}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"step-4-add-tailwind-directives",children:"Step 4: Add Tailwind directives"}),"\n",(0,t.jsxs)(e.p,{children:["In your main CSS file (",(0,t.jsx)(e.code,{children:"src/css/custom.css"}),"):"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-css",children:"@tailwind base;\r\n@tailwind components;\r\n@tailwind utilities;\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"What these do:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"@tailwind base"}),": Adds Tailwind's base styles (normalize.css + basic element styles)"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"@tailwind components"}),": Adds component classes (like .btn, .card - less used in utility-first)"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"@tailwind utilities"}),": Generates all utility classes (most important part)"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"step-5-update-docusaurus-configuration",children:"Step 5: Update Docusaurus configuration"}),"\n",(0,t.jsxs)(e.p,{children:["The plugin in ",(0,t.jsx)(e.code,{children:"docusaurus.config.js"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"async function myPlugin() {\r\n  return {\r\n    name: 'docusaurus-tailwindcss',\r\n    configurePostCss(postcssOptions) {\r\n      postcssOptions.plugins.push(require('tailwindcss'));\r\n      postcssOptions.plugins.push(require('autoprefixer'));\r\n      return postcssOptions;\r\n    },\r\n  };\r\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Why this is critical:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Docusaurus has its own PostCSS setup"}),"\n",(0,t.jsx)(e.li,{children:"This plugin ensures Tailwind is added to that pipeline"}),"\n",(0,t.jsx)(e.li,{children:"Without this, Docusaurus would ignore Tailwind's processing"}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"step-6-purge-unused-styles-optional",children:"Step 6: Purge unused styles (Optional)"}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"purge"})," option in Tailwind v2 (now called ",(0,t.jsx)(e.code,{children:"content"})," in v3+):"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"purge: [\r\n  './src/**/*.{js,jsx,ts,tsx}',\r\n  // ... other paths\r\n]\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Purpose:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"In production, removes unused CSS classes"}),"\n",(0,t.jsx)(e.li,{children:"Significantly reduces final CSS file size"}),"\n",(0,t.jsx)(e.li,{children:"Only scans files matching these patterns"}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"step-7-using-tailwind-in-components",children:"Step 7: Using Tailwind in components"}),"\n",(0,t.jsx)(e.p,{children:"Example component usage:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",children:'<div className="bg-blue-500 text-white p-4 rounded-lg">\n'})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Key points:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Use ",(0,t.jsx)(e.code,{children:"className"})," instead of ",(0,t.jsx)(e.code,{children:"class"})," in React components"]}),"\n",(0,t.jsx)(e.li,{children:"Utility classes work the same as in HTML"}),"\n",(0,t.jsx)(e.li,{children:"Works in both React components and MDX files"}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"important-notes",children:"Important Notes"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Build Process"}),": Tailwind works during build time, not runtime"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Class Detection"}),": Only classes found in your content files will be generated"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"CSS Conflicts"}),": Tailwind's base styles might conflict with Docusaurus - you may need to adjust"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Dark Mode"}),": Tailwind's dark mode can work with Docusaurus' theme system"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Restart Needed"}),": After config changes, restart your dev server"]}),"\n"]})]})}function u(s={}){const{wrapper:e}={...(0,l.R)(),...s.components};return e?(0,t.jsx)(e,{...s,children:(0,t.jsx)(o,{...s})}):o(s)}},8453:(s,e,n)=>{n.d(e,{R:()=>r,x:()=>d});var i=n(6540);const t={},l=i.createContext(t);function r(s){const e=i.useContext(l);return i.useMemo((function(){return"function"==typeof s?s(e):{...e,...s}}),[e,s])}function d(s){let e;return e=s.disableParentContext?"function"==typeof s.components?s.components(t):s.components||t:r(s.components),i.createElement(l.Provider,{value:e},s.children)}}}]);