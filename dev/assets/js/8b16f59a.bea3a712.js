"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[5545],{6373:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"QA-Testing/Test-Strategy-Planning/different-type-of-test-strategies","title":"Testing Strategies: Risk-Based, Requirement-Based, Exploratory, and More","description":"Overview","source":"@site/docs/QA-Testing/2-Test-Strategy-Planning/2-different-type-of-test-strategies.md","sourceDirName":"QA-Testing/2-Test-Strategy-Planning","slug":"/QA-Testing/Test-Strategy-Planning/different-type-of-test-strategies","permalink":"/dev/docs/QA-Testing/Test-Strategy-Planning/different-type-of-test-strategies","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Test Strategy and Planning","permalink":"/dev/docs/QA-Testing/Test-Strategy-Planning/overview"},"next":{"title":"Writing a Test Plan: Objectives, Resources, Risks, and Timelines","permalink":"/dev/docs/QA-Testing/Test-Strategy-Planning/test-plan"}}');var t=n(4848),r=n(8453);const l={},a="Testing Strategies: Risk-Based, Requirement-Based, Exploratory, and More",d={},o=[{value:"Overview",id:"overview",level:2},{value:"1. Risk-Based Testing (RBT)",id:"1-risk-based-testing-rbt",level:2},{value:"Definition",id:"definition",level:3},{value:"Use Case:",id:"use-case",level:3},{value:"When to Use:",id:"when-to-use",level:3},{value:"Benefits:",id:"benefits",level:3},{value:"2. Requirement-Based Testing",id:"2-requirement-based-testing",level:2},{value:"Definition",id:"definition-1",level:3},{value:"Use Case:",id:"use-case-1",level:3},{value:"When to Use:",id:"when-to-use-1",level:3},{value:"Benefits:",id:"benefits-1",level:3},{value:"3. Exploratory Testing",id:"3-exploratory-testing",level:2},{value:"Definition",id:"definition-2",level:3},{value:"Use Case:",id:"use-case-2",level:3},{value:"When to Use:",id:"when-to-use-2",level:3},{value:"Benefits:",id:"benefits-2",level:3}];function c(e){const i={br:"br",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"testing-strategies-risk-based-requirement-based-exploratory-and-more",children:"Testing Strategies: Risk-Based, Requirement-Based, Exploratory, and More"})}),"\n",(0,t.jsx)(i.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(i.p,{children:["A testing strategy defines the ",(0,t.jsx)(i.strong,{children:"overall approach to ensure product quality"}),". It's more than writing test cases\u2014it's about deciding ",(0,t.jsx)(i.strong,{children:"what to test, when to test it, and how deeply"}),". Senior QA engineers tailor testing strategies based on product risks, timelines, and business priorities."]}),"\n",(0,t.jsx)(i.p,{children:"This section covers the most common and impactful testing strategies, with real-world use cases for each."}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h2,{id:"1-risk-based-testing-rbt",children:"1. Risk-Based Testing (RBT)"}),"\n",(0,t.jsx)(i.h3,{id:"definition",children:"Definition"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Risk-Based Testing"})," prioritizes testing efforts based on the ",(0,t.jsx)(i.strong,{children:"probability of failure and its impact"}),". High-risk areas are tested more rigorously than low-risk ones."]}),"\n",(0,t.jsx)(i.h3,{id:"use-case",children:"Use Case:"}),"\n",(0,t.jsx)(i.p,{children:"An online banking app adds a new loan approval feature. QA evaluates:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Business risk: Payment calculation errors = high impact"}),"\n",(0,t.jsx)(i.li,{children:"Technical risk: 3rd-party API integration = high likelihood of failure"}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Focus is placed on edge cases, security testing, and backend validation for this area. Lower-risk features (e.g. static UI content) receive basic regression only."}),"\n",(0,t.jsx)(i.h3,{id:"when-to-use",children:"When to Use:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Limited time or resources"}),"\n",(0,t.jsx)(i.li,{children:"Critical or complex applications"}),"\n",(0,t.jsx)(i.li,{children:"New or high-risk features"}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"benefits",children:"Benefits:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Maximizes value of testing under constraints"}),"\n",(0,t.jsx)(i.li,{children:"Prevents critical failures in production"}),"\n"]}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h2,{id:"2-requirement-based-testing",children:"2. Requirement-Based Testing"}),"\n",(0,t.jsx)(i.h3,{id:"definition-1",children:"Definition"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Requirement-Based Testing"})," derives test cases directly from ",(0,t.jsx)(i.strong,{children:"user stories, acceptance criteria, or specifications"}),". It ensures all documented requirements are validated."]}),"\n",(0,t.jsx)(i.h3,{id:"use-case-1",children:"Use Case:"}),"\n",(0,t.jsxs)(i.p,{children:["A ride-sharing app has a story:",(0,t.jsx)(i.br,{}),"\n",(0,t.jsx)(i.em,{children:'"As a user, I want to cancel a ride within 2 minutes without charge."'})]}),"\n",(0,t.jsx)(i.p,{children:"QA writes test cases to verify:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Cancel within 2 minutes = no charge"}),"\n",(0,t.jsx)(i.li,{children:"Cancel after 2 minutes = charge applied"}),"\n",(0,t.jsx)(i.li,{children:"Charge visibility on UI and invoice"}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"when-to-use-1",children:"When to Use:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Well-documented projects (Agile or Waterfall)"}),"\n",(0,t.jsx)(i.li,{children:"Regulatory or compliance-driven testing"}),"\n",(0,t.jsx)(i.li,{children:"Contracts with traceability requirements"}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"benefits-1",children:"Benefits:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Complete requirement coverage"}),"\n",(0,t.jsx)(i.li,{children:"Useful for audits and documentation"}),"\n"]}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h2,{id:"3-exploratory-testing",children:"3. Exploratory Testing"}),"\n",(0,t.jsx)(i.h3,{id:"definition-2",children:"Definition"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Exploratory Testing"})," is an ",(0,t.jsx)(i.strong,{children:"unscripted, adaptive testing approach"})," where the tester actively learns and explores the system while testing it."]}),"\n",(0,t.jsx)(i.h3,{id:"use-case-2",children:"Use Case:"}),"\n",(0,t.jsx)(i.p,{children:"QA is testing a newly released B2B dashboard with minimal documentation. During exploratory testing, they:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Discover filters don\u2019t reset properly after sorting"}),"\n",(0,t.jsx)(i.li,{children:"Find a UI inconsistency between desktop and tablet modes"}),"\n",(0,t.jsx)(i.li,{children:"Identify performance lag when switching tabs rapidly"}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"These weren\u2019t covered in predefined test cases."}),"\n",(0,t.jsx)(i.h3,{id:"when-to-use-2",children:"When to Use:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Early feature builds or prototypes"}),"\n",(0,t.jsx)(i.li,{children:"Unfamiliar or changing systems"}),"\n",(0,t.jsx)(i.li,{children:"UI/UX-heavy applications"}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"benefits-2",children:"Benefits:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"High bug discovery rate"}),"\n",(0,t.jsx)(i.li,{children:"Encourages creative, critical thinking"}),"\n",(0,t.jsx)(i.li,{children:"Fills gaps left by aut"}),"\n"]})]})}function h(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>l,x:()=>a});var s=n(6540);const t={},r=s.createContext(t);function l(e){const i=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(r.Provider,{value:i},e.children)}}}]);