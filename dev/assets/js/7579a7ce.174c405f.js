"use strict";(self.webpackChunkmydevdocs=self.webpackChunkmydevdocs||[]).push([[823],{558:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"Portfolio/NoteApp/Frontend/main-dashboard","title":"Main Dashboard","description":"Overview","source":"@site/docs/Portfolio/NoteApp/Frontend/main-dashboard.md","sourceDirName":"Portfolio/NoteApp/Frontend","slug":"/Portfolio/NoteApp/Frontend/main-dashboard","permalink":"/dev/docs/Portfolio/NoteApp/Frontend/main-dashboard","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Authentication Pages","permalink":"/dev/docs/Portfolio/NoteApp/Frontend/authentication-pages"},"next":{"title":"UI Components","permalink":"/dev/docs/Portfolio/NoteApp/Frontend/ui-components"}}');var t=s(4848),o=s(8453);const a={},i="Main Dashboard",l={},d=[{value:"Overview",id:"overview",level:2},{value:"What is a Dashboard?",id:"what-is-a-dashboard",level:2},{value:"Home Component",id:"home-component",level:2},{value:"Component Structure and Imports",id:"component-structure-and-imports",level:3},{value:"Import Breakdown",id:"import-breakdown",level:4},{value:"State Management",id:"state-management",level:3},{value:"State Variables Explained",id:"state-variables-explained",level:4},{value:"Authentication and User Data",id:"authentication-and-user-data",level:3},{value:"Authentication Flow",id:"authentication-flow",level:4},{value:"Note Management Functions",id:"note-management-functions",level:3},{value:"Fetching Notes",id:"fetching-notes",level:4},{value:"Deleting Notes",id:"deleting-notes",level:4},{value:"Pinning/Unpinning Notes",id:"pinningunpinning-notes",level:4},{value:"Search Functionality",id:"search-functionality",level:3},{value:"Search Features",id:"search-features",level:4},{value:"Modal Management",id:"modal-management",level:3},{value:"AddEditNotes Component",id:"addeditnotes-component",level:2},{value:"Component Props and State",id:"component-props-and-state",level:3},{value:"Props Explained",id:"props-explained",level:4},{value:"Note Operations",id:"note-operations",level:3},{value:"Adding New Notes",id:"adding-new-notes",level:4},{value:"Editing Existing Notes",id:"editing-existing-notes",level:4},{value:"Form Validation and Submission",id:"form-validation-and-submission",level:3},{value:"Navigation Components",id:"navigation-components",level:2},{value:"Navbar Component",id:"navbar-component",level:3},{value:"Navbar Features",id:"navbar-features",level:4},{value:"SearchBar Component",id:"searchbar-component",level:3},{value:"SearchBar Features",id:"searchbar-features",level:4},{value:"User Experience Flow",id:"user-experience-flow",level:2},{value:"Dashboard Loading",id:"dashboard-loading",level:3},{value:"Note Creation",id:"note-creation",level:3},{value:"Note Editing",id:"note-editing",level:3},{value:"Search Operations",id:"search-operations",level:3},{value:"State Management Patterns",id:"state-management-patterns",level:2},{value:"Lifting State Up",id:"lifting-state-up",level:3},{value:"Callback Functions",id:"callback-functions",level:3},{value:"Connection to Other Components",id:"connection-to-other-components",level:2},{value:"Backend Integration",id:"backend-integration",level:3},{value:"Component Hierarchy",id:"component-hierarchy",level:3},{value:"State Flow",id:"state-flow",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"main-dashboard",children:"Main Dashboard"})}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"The main dashboard is the central interface of the Notes App where authenticated users can view, create, edit, delete, and search their notes. It serves as the primary workspace after successful login, providing a comprehensive note management experience."}),"\n",(0,t.jsx)(n.h2,{id:"what-is-a-dashboard",children:"What is a Dashboard?"}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.strong,{children:"dashboard"})," is the main user interface that:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Displays all user data"})," in an organized, accessible format"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Provides primary actions"})," like creating, editing, and deleting content"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Offers navigation and search"})," functionality"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Manages user sessions"})," and authentication state"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Coordinates multiple components"})," to create a cohesive experience"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"home-component",children:"Home Component"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"File"}),": ",(0,t.jsx)(n.code,{children:"frontend/notes-app/src/pages/Home/Home.jsx"})]}),"\n",(0,t.jsx)(n.p,{children:"The Home component is the main dashboard that orchestrates all note-related functionality and user interactions."}),"\n",(0,t.jsx)(n.h3,{id:"component-structure-and-imports",children:"Component Structure and Imports"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"import React, { useState, useEffect } from 'react'\r\nimport Navbar from '../../components/Navbar/Navbar'\r\nimport NoteCard from '../../components/Cards/NoteCard'\r\nimport { MdAdd } from \"react-icons/md\";\r\nimport AddEditNotes from './AddEditNotes';\r\nimport Modal from \"react-modal\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axiosInstance from '../../utils/axiosInstance';\r\nimport Toast from '../../components/ToastMessage/Toast';\r\nimport EmptyCard from '../../components/EmptyCard/EmptyCard';\n"})}),"\n",(0,t.jsx)(n.h4,{id:"import-breakdown",children:"Import Breakdown"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"React hooks"}),": ",(0,t.jsx)(n.code,{children:"useState"})," for state management, ",(0,t.jsx)(n.code,{children:"useEffect"})," for side effects"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Components"}),": Navigation, note cards, modals, and empty states"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Icons"}),": Add button icon from React Icons"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Navigation"}),": React Router for programmatic navigation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"API"}),": Configured Axios instance for backend communication"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"UI feedback"}),": Toast notifications for user actions"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"state-management",children:"State Management"}),"\n",(0,t.jsx)(n.p,{children:"The Home component manages multiple pieces of state to coordinate the dashboard functionality:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'const [userInfo, setUserInfo] = useState(null);\r\nconst [allNotes, setAllNotes] = useState([]);\r\nconst [isSearch, setIsSearch] = useState(false);\r\n\r\nconst [openAddEditModal, setOpenAddEditModal] = useState({\r\n  isShown: false,\r\n  type: "add",\r\n  data: null,\r\n});\r\n\r\nconst [showToastMsg, setShowToastMsg] = useState({\r\n  isShown: false,\r\n  message: "",\r\n  type: "add",\r\n});\n'})}),"\n",(0,t.jsx)(n.h4,{id:"state-variables-explained",children:"State Variables Explained"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"userInfo"})}),": Stores current user's profile information"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"allNotes"})}),": Array containing all user's notes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"isSearch"})}),": Boolean flag indicating if search results are displayed"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"openAddEditModal"})}),": Object controlling the add/edit note modal state"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"showToastMsg"})}),": Object managing toast notification display"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"authentication-and-user-data",children:"Authentication and User Data"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'const navigate = useNavigate();\r\n\r\nconst getUserInfo = async () => {\r\n  try {\r\n    const response = await axiosInstance.get("/get-user");\r\n    if (response.data && response.data.user) {\r\n      setUserInfo(response.data.user);\r\n    }\r\n  } catch (error) {\r\n    if (error.response.status === 401) {\r\n      localStorage.clear();\r\n      navigate("/login");\r\n    }\r\n  }\r\n};\r\n\r\nuseEffect(() => {\r\n  getUserInfo();\r\n  getAllNotes();\r\n}, []);\n'})}),"\n",(0,t.jsx)(n.h4,{id:"authentication-flow",children:"Authentication Flow"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Component mounts"}),": ",(0,t.jsx)(n.code,{children:"useEffect"})," runs on initial render"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Fetch user info"}),": Calls ",(0,t.jsx)(n.code,{children:"/get-user"})," endpoint with stored token"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Handle success"}),": Updates ",(0,t.jsx)(n.code,{children:"userInfo"})," state with user data"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Handle auth failure"}),": Clears storage and redirects to login"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Load notes"}),": Fetches all user notes simultaneously"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"note-management-functions",children:"Note Management Functions"}),"\n",(0,t.jsx)(n.h4,{id:"fetching-notes",children:"Fetching Notes"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'const getAllNotes = async () => {\r\n  try {\r\n    const response = await axiosInstance.get("/get-all-notes");\r\n    if (response.data && response.data.notes) {\r\n      setAllNotes(response.data.notes);\r\n    }\r\n  } catch (error) {\r\n    console.log("An unexpected error occurred. Please try again.");\r\n  }\r\n};\n'})}),"\n",(0,t.jsx)(n.h4,{id:"deleting-notes",children:"Deleting Notes"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'const deleteNote = async (data) => {\r\n  const noteId = data._id;\r\n  try {\r\n    const response = await axiosInstance.delete("/delete-note/" + noteId);\r\n    if (response.data && !response.data.error) {\r\n      showToastMessage("Note Deleted Successfully", "delete");\r\n      getAllNotes();\r\n    }\r\n  } catch (error) {\r\n    console.log("An unexpected error occurred. Please try again.");\r\n  }\r\n};\n'})}),"\n",(0,t.jsx)(n.h4,{id:"pinningunpinning-notes",children:"Pinning/Unpinning Notes"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'const updateIsPinned = async (noteData) => {\r\n  const noteId = noteData._id;\r\n  try {\r\n    const response = await axiosInstance.put("/update-note-pinned/" + noteId, {\r\n      isPinned: !noteData.isPinned,\r\n    });\r\n    if (response.data && response.data.note) {\r\n      showToastMessage("Note Updated Successfully");\r\n      getAllNotes();\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\n'})}),"\n",(0,t.jsx)(n.h3,{id:"search-functionality",children:"Search Functionality"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'const onSearchNote = async (query) => {\r\n  try {\r\n    const response = await axiosInstance.get("/search-notes", {\r\n      params: { query: query },\r\n    });\r\n    if (response.data && response.data.notes) {\r\n      setIsSearch(true);\r\n      setAllNotes(response.data.notes);\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nconst handleClearSearch = () => {\r\n  setIsSearch(false);\r\n  getAllNotes();\r\n};\n'})}),"\n",(0,t.jsx)(n.h4,{id:"search-features",children:"Search Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Real-time search"}),": Searches through note titles and content"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Search state tracking"}),": ",(0,t.jsx)(n.code,{children:"isSearch"})," flag manages search vs. normal view"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Clear functionality"}),": Returns to full note list when search is cleared"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Query parameters"}),": Uses URL parameters for search terms"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"modal-management",children:"Modal Management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'const handleEdit = (noteDetails) => {\r\n  setOpenAddEditModal({ isShown: true, data: noteDetails, type: "edit" });\r\n};\r\n\r\nconst showToastMessage = (message, type) => {\r\n  setShowToastMsg({\r\n    isShown: true,\r\n    message,\r\n    type,\r\n  });\r\n};\r\n\r\nconst handleCloseToast = () => {\r\n  setShowToastMsg({\r\n    isShown: false,\r\n    message: "",\r\n  });\r\n};\n'})}),"\n",(0,t.jsx)(n.h2,{id:"addeditnotes-component",children:"AddEditNotes Component"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"File"}),": ",(0,t.jsx)(n.code,{children:"frontend/notes-app/src/pages/Home/AddEditNotes.jsx"})]}),"\n",(0,t.jsx)(n.p,{children:"A modal component that handles both creating new notes and editing existing ones."}),"\n",(0,t.jsx)(n.h3,{id:"component-props-and-state",children:"Component Props and State"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'const AddEditNotes = ({ noteData, type, getAllNotes, onClose, showToastMessage }) => {\r\n  const [title, setTitle] = useState(noteData?.title || "");\r\n  const [content, setContent] = useState(noteData?.content || "");\r\n  const [tags, setTags] = useState(noteData?.tags || []);\r\n  const [error, setError] = useState(null);\n'})}),"\n",(0,t.jsx)(n.h4,{id:"props-explained",children:"Props Explained"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"noteData"})}),": Existing note data for edit mode (null for add mode)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"type"})}),': String indicating "add" or "edit" operation']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"getAllNotes"})}),": Function to refresh the notes list after changes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"onClose"})}),": Function to close the modal"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"showToastMessage"})}),": Function to display success/error notifications"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"note-operations",children:"Note Operations"}),"\n",(0,t.jsx)(n.h4,{id:"adding-new-notes",children:"Adding New Notes"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'const addNewNote = async () => {\r\n  try {\r\n    const response = await axiosInstance.post("/add-note", {\r\n      title,\r\n      content,\r\n      tags,\r\n    });\r\n    if (response.data && response.data.note) {\r\n      showToastMessage("Note Added Successfully");\r\n      getAllNotes();\r\n      onClose();\r\n    }\r\n  } catch (error) {\r\n    if (error.response && error.response.data && error.response.data.message) {\r\n      setError(error.response.data.message);\r\n    }\r\n  }\r\n};\n'})}),"\n",(0,t.jsx)(n.h4,{id:"editing-existing-notes",children:"Editing Existing Notes"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'const editNote = async () => {\r\n  const noteId = noteData._id;\r\n  try {\r\n    const response = await axiosInstance.put("/edit-note/" + noteId, {\r\n      title,\r\n      content,\r\n      tags,\r\n    });\r\n    if (response.data && response.data.note) {\r\n      showToastMessage("Note Updated Successfully");\r\n      getAllNotes();\r\n      onClose();\r\n    }\r\n  } catch (error) {\r\n    if (error.response && error.response.data && error.response.data.message) {\r\n      setError(error.response.data.message);\r\n    }\r\n  }\r\n};\n'})}),"\n",(0,t.jsx)(n.h3,{id:"form-validation-and-submission",children:"Form Validation and Submission"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'const handleAddNote = () => {\r\n  if (!title) {\r\n    setError("Please enter the title");\r\n    return;\r\n  }\r\n\r\n  if (!content) {\r\n    setError("Please enter the content");\r\n    return;\r\n  }\r\n\r\n  setError("");\r\n\r\n  if (type === "edit") {\r\n    editNote();\r\n  } else {\r\n    addNewNote();\r\n  }\r\n};\n'})}),"\n",(0,t.jsx)(n.h2,{id:"navigation-components",children:"Navigation Components"}),"\n",(0,t.jsx)(n.h3,{id:"navbar-component",children:"Navbar Component"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"File"}),": ",(0,t.jsx)(n.code,{children:"frontend/notes-app/src/components/Navbar/Navbar.jsx"})]}),"\n",(0,t.jsx)(n.p,{children:"The navigation bar provides search functionality, user profile display, and logout capability."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'const Navbar = ({userInfo, onSearchNote, handleClearSearch}) => {\r\n  const [searchQuery, setSearchQuery] = useState("");\r\n  const navigate = useNavigate();\r\n\r\n  const onLogout = () => {\r\n    localStorage.clear();\r\n    navigate("/login");\r\n  };\r\n\r\n  const handleSearch = () => {\r\n    if(searchQuery){\r\n      onSearchNote(searchQuery);\r\n    }\r\n  };\r\n\r\n  const onClearSearch = () => {\r\n    setSearchQuery("");\r\n    handleClearSearch();\r\n  };\n'})}),"\n",(0,t.jsx)(n.h4,{id:"navbar-features",children:"Navbar Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"App branding"}),': Displays "Notes" title']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Search integration"}),": Embedded search bar with clear functionality"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"User profile"}),": Shows user information and logout option"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Logout functionality"}),": Clears local storage and redirects to login"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"searchbar-component",children:"SearchBar Component"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"File"}),": ",(0,t.jsx)(n.code,{children:"frontend/notes-app/src/components/SearchBar/SearchBar.jsx"})]}),"\n",(0,t.jsx)(n.p,{children:"A reusable search input component with clear and search actions."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'const SearchBar = ({ value, onChange, handleSearch, onClearSearch }) => {\r\n  return (\r\n    <div className="w-80 flex items-center px-4 bg-slate-100 rounded-md">\r\n      <input type="text"\r\n        placeholder=\'Search Notes\'\r\n        className="w-full text-xs bg-transparent py-[11px] outline-none"\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n\r\n      {value && (\r\n        <IoMdClose\r\n          className="text-xl text-slate-500 cursor-pointer hover:text-black"\r\n          onClick={onClearSearch}\r\n        />\r\n      )}\r\n\r\n      <FaMagnifyingGlass className="text-slate-400 cursor-pointer hover:text-black" onClick={handleSearch} />\r\n    </div>\r\n  )\r\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"searchbar-features",children:"SearchBar Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Controlled input"}),": Value managed by parent component"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Conditional clear button"}),": Shows close icon only when there's text"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Visual feedback"}),": Hover effects on interactive elements"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Accessibility"}),": Proper cursor indicators for clickable elements"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"user-experience-flow",children:"User Experience Flow"}),"\n",(0,t.jsx)(n.h3,{id:"dashboard-loading",children:"Dashboard Loading"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Component mounts"}),": Home component initializes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Authentication check"}),": Verifies user token and fetches user info"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Data loading"}),": Retrieves all user notes from backend"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"UI rendering"}),": Displays navbar, notes grid, and add button"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"note-creation",children:"Note Creation"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Click add button"}),': Opens modal in "add" mode']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Fill form"}),": Enter title, content, and tags"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Submit"}),": Validates and sends to backend"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Success feedback"}),": Shows toast, refreshes list, closes modal"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"note-editing",children:"Note Editing"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Click edit on note"}),': Opens modal in "edit" mode with existing data']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Modify fields"}),": Update title, content, or tags"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Submit"}),": Validates and sends updated data to backend"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Success feedback"}),": Shows toast, refreshes list, closes modal"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"search-operations",children:"Search Operations"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Enter search term"}),": Type in navbar search bar"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Execute search"}),": Click search icon or press enter"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Display results"}),": Shows filtered notes matching query"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Clear search"}),": Click clear button to return to all notes"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"state-management-patterns",children:"State Management Patterns"}),"\n",(0,t.jsx)(n.h3,{id:"lifting-state-up",children:"Lifting State Up"}),"\n",(0,t.jsx)(n.p,{children:'The Home component manages state for child components, following React\'s "lifting state up" pattern:'}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Search state"}),": Managed in Home, passed to Navbar"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Notes data"}),": Centralized in Home, passed to NoteCard components"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Modal state"}),": Controlled by Home, affects AddEditNotes component"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"callback-functions",children:"Callback Functions"}),"\n",(0,t.jsx)(n.p,{children:"Parent-to-child communication through callback props:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"getAllNotes"})}),": Passed to AddEditNotes for refreshing data"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"onSearchNote"})}),": Passed to Navbar for search functionality"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"showToastMessage"})}),": Passed to AddEditNotes for user feedback"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"connection-to-other-components",children:"Connection to Other Components"}),"\n",(0,t.jsx)(n.h3,{id:"backend-integration",children:"Backend Integration"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Authentication"}),": Validates user tokens and handles auth failures"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"CRUD operations"}),": Create, read, update, delete notes via API"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Search functionality"}),": Server-side search through note content"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"component-hierarchy",children:"Component Hierarchy"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Home"})," (main container)","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Navbar"})," (search and user info)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"NoteCard"})," (individual note display)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"AddEditNotes"})," (modal for note operations)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Toast"})," (user feedback notifications)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"EmptyCard"})," (empty state display)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"state-flow",children:"State Flow"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Top-down data flow"}),": State flows from Home to child components"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Event bubbling"}),": User actions bubble up through callback functions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Centralized updates"}),": All state changes coordinated through Home component"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>i});var r=s(6540);const t={},o=r.createContext(t);function a(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);