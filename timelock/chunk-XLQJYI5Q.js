import{C as f}from"./chunk-C2YRU3U3.js";import{Hb as c,R as T,W as l,c as t,ja as y}from"./chunk-KEP2F56I.js";var m=class i{todoService=l(f);focusDateSignal=y(new Date);todaysFocusTasks=c(()=>{let s=this.todoService.todos();return this.flattenTodos(s).filter(e=>e.focusToday&&!e.archived).sort((e,a)=>(e.focusOrder||0)-(a.focusOrder||0))});todaysTasks=c(()=>{let s=this.todoService.todos();return this.flattenTodos(s).filter(e=>e.todayTask&&!e.archived).sort((e,a)=>(e.todayTaskOrder||0)-(a.todayTaskOrder||0))});availableTasks=c(()=>this.todoService.todos().filter(o=>!o.archived));focusProgress=c(()=>{let s=this.todaysFocusTasks(),o=s.filter(r=>r.completed),e=s.filter(r=>!r.completed),a=s.length,d=o.length;return{total:a,completed:d,remaining:e.length,percentage:a>0?Math.round(d/a*100):0}});addToTodaysFocus(s){return t(this,null,function*(){let o=this.todaysFocusTasks(),e=Math.max(0,...o.map(a=>a.focusOrder||0));yield this.todoService.updateTodo(s,{focusToday:!0,focusOrder:e+1})})}removeFromTodaysFocus(s){return t(this,null,function*(){yield this.todoService.updateTodo(s,{focusToday:!1,focusOrder:void 0})})}toggleTodaysFocus(s){return t(this,null,function*(){console.log("FocusService: toggleTodaysFocus called for task:",s);let o=this.todoService.getTodoById(s);if(!o){console.error("FocusService: Task not found:",s);return}console.log("FocusService: Current focusToday status:",o.focusToday),o.focusToday?(console.log("FocusService: Removing from focus"),yield this.removeFromTodaysFocus(s)):(console.log("FocusService: Adding to focus"),yield this.addToTodaysFocus(s))})}addToTodaysTasks(s){return t(this,null,function*(){let o=this.todaysTasks(),e=Math.max(0,...o.map(a=>a.todayTaskOrder||0));yield this.todoService.updateTodo(s,{todayTask:!0,todayTaskOrder:e+1})})}removeFromTodaysTasks(s){return t(this,null,function*(){yield this.todoService.updateTodo(s,{todayTask:!1,todayTaskOrder:void 0})})}toggleTodaysTasks(s){return t(this,null,function*(){console.log("FocusService: toggleTodaysTasks called for task:",s);let o=this.todoService.getTodoById(s);if(!o){console.error("FocusService: Task not found:",s);return}console.log("FocusService: Current todayTask status:",o.todayTask),o.todayTask?(console.log("FocusService: Removing from today tasks"),yield this.removeFromTodaysTasks(s)):(console.log("FocusService: Adding to today tasks"),yield this.addToTodaysTasks(s))})}reorderFocusTasks(s,o){return t(this,null,function*(){let e=this.todaysFocusTasks();if(s<0||s>=e.length||o<0||o>=e.length)return;let a=[...e],[d]=a.splice(s,1);a.splice(o,0,d);let r=a.map((n,u)=>this.todoService.updateTodo(n.id,{focusOrder:u+1}));yield Promise.all(r)})}clearTodaysFocus(){return t(this,null,function*(){let o=this.todaysFocusTasks().map(e=>this.todoService.updateTodo(e.id,{focusToday:!1,focusOrder:void 0}));yield Promise.all(o)})}reorderTodaysTasks(s,o){return t(this,null,function*(){let e=this.todaysTasks();if(s<0||s>=e.length||o<0||o>=e.length)return;let a=[...e],[d]=a.splice(s,1);a.splice(o,0,d);let r=a.map((n,u)=>this.todoService.updateTodo(n.id,{todayTaskOrder:u+1}));yield Promise.all(r)})}clearTodaysTasks(){return t(this,null,function*(){let o=this.todaysTasks().map(e=>this.todoService.updateTodo(e.id,{todayTask:!1,todayTaskOrder:void 0}));yield Promise.all(o)})}getFocusTimeEstimate(){return this.todaysFocusTasks().reduce((o,e)=>o+(e.duration||0),0)}flattenTodos(s){let o=[];for(let e of s)o.push(e),e.subtasks&&e.subtasks.length>0&&o.push(...this.flattenTodos(e.subtasks));return o}get focusDate(){return this.focusDateSignal()}setFocusDate(s){this.focusDateSignal.set(s)}static \u0275fac=function(o){return new(o||i)};static \u0275prov=T({token:i,factory:i.\u0275fac,providedIn:"root"})};export{m as a};
